apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: &name lybbrio-dev
    app.kubernetes.io/instance: &instance lybbrio-dev
    app.kubernetes.io/part-of: *instance
    k8s-app: *name
  name: *name
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: *name
      app.kubernetes.io/instance: *instance
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: *name
        app.kubernetes.io/instance: *instance
    spec:
      imagePullSecrets:
        - name: ghcr-login-secret
      securityContext:
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
      initContainers:
        - name: initdb
          image: ghcr.io/onedr0p/postgres-init:14.8
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 10001
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          env:
            - name: INIT_POSTGRES_SUPER_PASS
              value: ${POSTGRES_SUPER_PASSWORD}
          envFrom:
            - secretRef:
                name: lybbrio-dev-env-secret
      containers:
        - name: lybbrio-dev
          image: 'ghcr.io/rtrox/lybbrio-dev:sha-0ffdc0a-20240130053203' # {"$imagepolicy": "flux-system:lybbrio-dev"}
          envFrom:
            - secretRef:
                name: lybbrio-dev-env-secret
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 1024Mi
            requests:
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          volumeMounts:
            - mountPath: /books
              name: books
      volumes:
        - name: books
          nfs:
            server: ${NFS_SERVER}
            path: /volume1/media/books
