---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: &name whisparr
    app.kubernetes.io/instance: *name
    app.kubernetes.io/component: *name
    app.kubernetes.io/part-of: *name
    k8s-app: *name
  name: *name
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: *name
      app.kubernetes.io/instance: *name
      app.kubernentes.io/component: *name
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: *name
        app.kubernetes.io/instance: *name
        app.kubernentes.io/component: *name
        setGateway: "true"
      annotations:
        backup.velero.io/backup-volumes-excludes: media
        backup.velero.io/backup-volumes: config
        pre.hook.backup.velero.io/container: fsfreeze
        pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/config"]'
        post.hook.backup.velero.io/container: fsfreeze
        post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/config"]'
    spec:

      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        supplementalGroups:
          - 100
      containers:
        - name: whisparr
          image: docker.io/hotio/whisparr:nightly-6a44c0d
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              memory: 250Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 1000
            runAsGroup: 1000
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          ports:
            - name: http
              containerPort: 8080
          env:
            - name: TZ
              value: ${LOCAL_TZ}
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: UMASK
              value: "002"
          envFrom:
            - secretRef:
                name: whisparr-secret
          livenessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 2
          startupProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 2
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /media
              name: media
        - image: ubuntu:bionic
          name: fsfreeze
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 64Mi
          securityContext:
            privileged: true
            runAsUser: 0
            runAsGroup: 0
          volumeMounts:
            - mountPath: "/config"
              name: config
              readOnly: false
          command:
            - "/bin/bash"
            - "-c"
            - "sleep infinity"
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: whisparr-config
        - name: media
          nfs:
            server: ${NFS_SERVER}
            path: /volume1/media
