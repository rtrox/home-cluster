---
fullnameOverride: prometheus

alertmanager:
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          resources:
            requests:
              storage: 1Gi
  config:
    global:
      slack_api_url: '${SECRET_DISCORD_ALERT_WEBHOOK_URL}/slack'
    receivers:
      - name: 'null'
      - name: discord
        slack_configs:
          - channel: '#x86kube-alarms'
            icon_url: 'https://avatars3.githubusercontent.com/u/3380462'
            send_resolved: true
            text: >-
              {{ range .Alerts -}}
                **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
              **Description:** {{ if ne .Annotations.description ""}}{{
              .Annotations.description }}{{else}}N/A{{ end }} **Details:**
                {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                {{ end }}
              {{ end }}
            title: >-
              [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{
              .Alerts.Firing | len }}{{ end }}] {{ if ne
              .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{
              else }}{{ .CommonLabels.alertname }}{{ end }}
            username: Prometheus
    route:
      routes:
        - matchers:
            - alertname =~ "InfoInhibitor|Watchdog"
          receiver: 'null'
        - continue: true
          match_re:
            severity: critical
          receiver: discord
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: 'true'
    enabled: true
    hosts:
      - &host 'alerts.${SECRET_DOMAIN}'
    ingressClassName: nginx
    pathType: Prefix
    tls:
      - hosts:
          - *host
        secretName: alertmanager-tls
  serviceAccount:
    create: true
    name: alertmanager
  rules:
    kubeControllerManager: false
    kubeProxy: false
    kubeScheduler: false

grafana:
  additionalDataSources:
    - access: proxy
      name: Loki
      type: loki
      url: 'http://loki-gateway.monitoring.svc.cluster.local'
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: 'true'
    enabled: true
    hosts:
      - 'graphs.${SECRET_DOMAIN}'
    tls:
      - hosts:
          - 'graphs.${SECRET_DOMAIN}'
        secretName: grafana-tls

kubeProxy:
  enabled: false
nodeExporter:
  enabled: true
  serviceMonitor:
    relabelings:
      - action: replace
        regex: (.*)
        replacement: $1
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: kubernetes_node

prometheus:
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: 'true'
    enabled: true
    hosts:
      - 'prometheus.${SECRET_DOMAIN}'
    ingressClassName: nginx
    pathType: Prefix
    tls:
      - hosts:
          - 'prometheus.${SECRET_DOMAIN}'
        secretName: prometheus-tls
  prometheusSpec:
    retention: 12h
    replicaExternalLabelName: replica
    securityContext:
      fsGroup: 0
      runAsGroup: 0
      runAsNonRoot: false
      runAsUser: 0
    storageSpec:
      volumeClaimTemplate:
        spec:
          resources:
            requests:
              storage: 50Gi
    thanos:
      image: quay.io/thanos/thanos
      objectStorageConfig:
        name: thanos-objstore-secret
        key: objstore.yml
      # renovate: datasource=docker depName=quay.io/thanos/thanos
      version: "v0.28.1"
    walCompression: true
  thanosService:
    enabled: true
  thanosServiceMonitor:
    enabled: true
