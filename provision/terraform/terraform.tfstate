{
  "version": 4,
  "terraform_version": "1.3.6",
  "serial": 283,
  "lineage": "010f88ba-7585-17bd-e205-abfa42200d0b",
  "outputs": {
    "k3s-api-fqdn": {
      "value": "api.cho.rtrox.com",
      "type": "string"
    },
    "k3s-api-vip": {
      "value": "172.18.2.252",
      "type": "string"
    },
    "k3s-config": {
      "value": "---\ntls-san:\n  - api.cho.rtrox.com\n  - 172.18.2.252\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
      "type": "string"
    }
  },
  "resources": [
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "ct_config",
      "name": "install",
      "provider": "provider[\"registry.terraform.io/poseidon/ct\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node01\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node01-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "908637654",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLMYrDMBCF4V6nmPXCdpLsdsHkImkkzSRWkDRBMzb27UNI0qR58OD7f398zM3HIAtY2k1aewFrO2k/YBphWFTv/97XoGmJvDvJ6Lp23l3i6vO1Zc3cTixzbqKhFMK/xkjzc8ZpAMvwUe4m3MylBE2h27eHswGwCB5p84Lh9fNXtCJtASsIqRYycohSTVqgU2RW8wgAAP//FWpKkcgAAAA=\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node01-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node02\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node02-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "2515247730",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vS9SgUX8RLkhltJMlIZlratxdRL14++OD3//3xMTcfg8xgaTNp6QWs7aR9h/8Rhln1fvS+Bk1z5M1JRte18+YSV5+vLWvmdmKZchMNpRD+NUaanjMeBrAMH+Vuws1cStAUun17OBsAi+CRVi8YXj9/RQvSGrCCkGohI7so1aQFOkVmNY8AAAD//1sM4inIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node02-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node03\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node03-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "843122694",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vSxZtQfBEvSWa0kSQjmWlp315EvXj54IPf//fHx9x8DDKDpc2kpRewtpP2Hf5HGGbV+9H7GjTNkTcnGV3XzptLXH2+tqyZ24llyk00lEL41xhpes54GMAyfJS7CTdzKUFT6Pbt4WwALIJHWr1geP38FS1Ia8AKQqqFjOyiVJMW6BSZ1TwCAAD//14sVffIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node03-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "ct_config",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/ct\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node01.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1hZ2VudC9zZXJ2aWNlYWNjb3VudC55YW1sCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6ICJjaWxpdW0iCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLW9wZXJhdG9yL3NlcnZpY2VhY2NvdW50LnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogImNpbGl1bS1vcGVyYXRvciIKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tY29uZmlnbWFwLnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bS1jb25maWcKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCmRhdGE6CgogICMgSWRlbnRpdHkgYWxsb2NhdGlvbiBtb2RlIHNlbGVjdHMgaG93IGlkZW50aXRpZXMgYXJlIHNoYXJlZCBiZXR3ZWVuIGNpbGl1bQogICMgbm9kZXMgYnkgc2V0dGluZyBob3cgdGhleSBhcmUgc3RvcmVkLiBUaGUgb3B0aW9ucyBhcmUgImNyZCIgb3IgImt2c3RvcmUiLgogICMgLSAiY3JkIiBzdG9yZXMgaWRlbnRpdGllcyBpbiBrdWJlcm5ldGVzIGFzIENSRHMgKGN1c3RvbSByZXNvdXJjZSBkZWZpbml0aW9uKS4KICAjICAgVGhlc2UgY2FuIGJlIHF1ZXJpZWQgd2l0aDoKICAjICAgICBrdWJlY3RsIGdldCBjaWxpdW1pZAogICMgLSAia3ZzdG9yZSIgc3RvcmVzIGlkZW50aXRpZXMgaW4gYW4gZXRjZCBrdnN0b3JlLCB0aGF0IGlzCiAgIyAgIGNvbmZpZ3VyZWQgYmVsb3cuIENpbGl1bSB2ZXJzaW9ucyBiZWZvcmUgMS42IHN1cHBvcnRlZCBvbmx5IHRoZSBrdnN0b3JlCiAgIyAgIGJhY2tlbmQuIFVwZ3JhZGVzIGZyb20gdGhlc2Ugb2xkZXIgY2lsaXVtIHZlcnNpb25zIHNob3VsZCBjb250aW51ZSB1c2luZwogICMgICB0aGUga3ZzdG9yZSBieSBjb21tZW50aW5nIG91dCB0aGUgaWRlbnRpdHktYWxsb2NhdGlvbi1tb2RlIGJlbG93LCBvcgogICMgICBzZXR0aW5nIGl0IHRvICJrdnN0b3JlIi4KICBpZGVudGl0eS1hbGxvY2F0aW9uLW1vZGU6IGNyZAogIGNpbGl1bS1lbmRwb2ludC1nYy1pbnRlcnZhbDogIjVtMHMiCiAgbm9kZXMtZ2MtaW50ZXJ2YWw6ICI1bTBzIgogICMgRGlzYWJsZSB0aGUgdXNhZ2Ugb2YgQ2lsaXVtRW5kcG9pbnQgQ1JECiAgZGlzYWJsZS1lbmRwb2ludC1jcmQ6ICJmYWxzZSIKCiAgIyBJZiB5b3Ugd2FudCB0byBydW4gY2lsaXVtIGluIGRlYnVnIG1vZGUgY2hhbmdlIHRoaXMgdmFsdWUgdG8gdHJ1ZQogIGRlYnVnOiAiZmFsc2UiCiAgIyBUaGUgYWdlbnQgY2FuIGJlIHB1dCBpbnRvIHRoZSBmb2xsb3dpbmcgdGhyZWUgcG9saWN5IGVuZm9yY2VtZW50IG1vZGVzCiAgIyBkZWZhdWx0LCBhbHdheXMgYW5kIG5ldmVyLgogICMgaHR0cHM6Ly9kb2NzLmNpbGl1bS5pby9lbi9sYXRlc3QvcG9saWN5L2ludHJvLyNwb2xpY3ktZW5mb3JjZW1lbnQtbW9kZXMKICBlbmFibGUtcG9saWN5OiAiZGVmYXVsdCIKCiAgIyBFbmFibGUgSVB2NCBhZGRyZXNzaW5nLiBJZiBlbmFibGVkLCBhbGwgZW5kcG9pbnRzIGFyZSBhbGxvY2F0ZWQgYW4gSVB2NAogICMgYWRkcmVzcy4KICBlbmFibGUtaXB2NDogInRydWUiCgogICMgRW5hYmxlIElQdjYgYWRkcmVzc2luZy4gSWYgZW5hYmxlZCwgYWxsIGVuZHBvaW50cyBhcmUgYWxsb2NhdGVkIGFuIElQdjYKICAjIGFkZHJlc3MuCiAgZW5hYmxlLWlwdjY6ICJmYWxzZSIKICAjIFVzZXJzIHdobyB3aXNoIHRvIHNwZWNpZnkgdGhlaXIgb3duIGN1c3RvbSBDTkkgY29uZmlndXJhdGlvbiBmaWxlIG11c3Qgc2V0CiAgIyBjdXN0b20tY25pLWNvbmYgdG8gInRydWUiLCBvdGhlcndpc2UgQ2lsaXVtIG1heSBvdmVyd3JpdGUgdGhlIGNvbmZpZ3VyYXRpb24uCiAgY3VzdG9tLWNuaS1jb25mOiAiZmFsc2UiCiAgZW5hYmxlLWJwZi1jbG9jay1wcm9iZTogInRydWUiCiAgIyBJZiB5b3Ugd2FudCBjaWxpdW0gbW9uaXRvciB0byBhZ2dyZWdhdGUgdHJhY2luZyBmb3IgcGFja2V0cywgc2V0IHRoaXMgbGV2ZWwKICAjIHRvICJsb3ciLCAibWVkaXVtIiwgb3IgIm1heGltdW0iLiBUaGUgaGlnaGVyIHRoZSBsZXZlbCwgdGhlIGxlc3MgcGFja2V0cwogICMgdGhhdCB3aWxsIGJlIHNlZW4gaW4gbW9uaXRvciBvdXRwdXQuCiAgbW9uaXRvci1hZ2dyZWdhdGlvbjogbWVkaXVtCgogICMgVGhlIG1vbml0b3IgYWdncmVnYXRpb24gaW50ZXJ2YWwgZ292ZXJucyB0aGUgdHlwaWNhbCB0aW1lIGJldHdlZW4gbW9uaXRvcgogICMgbm90aWZpY2F0aW9uIGV2ZW50cyBmb3IgZWFjaCBhbGxvd2VkIGNvbm5lY3Rpb24uCiAgIwogICMgT25seSBlZmZlY3RpdmUgd2hlbiBtb25pdG9yIGFnZ3JlZ2F0aW9uIGlzIHNldCB0byAibWVkaXVtIiBvciBoaWdoZXIuCiAgbW9uaXRvci1hZ2dyZWdhdGlvbi1pbnRlcnZhbDogNXMKCiAgIyBUaGUgbW9uaXRvciBhZ2dyZWdhdGlvbiBmbGFncyBkZXRlcm1pbmUgd2hpY2ggVENQIGZsYWdzIHdoaWNoLCB1cG9uIHRoZQogICMgZmlyc3Qgb2JzZXJ2YXRpb24sIGNhdXNlIG1vbml0b3Igbm90aWZpY2F0aW9ucyB0byBiZSBnZW5lcmF0ZWQuCiAgIwogICMgT25seSBlZmZlY3RpdmUgd2hlbiBtb25pdG9yIGFnZ3JlZ2F0aW9uIGlzIHNldCB0byAibWVkaXVtIiBvciBoaWdoZXIuCiAgbW9uaXRvci1hZ2dyZWdhdGlvbi1mbGFnczogYWxsCiAgIyBTcGVjaWZpZXMgdGhlIHJhdGlvICgwLjAtMS4wKSBvZiB0b3RhbCBzeXN0ZW0gbWVtb3J5IHRvIHVzZSBmb3IgZHluYW1pYwogICMgc2l6aW5nIG9mIHRoZSBUQ1AgQ1QsIG5vbi1UQ1AgQ1QsIE5BVCBhbmQgcG9saWN5IEJQRiBtYXBzLgogIGJwZi1tYXAtZHluYW1pYy1zaXplLXJhdGlvOiAiMC4wMDI1IgogICMgYnBmLXBvbGljeS1tYXAtbWF4IHNwZWNpZmllcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgZW50cmllcyBpbiBlbmRwb2ludAogICMgcG9saWN5IG1hcCAocGVyIGVuZHBvaW50KQogIGJwZi1wb2xpY3ktbWFwLW1heDogIjE2Mzg0IgogICMgYnBmLWxiLW1hcC1tYXggc3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBlbnRyaWVzIGluIGJwZiBsYiBzZXJ2aWNlLAogICMgYmFja2VuZCBhbmQgYWZmaW5pdHkgbWFwcy4KICBicGYtbGItbWFwLW1heDogIjY1NTM2IgogICMgYnBmLWxiLWJ5cGFzcy1maWItbG9va3VwIGluc3RydWN0cyBDaWxpdW0gdG8gZW5hYmxlIHRoZSBGSUIgbG9va3VwIGJ5cGFzcwogICMgb3B0aW1pemF0aW9uIGZvciBub2RlcG9ydCByZXZlcnNlIE5BVCBoYW5kbGluZy4KICBicGYtbGItZXh0ZXJuYWwtY2x1c3RlcmlwOiAiZmFsc2UiCgogICMgUHJlLWFsbG9jYXRpb24gb2YgbWFwIGVudHJpZXMgYWxsb3dzIHBlci1wYWNrZXQgbGF0ZW5jeSB0byBiZSByZWR1Y2VkLCBhdAogICMgdGhlIGV4cGVuc2Ugb2YgdXAtZnJvbnQgbWVtb3J5IGFsbG9jYXRpb24gZm9yIHRoZSBlbnRyaWVzIGluIHRoZSBtYXBzLiBUaGUKICAjIGRlZmF1bHQgdmFsdWUgYmVsb3cgd2lsbCBtaW5pbWl6ZSBtZW1vcnkgdXNhZ2UgaW4gdGhlIGRlZmF1bHQgaW5zdGFsbGF0aW9uOwogICMgdXNlcnMgd2hvIGFyZSBzZW5zaXRpdmUgdG8gbGF0ZW5jeSBtYXkgY29uc2lkZXIgc2V0dGluZyB0aGlzIHRvICJ0cnVlIi4KICAjCiAgIyBUaGlzIG9wdGlvbiB3YXMgaW50cm9kdWNlZCBpbiBDaWxpdW0gMS40LiBDaWxpdW0gMS4zIGFuZCBlYXJsaWVyIGlnbm9yZQogICMgdGhpcyBvcHRpb24gYW5kIGJlaGF2ZSBhcyB0aG91Z2ggaXQgaXMgc2V0IHRvICJ0cnVlIi4KICAjCiAgIyBJZiB0aGlzIHZhbHVlIGlzIG1vZGlmaWVkLCB0aGVuIGR1cmluZyB0aGUgbmV4dCBDaWxpdW0gc3RhcnR1cCB0aGUgcmVzdG9yZQogICMgb2YgZXhpc3RpbmcgZW5kcG9pbnRzIGFuZCB0cmFja2luZyBvZiBvbmdvaW5nIGNvbm5lY3Rpb25zIG1heSBiZSBkaXNydXB0ZWQuCiAgIyBBcyBhIHJlc3VsdCwgcmVwbHkgcGFja2V0cyBtYXkgYmUgZHJvcHBlZCBhbmQgdGhlIGxvYWQtYmFsYW5jaW5nIGRlY2lzaW9ucwogICMgZm9yIGVzdGFibGlzaGVkIGNvbm5lY3Rpb25zIG1heSBjaGFuZ2UuCiAgIwogICMgSWYgdGhpcyBvcHRpb24gaXMgc2V0IHRvICJmYWxzZSIgZHVyaW5nIGFuIHVwZ3JhZGUgZnJvbSAxLjMgb3IgZWFybGllciB0bwogICMgMS40IG9yIGxhdGVyLCB0aGVuIGl0IG1heSBjYXVzZSBvbmUtdGltZSBkaXNydXB0aW9ucyBkdXJpbmcgdGhlIHVwZ3JhZGUuCiAgcHJlYWxsb2NhdGUtYnBmLW1hcHM6ICJmYWxzZSIKCiAgIyBSZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hpbmcgY29tcGF0aWJsZSBJc3RpbyBzaWRlY2FyIGlzdGlvLXByb3h5CiAgIyBjb250YWluZXIgaW1hZ2UgbmFtZXMKICBzaWRlY2FyLWlzdGlvLXByb3h5LWltYWdlOiAiY2lsaXVtL2lzdGlvX3Byb3h5IgoKICAjIE5hbWUgb2YgdGhlIGNsdXN0ZXIuIE9ubHkgcmVsZXZhbnQgd2hlbiBidWlsZGluZyBhIG1lc2ggb2YgY2x1c3RlcnMuCiAgY2x1c3Rlci1uYW1lOiBjaG9uZ3VzCiAgIyBVbmlxdWUgSUQgb2YgdGhlIGNsdXN0ZXIuIE11c3QgYmUgdW5pcXVlIGFjcm9zcyBhbGwgY29ubmV0ZWQgY2x1c3RlcnMgYW5kCiAgIyBpbiB0aGUgcmFuZ2Ugb2YgMSBhbmQgMjU1LiBPbmx5IHJlbGV2YW50IHdoZW4gYnVpbGRpbmcgYSBtZXNoIG9mIGNsdXN0ZXJzLgogIGNsdXN0ZXItaWQ6ICIxIgoKICAjIEVuY2Fwc3VsYXRpb24gbW9kZSBmb3IgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIG5vZGVzCiAgIyBQb3NzaWJsZSB2YWx1ZXM6CiAgIyAgIC0gZGlzYWJsZWQKICAjICAgLSB2eGxhbiAoZGVmYXVsdCkKICAjICAgLSBnZW5ldmUKICB0dW5uZWw6ICJkaXNhYmxlZCIKICAjIEVuYWJsZXMgTDcgcHJveHkgZm9yIEw3IHBvbGljeSBlbmZvcmNlbWVudCBhbmQgdmlzaWJpbGl0eQogIGVuYWJsZS1sNy1wcm94eTogInRydWUiCgogIGVuYWJsZS1pcHY0LW1hc3F1ZXJhZGU6ICJ0cnVlIgogIGVuYWJsZS1pcHY2LW1hc3F1ZXJhZGU6ICJ0cnVlIgoKICBlbmFibGUteHQtc29ja2V0LWZhbGxiYWNrOiAidHJ1ZSIKICBpbnN0YWxsLWlwdGFibGVzLXJ1bGVzOiAidHJ1ZSIKICBpbnN0YWxsLW5vLWNvbm50cmFjay1pcHRhYmxlcy1ydWxlczogImZhbHNlIgoKICBhdXRvLWRpcmVjdC1ub2RlLXJvdXRlczogInRydWUiCiAgZW5hYmxlLWxvY2FsLXJlZGlyZWN0LXBvbGljeTogInRydWUiCiAgaXB2NC1uYXRpdmUtcm91dGluZy1jaWRyOiAxMC4yNDQuMC4wLzE2CgogIGt1YmUtcHJveHktcmVwbGFjZW1lbnQ6ICJzdHJpY3QiCiAga3ViZS1wcm94eS1yZXBsYWNlbWVudC1oZWFsdGh6LWJpbmQtYWRkcmVzczogIjAuMC4wLjA6MTAyNTYiCiAgYnBmLWxiLXNvY2s6ICJmYWxzZSIKICBlbmFibGUtaGVhbHRoLWNoZWNrLW5vZGVwb3J0OiAidHJ1ZSIKICBub2RlLXBvcnQtYmluZC1wcm90ZWN0aW9uOiAidHJ1ZSIKICBlbmFibGUtYXV0by1wcm90ZWN0LW5vZGUtcG9ydC1yYW5nZTogInRydWUiCiAgYnBmLWxiLW1vZGU6ICJkc3IiCiAgYnBmLWxiLWFsZ29yaXRobTogIm1hZ2xldiIKICBlbmFibGUtc3ZjLXNvdXJjZS1yYW5nZS1jaGVjazogInRydWUiCiAgZW5hYmxlLWwyLW5laWdoLWRpc2NvdmVyeTogInRydWUiCiAgYXJwaW5nLXJlZnJlc2gtcGVyaW9kOiAiMzBzIgogIGVuYWJsZS1lbmRwb2ludC1yb3V0ZXM6ICJ0cnVlIgogIGVuYWJsZS1lbmRwb2ludC1oZWFsdGgtY2hlY2tpbmc6ICJ0cnVlIgogIGVuYWJsZS1oZWFsdGgtY2hlY2tpbmc6ICJ0cnVlIgogIGVuYWJsZS13ZWxsLWtub3duLWlkZW50aXRpZXM6ICJmYWxzZSIKICBlbmFibGUtcmVtb3RlLW5vZGUtaWRlbnRpdHk6ICJ0cnVlIgogIHN5bmNocm9uaXplLWs4cy1ub2RlczogInRydWUiCiAgb3BlcmF0b3ItYXBpLXNlcnZlLWFkZHI6ICIxMjcuMC4wLjE6OTIzNCIKICBpcGFtOiAia3ViZXJuZXRlcyIKICBkaXNhYmxlLWNucC1zdGF0dXMtdXBkYXRlczogInRydWUiCiAgZW5hYmxlLXZ0ZXA6ICJmYWxzZSIKICB2dGVwLWVuZHBvaW50OiAiIgogIHZ0ZXAtY2lkcjogIiIKICB2dGVwLW1hc2s6ICIiCiAgdnRlcC1tYWM6ICIiCiAgZW5hYmxlLWJncC1jb250cm9sLXBsYW5lOiAiZmFsc2UiCiAgYnBmLXJvb3Q6ICIvc3lzL2ZzL2JwZiIKICBjZ3JvdXAtcm9vdDogIi9zeXMvZnMvY2dyb3VwIgogIGVuYWJsZS1rOHMtdGVybWluYXRpbmctZW5kcG9pbnQ6ICJ0cnVlIgogIHJlbW92ZS1jaWxpdW0tbm9kZS10YWludHM6ICJ0cnVlIgogIHNldC1jaWxpdW0taXMtdXAtY29uZGl0aW9uOiAidHJ1ZSIKICB1bm1hbmFnZWQtcG9kLXdhdGNoZXItaW50ZXJ2YWw6ICIxNSIKICB0b2ZxZG5zLWRucy1yZWplY3QtcmVzcG9uc2UtY29kZTogInJlZnVzZWQiCiAgdG9mcWRucy1lbmFibGUtZG5zLWNvbXByZXNzaW9uOiAidHJ1ZSIKICB0b2ZxZG5zLWVuZHBvaW50LW1heC1pcC1wZXItaG9zdG5hbWU6ICI1MCIKICB0b2ZxZG5zLWlkbGUtY29ubmVjdGlvbi1ncmFjZS1wZXJpb2Q6ICIwcyIKICB0b2ZxZG5zLW1heC1kZWZlcnJlZC1jb25uZWN0aW9uLWRlbGV0ZXM6ICIxMDAwMCIKICB0b2ZxZG5zLW1pbi10dGw6ICIzNjAwIgogIHRvZnFkbnMtcHJveHktcmVzcG9uc2UtbWF4LWRlbGF5OiAiMTAwbXMiCiAgYWdlbnQtbm90LXJlYWR5LXRhaW50LWtleTogIm5vZGUuY2lsaXVtLmlvL2FnZW50LW5vdC1yZWFkeSIKLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1hZ2VudC9jbHVzdGVycm9sZS55YW1sCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtCnJ1bGVzOgotIGFwaUdyb3VwczoKICAtIG5ldHdvcmtpbmcuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gbmV0d29ya3BvbGljaWVzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gZGlzY292ZXJ5Lms4cy5pbwogIHJlc291cmNlczoKICAtIGVuZHBvaW50c2xpY2VzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgLSBuYW1lc3BhY2VzCiAgLSBzZXJ2aWNlcwogIC0gcG9kcwogIC0gZW5kcG9pbnRzCiAgLSBub2RlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGFwaWV4dGVuc2lvbnMuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAjIFRoaXMgaXMgdXNlZCB3aGVuIHZhbGlkYXRpbmcgcG9saWNpZXMgaW4gcHJlZmxpZ2h0LiBUaGlzIHdpbGwgbmVlZCB0byBzdGF5CiAgIyB1bnRpbCB3ZSBmaWd1cmUgb3V0IGhvdyB0byBhdm9pZCAiZ2V0IiBpbnNpZGUgdGhlIHByZWZsaWdodCwgYW5kIHRoZW4KICAjIHNob3VsZCBiZSByZW1vdmVkIGlkZWFsbHkuCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1iZ3Bsb2FkYmFsYW5jZXJpcHBvb2xzCiAgLSBjaWxpdW1iZ3BwZWVyaW5ncG9saWNpZXMKICAtIGNpbGl1bWNsdXN0ZXJ3aWRlZW52b3ljb25maWdzCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcwogIC0gY2lsaXVtZWdyZXNzZ2F0ZXdheXBvbGljaWVzCiAgLSBjaWxpdW1lZ3Jlc3NuYXRwb2xpY2llcwogIC0gY2lsaXVtZW5kcG9pbnRzCiAgLSBjaWxpdW1lbmRwb2ludHNsaWNlcwogIC0gY2lsaXVtZW52b3ljb25maWdzCiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgLSBjaWxpdW1sb2NhbHJlZGlyZWN0cG9saWNpZXMKICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcwogIC0gY2lsaXVtbm9kZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtaWRlbnRpdGllcwogIC0gY2lsaXVtZW5kcG9pbnRzCiAgLSBjaWxpdW1ub2RlcwogIHZlcmJzOgogIC0gY3JlYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgIyBUbyBzeW5jaHJvbml6ZSBnYXJiYWdlIGNvbGxlY3Rpb24gb2Ygc3VjaCByZXNvdXJjZXMKICByZXNvdXJjZXM6CiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgdmVyYnM6CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1lbmRwb2ludHMKICB2ZXJiczoKICAtIGRlbGV0ZQogIC0gZ2V0Ci0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbm9kZXMKICAtIGNpbGl1bW5vZGVzL3N0YXR1cwogIHZlcmJzOgogIC0gZ2V0CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1uZXR3b3JrcG9saWNpZXMvc3RhdHVzCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcy9zdGF0dXMKICAtIGNpbGl1bWVuZHBvaW50cy9zdGF0dXMKICAtIGNpbGl1bWVuZHBvaW50cwogIHZlcmJzOgogIC0gcGF0Y2gKLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1vcGVyYXRvci9jbHVzdGVycm9sZS55YW1sCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCnJ1bGVzOgotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gcG9kcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAogICMgdG8gYXV0b21hdGljYWxseSBkZWxldGUgW2NvcmV8a3ViZV1kbnMgcG9kcyBzbyB0aGF0IGFyZSBzdGFydGluZyB0byBiZWluZwogICMgbWFuYWdlZCBieSBDaWxpdW0KICAtIGRlbGV0ZQotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gbm9kZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgIyBUbyByZW1vdmUgbm9kZSB0YWludHMKICAtIG5vZGVzCiAgIyBUbyBzZXQgTmV0d29ya1VuYXZhaWxhYmxlIGZhbHNlIG9uIHN0YXJ0dXAKICAtIG5vZGVzL3N0YXR1cwogIHZlcmJzOgogIC0gcGF0Y2gKLSBhcGlHcm91cHM6CiAgLSBkaXNjb3ZlcnkuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gZW5kcG9pbnRzbGljZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAjIHRvIHBlcmZvcm0gTEIgSVAgYWxsb2NhdGlvbiBmb3IgQkdQCiAgLSBzZXJ2aWNlcy9zdGF0dXMKICB2ZXJiczoKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogICMgdG8gY2hlY2sgYXBpc2VydmVyIGNvbm5lY3Rpdml0eQogIC0gbmFtZXNwYWNlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogICMgdG8gcGVyZm9ybSB0aGUgdHJhbnNsYXRpb24gb2YgYSBDTlAgdGhhdCBjb250YWlucyBgVG9Hcm91cGAgdG8gaXRzIGVuZHBvaW50cwogIC0gc2VydmljZXMKICAtIGVuZHBvaW50cwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcwogIC0gY2lsaXVtY2x1c3RlcndpZGVuZXR3b3JrcG9saWNpZXMKICB2ZXJiczoKICAjIENyZWF0ZSBhdXRvLWdlbmVyYXRlZCBDTlBzIGFuZCBDQ05QcyBmcm9tIFBvbGljaWVzIHRoYXQgaGF2ZSAndG9Hcm91cHMnCiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZGVsZXRlY29sbGVjdGlvbgogICMgVG8gdXBkYXRlIHRoZSBzdGF0dXMgb2YgdGhlIENOUHMgYW5kIENDTlBzCiAgLSBwYXRjaAogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcy9zdGF0dXMKICAtIGNpbGl1bWNsdXN0ZXJ3aWRlbmV0d29ya3BvbGljaWVzL3N0YXR1cwogIHZlcmJzOgogICMgVXBkYXRlIHRoZSBhdXRvLWdlbmVyYXRlZCBDTlBzIGFuZCBDQ05QcyBzdGF0dXMuCiAgLSBwYXRjaAogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtZW5kcG9pbnRzCiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgdmVyYnM6CiAgIyBUbyBwZXJmb3JtIGdhcmJhZ2UgY29sbGVjdGlvbiBvZiBzdWNoIHJlc291cmNlcwogIC0gZGVsZXRlCiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bWlkZW50aXRpZXMKICB2ZXJiczoKICAjIFRvIHN5bmNocm9uaXplIGdhcmJhZ2UgY29sbGVjdGlvbiBvZiBzdWNoIHJlc291cmNlcwogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbm9kZXMKICB2ZXJiczoKICAtIGNyZWF0ZQogIC0gdXBkYXRlCiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCiAgICAjIFRvIHBlcmZvcm0gQ2lsaXVtTm9kZSBnYXJiYWdlIGNvbGxlY3RvcgogIC0gZGVsZXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbm9kZXMvc3RhdHVzCiAgdmVyYnM6CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1lbmRwb2ludHNsaWNlcwogIC0gY2lsaXVtZW52b3ljb25maWdzCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZGVsZXRlCi0gYXBpR3JvdXBzOgogIC0gYXBpZXh0ZW5zaW9ucy5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBjdXN0b21yZXNvdXJjZWRlZmluaXRpb25zCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBhcGlleHRlbnNpb25zLms4cy5pbwogIHJlc291cmNlczoKICAtIGN1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMKICB2ZXJiczoKICAtIHVwZGF0ZQogIHJlc291cmNlTmFtZXM6CiAgLSBjaWxpdW1iZ3Bsb2FkYmFsYW5jZXJpcHBvb2xzLmNpbGl1bS5pbwogIC0gY2lsaXVtYmdwcGVlcmluZ3BvbGljaWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtY2x1c3RlcndpZGVlbnZveWNvbmZpZ3MuY2lsaXVtLmlvCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcy5jaWxpdW0uaW8KICAtIGNpbGl1bWVncmVzc2dhdGV3YXlwb2xpY2llcy5jaWxpdW0uaW8KICAtIGNpbGl1bWVncmVzc25hdHBvbGljaWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtZW5kcG9pbnRzLmNpbGl1bS5pbwogIC0gY2lsaXVtZW5kcG9pbnRzbGljZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1lbnZveWNvbmZpZ3MuY2lsaXVtLmlvCiAgLSBjaWxpdW1leHRlcm5hbHdvcmtsb2Fkcy5jaWxpdW0uaW8KICAtIGNpbGl1bWlkZW50aXRpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1sb2NhbHJlZGlyZWN0cG9saWNpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1uZXR3b3JrcG9saWNpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1ub2Rlcy5jaWxpdW0uaW8KIyBGb3IgY2lsaXVtLW9wZXJhdG9yIHJ1bm5pbmcgaW4gSEEgbW9kZS4KIwojIENpbGl1bSBvcGVyYXRvciBydW5uaW5nIGluIEhBIG1vZGUgcmVxdWlyZXMgdGhlIHVzZSBvZiBSZXNvdXJjZUxvY2sgZm9yIExlYWRlciBFbGVjdGlvbgojIGJldHdlZW4gbXVsdGlwbGUgcnVubmluZyBpbnN0YW5jZXMuCiMgVGhlIHByZWZlcnJlZCB3YXkgb2YgZG9pbmcgdGhpcyBpcyB0byB1c2UgTGVhc2VzUmVzb3VyY2VMb2NrIGFzIGVkaXRzIHRvIExlYXNlcyBhcmUgbGVzcwojIGNvbW1vbiBhbmQgZmV3ZXIgb2JqZWN0cyBpbiB0aGUgY2x1c3RlciB3YXRjaCAiYWxsIExlYXNlcyIuCi0gYXBpR3JvdXBzOgogIC0gY29vcmRpbmF0aW9uLms4cy5pbwogIHJlc291cmNlczoKICAtIGxlYXNlcwogIHZlcmJzOgogIC0gY3JlYXRlCiAgLSBnZXQKICAtIHVwZGF0ZQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLWFnZW50L2NsdXN0ZXJyb2xlYmluZGluZy55YW1sCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBjaWxpdW0Kc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiAiY2lsaXVtIgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1vcGVyYXRvci9jbHVzdGVycm9sZWJpbmRpbmcueWFtbAphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogImNpbGl1bS1vcGVyYXRvciIKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tYWdlbnQvZGFlbW9uc2V0LnlhbWwKYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIGxhYmVsczoKICAgIGs4cy1hcHA6IGNpbGl1bQpzcGVjOgogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGs4cy1hcHA6IGNpbGl1bQogIHVwZGF0ZVN0cmF0ZWd5OgogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4VW5hdmFpbGFibGU6IDIKICAgIHR5cGU6IFJvbGxpbmdVcGRhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBhbm5vdGF0aW9uczoKICAgICAgICAjIGVuc3VyZSBwb2RzIHJvbGwgd2hlbiBjb25maWdtYXAgdXBkYXRlcwogICAgICAgIGNpbGl1bS5pby9jaWxpdW0tY29uZmlnbWFwLWNoZWNrc3VtOiAiYmU2YmJiNDVhOTM5NGQxZTU4M2JhMjk4ODA2MDE5NDZjNDY3ZDZmMGRjMjA5MzI3ZGYxYzhjZGYwZjA3ZDlmYiIKICAgICAgbGFiZWxzOgogICAgICAgIGs4cy1hcHA6IGNpbGl1bQogICAgc3BlYzoKICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiBjaWxpdW0tYWdlbnQKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL2NpbGl1bTp2MS4xMi4yQHNoYTI1Njo5ODZmOGIwNGNmZGIzNWNmNzE0NzAxZTU4ZTM1ZGEwZWU2M2RhMmI4YTA0OGFiNTk2Y2NiNDlkZTU4ZDViYTM2IgogICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIGNpbGl1bS1hZ2VudAogICAgICAgIGFyZ3M6CiAgICAgICAgLSAtLWNvbmZpZy1kaXI9L3RtcC9jaWxpdW0vY29uZmlnLW1hcAogICAgICAgIHN0YXJ0dXBQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIGhvc3Q6ICIxMjcuMC4wLjEiCiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDk4NzkKICAgICAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgICAgIGh0dHBIZWFkZXJzOgogICAgICAgICAgICAtIG5hbWU6ICJicmllZiIKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICBmYWlsdXJlVGhyZXNob2xkOiAxMDUKICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDIKICAgICAgICAgIHN1Y2Nlc3NUaHJlc2hvbGQ6IDEKICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgaG9zdDogIjEyNy4wLjAuMSIKICAgICAgICAgICAgcGF0aDogL2hlYWx0aHoKICAgICAgICAgICAgcG9ydDogOTg3OQogICAgICAgICAgICBzY2hlbWU6IEhUVFAKICAgICAgICAgICAgaHR0cEhlYWRlcnM6CiAgICAgICAgICAgIC0gbmFtZTogImJyaWVmIgogICAgICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDMwCiAgICAgICAgICBzdWNjZXNzVGhyZXNob2xkOiAxCiAgICAgICAgICBmYWlsdXJlVGhyZXNob2xkOiAxMAogICAgICAgICAgdGltZW91dFNlY29uZHM6IDUKICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIGhvc3Q6ICIxMjcuMC4wLjEiCiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDk4NzkKICAgICAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgICAgIGh0dHBIZWFkZXJzOgogICAgICAgICAgICAtIG5hbWU6ICJicmllZiIKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAzMAogICAgICAgICAgc3VjY2Vzc1RocmVzaG9sZDogMQogICAgICAgICAgZmFpbHVyZVRocmVzaG9sZDogMwogICAgICAgICAgdGltZW91dFNlY29uZHM6IDUKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBLOFNfTk9ERV9OQU1FCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgZmllbGRQYXRoOiBzcGVjLm5vZGVOYW1lCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fSzhTX05BTUVTUEFDRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZXNwYWNlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQ0xVU1RFUk1FU0hfQ09ORklHCiAgICAgICAgICB2YWx1ZTogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoLwogICAgICAgIC0gbmFtZTogQ0lMSVVNX0NOSV9DSEFJTklOR19NT0RFCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAga2V5OiBjbmktY2hhaW5pbmctbW9kZQogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQ1VTVE9NX0NOSV9DT05GCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAga2V5OiBjdXN0b20tY25pLWNvbmYKICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAiMTcyLjE4LjIuMjUyIgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX1BPUlQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICBsaWZlY3ljbGU6CiAgICAgICAgICBwb3N0U3RhcnQ6CiAgICAgICAgICAgIGV4ZWM6CiAgICAgICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgICAtICIvY25pLWluc3RhbGwuc2giCiAgICAgICAgICAgICAgLSAiLS1lbmFibGUtZGVidWc9ZmFsc2UiCiAgICAgICAgICAgICAgLSAiLS1jbmktZXhjbHVzaXZlPXRydWUiCiAgICAgICAgICAgICAgLSAiLS1sb2ctZmlsZT0vdmFyL3J1bi9jaWxpdW0vY2lsaXVtLWNuaS5sb2ciCiAgICAgICAgICBwcmVTdG9wOgogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgLSAvY25pLXVuaW5zdGFsbC5zaAogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIHByaXZpbGVnZWQ6IHRydWUKICAgICAgICB0ZXJtaW5hdGlvbk1lc3NhZ2VQb2xpY3k6IEZhbGxiYWNrVG9Mb2dzT25FcnJvcgogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGJwZi1tYXBzCiAgICAgICAgICBtb3VudFBhdGg6IC9zeXMvZnMvYnBmCiAgICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBCaWRpcmVjdGlvbmFsCiAgICAgICAgIyBDaGVjayBmb3IgZHVwbGljYXRlIG1vdW50cyBiZWZvcmUgbW91bnRpbmcKICAgICAgICAtIG5hbWU6IGNpbGl1bS1jZ3JvdXAKICAgICAgICAgIG1vdW50UGF0aDogL3N5cy9mcy9jZ3JvdXAKICAgICAgICAtIG5hbWU6IGNpbGl1bS1ydW4KICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9ydW4vY2lsaXVtCiAgICAgICAgLSBuYW1lOiBjbmktcGF0aAogICAgICAgICAgbW91bnRQYXRoOiAvaG9zdC9vcHQvY25pL2JpbgogICAgICAgIC0gbmFtZTogZXRjLWNuaS1uZXRkCiAgICAgICAgICBtb3VudFBhdGg6IC9ob3N0L2V0Yy9jbmkvbmV0LmQKICAgICAgICAtIG5hbWU6IGNsdXN0ZXJtZXNoLXNlY3JldHMKICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoCiAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgIC0gbmFtZTogY2lsaXVtLWNvbmZpZy1wYXRoCiAgICAgICAgICBtb3VudFBhdGg6IC90bXAvY2lsaXVtL2NvbmZpZy1tYXAKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgICAjIE5lZWRlZCB0byBiZSBhYmxlIHRvIGxvYWQga2VybmVsIG1vZHVsZXMKICAgICAgICAtIG5hbWU6IGxpYi1tb2R1bGVzCiAgICAgICAgICBtb3VudFBhdGg6IC9saWIvbW9kdWxlcwogICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgICAtIG5hbWU6IHh0YWJsZXMtbG9jawogICAgICAgICAgbW91bnRQYXRoOiAvcnVuL3h0YWJsZXMubG9jawogICAgICBpbml0Q29udGFpbmVyczoKICAgICAgLSBuYW1lOiBjbGVhbi1jaWxpdW0tc3RhdGUKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL2NpbGl1bTp2MS4xMi4yQHNoYTI1Njo5ODZmOGIwNGNmZGIzNWNmNzE0NzAxZTU4ZTM1ZGEwZWU2M2RhMmI4YTA0OGFiNTk2Y2NiNDlkZTU4ZDViYTM2IgogICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIC9pbml0LWNvbnRhaW5lci5zaAogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IENJTElVTV9BTExfU1RBVEUKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgIG5hbWU6IGNpbGl1bS1jb25maWcKICAgICAgICAgICAgICBrZXk6IGNsZWFuLWNpbGl1bS1zdGF0ZQogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQlBGX1NUQVRFCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAga2V5OiBjbGVhbi1jaWxpdW0tYnBmLXN0YXRlCiAgICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9IT1NUCiAgICAgICAgICB2YWx1ZTogIjE3Mi4xOC4yLjI1MiIKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogYnBmLW1hcHMKICAgICAgICAgIG1vdW50UGF0aDogL3N5cy9mcy9icGYKICAgICAgICAgICMgUmVxdWlyZWQgdG8gbW91bnQgY2dyb3VwIGZpbGVzeXN0ZW0gZnJvbSB0aGUgaG9zdCB0byBjaWxpdW0gYWdlbnQgcG9kCiAgICAgICAgLSBuYW1lOiBjaWxpdW0tY2dyb3VwCiAgICAgICAgICBtb3VudFBhdGg6IC9zeXMvZnMvY2dyb3VwCiAgICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBIb3N0VG9Db250YWluZXIKICAgICAgICAtIG5hbWU6IGNpbGl1bS1ydW4KICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9ydW4vY2lsaXVtCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgcmVxdWVzdHM6CiAgICAgICAgICAgIGNwdTogMTAwbQogICAgICAgICAgICBtZW1vcnk6IDEwME1pICMgd2FpdC1mb3Ita3ViZS1wcm94eQogICAgICByZXN0YXJ0UG9saWN5OiBBbHdheXMKICAgICAgcHJpb3JpdHlDbGFzc05hbWU6IHN5c3RlbS1ub2RlLWNyaXRpY2FsCiAgICAgIHNlcnZpY2VBY2NvdW50OiAiY2lsaXVtIgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6ICJjaWxpdW0iCiAgICAgIHRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzOiAxCiAgICAgIGhvc3ROZXR3b3JrOiB0cnVlCiAgICAgIGFmZmluaXR5OgogICAgICAgIHBvZEFudGlBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAtIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICAgICAgbWF0Y2hMYWJlbHM6CiAgICAgICAgICAgICAgICBrOHMtYXBwOiBjaWxpdW0KICAgICAgICAgICAgdG9wb2xvZ3lLZXk6IGt1YmVybmV0ZXMuaW8vaG9zdG5hbWUKICAgICAgbm9kZVNlbGVjdG9yOgogICAgICAgIGt1YmVybmV0ZXMuaW8vb3M6IGxpbnV4CiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0gb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAgICMgVG8ga2VlcCBzdGF0ZSBiZXR3ZWVuIHJlc3RhcnRzIC8gdXBncmFkZXMKICAgICAgLSBuYW1lOiBjaWxpdW0tcnVuCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvdmFyL3J1bi9jaWxpdW0KICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICAgIyBUbyBrZWVwIHN0YXRlIGJldHdlZW4gcmVzdGFydHMgLyB1cGdyYWRlcyBmb3IgYnBmIG1hcHMKICAgICAgLSBuYW1lOiBicGYtbWFwcwogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL3N5cy9mcy9icGYKICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICMgVG8ga2VlcCBzdGF0ZSBiZXR3ZWVuIHJlc3RhcnRzIC8gdXBncmFkZXMgZm9yIGNncm91cDIgZmlsZXN5c3RlbQogICAgICAtIG5hbWU6IGNpbGl1bS1jZ3JvdXAKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9zeXMvZnMvY2dyb3VwCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnlPckNyZWF0ZQogICAgICAjIFRvIGluc3RhbGwgY2lsaXVtIGNuaSBwbHVnaW4gaW4gdGhlIGhvc3QKICAgICAgLSBuYW1lOiBjbmktcGF0aAogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogIC9vcHQvY25pL2JpbgogICAgICAgICAgdHlwZTogRGlyZWN0b3J5T3JDcmVhdGUKICAgICAgICAjIFRvIGluc3RhbGwgY2lsaXVtIGNuaSBjb25maWd1cmF0aW9uIGluIHRoZSBob3N0CiAgICAgIC0gbmFtZTogZXRjLWNuaS1uZXRkCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvZXRjL2NuaS9uZXQuZAogICAgICAgICAgdHlwZTogRGlyZWN0b3J5T3JDcmVhdGUKICAgICAgICAjIFRvIGJlIGFibGUgdG8gbG9hZCBrZXJuZWwgbW9kdWxlcwogICAgICAtIG5hbWU6IGxpYi1tb2R1bGVzCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvbGliL21vZHVsZXMKICAgICAgICAjIFRvIGFjY2VzcyBpcHRhYmxlcyBjb25jdXJyZW50bHkgd2l0aCBvdGhlciBwcm9jZXNzZXMgKGUuZy4ga3ViZS1wcm94eSkKICAgICAgLSBuYW1lOiB4dGFibGVzLWxvY2sKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9ydW4veHRhYmxlcy5sb2NrCiAgICAgICAgICB0eXBlOiBGaWxlT3JDcmVhdGUKICAgICAgICAjIFRvIHJlYWQgdGhlIGNsdXN0ZXJtZXNoIGNvbmZpZ3VyYXRpb24KICAgICAgLSBuYW1lOiBjbHVzdGVybWVzaC1zZWNyZXRzCiAgICAgICAgc2VjcmV0OgogICAgICAgICAgc2VjcmV0TmFtZTogY2lsaXVtLWNsdXN0ZXJtZXNoCiAgICAgICAgICAjIG5vdGU6IHRoZSBsZWFkaW5nIHplcm8gbWVhbnMgdGhpcyBudW1iZXIgaXMgaW4gb2N0YWwgcmVwcmVzZW50YXRpb246IGRvIG5vdCByZW1vdmUgaXQKICAgICAgICAgIGRlZmF1bHRNb2RlOiAwNDAwCiAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgICMgVG8gcmVhZCB0aGUgY29uZmlndXJhdGlvbiBmcm9tIHRoZSBjb25maWcgbWFwCiAgICAgIC0gbmFtZTogY2lsaXVtLWNvbmZpZy1wYXRoCiAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgbmFtZTogY2lsaXVtLWNvbmZpZwotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLW9wZXJhdG9yL2RlcGxveW1lbnQueWFtbAphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIGxhYmVsczoKICAgIGlvLmNpbGl1bS9hcHA6IG9wZXJhdG9yCiAgICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKc3BlYzoKICAjIFNlZSBkb2NzIG9uIFNlcnZlckNhcGFiaWxpdGllcy5MZWFzZXNSZXNvdXJjZUxvY2sgaW4gZmlsZSBwa2cvazhzL3ZlcnNpb24vdmVyc2lvbi5nbwogICMgZm9yIG1vcmUgZGV0YWlscy4KICByZXBsaWNhczogMgogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGlvLmNpbGl1bS9hcHA6IG9wZXJhdG9yCiAgICAgIG5hbWU6IGNpbGl1bS1vcGVyYXRvcgogIHN0cmF0ZWd5OgogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4U3VyZ2U6IDEKICAgICAgbWF4VW5hdmFpbGFibGU6IDEKICAgIHR5cGU6IFJvbGxpbmdVcGRhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBhbm5vdGF0aW9uczoKICAgICAgICAjIGVuc3VyZSBwb2RzIHJvbGwgd2hlbiBjb25maWdtYXAgdXBkYXRlcwogICAgICAgIGNpbGl1bS5pby9jaWxpdW0tY29uZmlnbWFwLWNoZWNrc3VtOiAiYmU2YmJiNDVhOTM5NGQxZTU4M2JhMjk4ODA2MDE5NDZjNDY3ZDZmMGRjMjA5MzI3ZGYxYzhjZGYwZjA3ZDlmYiIKICAgICAgbGFiZWxzOgogICAgICAgIGlvLmNpbGl1bS9hcHA6IG9wZXJhdG9yCiAgICAgICAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCiAgICBzcGVjOgogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IGNpbGl1bS1vcGVyYXRvcgogICAgICAgIGltYWdlOiBxdWF5LmlvL2NpbGl1bS9vcGVyYXRvci1nZW5lcmljOnYxLjEyLjJAc2hhMjU2OjAwNTA4Zjc4ZGFlNTQxMjE2MWZhNDBlZTMwMDY5YzI4MDJhZWYyMGY3YmRkMjBlOTE0MjMxMDNiYThjMGRmNmUKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSBjaWxpdW0tb3BlcmF0b3ItZ2VuZXJpYwogICAgICAgIGFyZ3M6CiAgICAgICAgLSAtLWNvbmZpZy1kaXI9L3RtcC9jaWxpdW0vY29uZmlnLW1hcAogICAgICAgIC0gLS1kZWJ1Zz0kKENJTElVTV9ERUJVRykKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBLOFNfTk9ERV9OQU1FCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgZmllbGRQYXRoOiBzcGVjLm5vZGVOYW1lCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fSzhTX05BTUVTUEFDRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZXNwYWNlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fREVCVUcKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgIGtleTogZGVidWcKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9IT1NUCiAgICAgICAgICB2YWx1ZTogIjE3Mi4xOC4yLjI1MiIKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIGhvc3Q6ICIxMjcuMC4wLjEiCiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDkyMzQKICAgICAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiA2MAogICAgICAgICAgcGVyaW9kU2Vjb25kczogMTAKICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiAzCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogY2lsaXVtLWNvbmZpZy1wYXRoCiAgICAgICAgICBtb3VudFBhdGg6IC90bXAvY2lsaXVtL2NvbmZpZy1tYXAKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgcmVzdGFydFBvbGljeTogQWx3YXlzCiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiBzeXN0ZW0tY2x1c3Rlci1jcml0aWNhbAogICAgICBzZXJ2aWNlQWNjb3VudDogImNpbGl1bS1vcGVyYXRvciIKICAgICAgc2VydmljZUFjY291bnROYW1lOiAiY2lsaXVtLW9wZXJhdG9yIgogICAgICAjIEluIEhBIG1vZGUsIGNpbGl1bS1vcGVyYXRvciBwb2RzIG11c3Qgbm90IGJlIHNjaGVkdWxlZCBvbiB0aGUgc2FtZQogICAgICAjIG5vZGUgYXMgdGhleSB3aWxsIGNsYXNoIHdpdGggZWFjaCBvdGhlci4KICAgICAgYWZmaW5pdHk6CiAgICAgICAgcG9kQW50aUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgIC0gbGFiZWxTZWxlY3RvcjoKICAgICAgICAgICAgICBtYXRjaExhYmVsczoKICAgICAgICAgICAgICAgIGlvLmNpbGl1bS9hcHA6IG9wZXJhdG9yCiAgICAgICAgICAgIHRvcG9sb2d5S2V5OiBrdWJlcm5ldGVzLmlvL2hvc3RuYW1lCiAgICAgIG5vZGVTZWxlY3RvcjoKICAgICAgICBrdWJlcm5ldGVzLmlvL29zOiBsaW51eAogICAgICB0b2xlcmF0aW9uczoKICAgICAgICAtIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgdm9sdW1lczoKICAgICAgICAjIFRvIHJlYWQgdGhlIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgY29uZmlnIG1hcAogICAgICAtIG5hbWU6IGNpbGl1bS1jb25maWctcGF0aAogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6IGNpbGl1bS1jb25maWcK\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbmFtZTogc3lzdGVtOmt1YmUtdmlwLXJvbGUKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcyIsICJzZXJ2aWNlcy9zdGF0dXMiLCAibm9kZXMiLCAiZW5kcG9pbnRzIl0KICAgIHZlcmJzOiBbImxpc3QiLCJnZXQiLCJ3YXRjaCIsICJ1cGRhdGUiXQogIC0gYXBpR3JvdXBzOiBbImNvb3JkaW5hdGlvbi5rOHMuaW8iXQogICAgcmVzb3VyY2VzOiBbImxlYXNlcyJdCiAgICB2ZXJiczogWyJsaXN0IiwgImdldCIsICJ3YXRjaCIsICJ1cGRhdGUiLCAiY3JlYXRlIl0KLS0tCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1iaW5kaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIGxhYmVsczoKICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IGt1YmUtdmlwLWRzCiAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICBuYW1lOiBrdWJlLXZpcC1kcwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL3ZlcnNpb246IHYwLjUuNwogICAgc3BlYzoKICAgICAgYWZmaW5pdHk6CiAgICAgICAgbm9kZUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgICAgbm9kZVNlbGVjdG9yVGVybXM6CiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vY29udHJvbC1wbGFuZQogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICBjb250YWluZXJzOgogICAgICAtIGFyZ3M6CiAgICAgICAgLSBtYW5hZ2VyCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAxMjcuMC4wLjEKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiBwb3J0CiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgICAgICB2YWx1ZTogZW5vMQogICAgICAgIC0gbmFtZTogdmlwX2NpZHIKICAgICAgICAgIHZhbHVlOiAiMzIiCiAgICAgICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAgICAgLSBuYW1lOiB2aXBfZGRucwogICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAtIG5hbWU6IHZpcF9sZWFkZXJlbGVjdGlvbgogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYXNlZHVyYXRpb24KICAgICAgICAgIHZhbHVlOiAiNSIKICAgICAgICAtIG5hbWU6IHZpcF9yZW5ld2RlYWRsaW5lCiAgICAgICAgICB2YWx1ZTogIjMiCiAgICAgICAgLSBuYW1lOiB2aXBfcmV0cnlwZXJpb2QKICAgICAgICAgIHZhbHVlOiAiMSIKICAgICAgICAtIG5hbWU6IGFkZHJlc3MKICAgICAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgICAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgICAgICB2YWx1ZTogOjIxMTIKICAgICAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgIG5hbWU6IGt1YmUtdmlwCiAgICAgICAgcmVzb3VyY2VzOiB7fQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgICAtIE5FVF9SQVcKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlLXZpcAogICAgICB0b2xlcmF0aW9uczoKICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIC0gZWZmZWN0OiBOb0V4ZWN1dGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgo=\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC=--cluster-init\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=10min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "2247718308",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node01.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbmFtZTogc3lzdGVtOmt1YmUtdmlwLXJvbGUKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcyIsICJzZXJ2aWNlcy9zdGF0dXMiLCAibm9kZXMiLCAiZW5kcG9pbnRzIl0KICAgIHZlcmJzOiBbImxpc3QiLCJnZXQiLCJ3YXRjaCIsICJ1cGRhdGUiXQogIC0gYXBpR3JvdXBzOiBbImNvb3JkaW5hdGlvbi5rOHMuaW8iXQogICAgcmVzb3VyY2VzOiBbImxlYXNlcyJdCiAgICB2ZXJiczogWyJsaXN0IiwgImdldCIsICJ3YXRjaCIsICJ1cGRhdGUiLCAiY3JlYXRlIl0KLS0tCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1iaW5kaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIGxhYmVsczoKICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IGt1YmUtdmlwLWRzCiAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICBuYW1lOiBrdWJlLXZpcC1kcwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL3ZlcnNpb246IHYwLjUuNwogICAgc3BlYzoKICAgICAgYWZmaW5pdHk6CiAgICAgICAgbm9kZUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgICAgbm9kZVNlbGVjdG9yVGVybXM6CiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vY29udHJvbC1wbGFuZQogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICBjb250YWluZXJzOgogICAgICAtIGFyZ3M6CiAgICAgICAgLSBtYW5hZ2VyCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAxMjcuMC4wLjEKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiBwb3J0CiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgICAgICB2YWx1ZTogZW5vMQogICAgICAgIC0gbmFtZTogdmlwX2NpZHIKICAgICAgICAgIHZhbHVlOiAiMzIiCiAgICAgICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAgICAgLSBuYW1lOiB2aXBfZGRucwogICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAtIG5hbWU6IHZpcF9sZWFkZXJlbGVjdGlvbgogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYXNlZHVyYXRpb24KICAgICAgICAgIHZhbHVlOiAiNSIKICAgICAgICAtIG5hbWU6IHZpcF9yZW5ld2RlYWRsaW5lCiAgICAgICAgICB2YWx1ZTogIjMiCiAgICAgICAgLSBuYW1lOiB2aXBfcmV0cnlwZXJpb2QKICAgICAgICAgIHZhbHVlOiAiMSIKICAgICAgICAtIG5hbWU6IGFkZHJlc3MKICAgICAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgICAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgICAgICB2YWx1ZTogOjIxMTIKICAgICAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgIG5hbWU6IGt1YmUtdmlwCiAgICAgICAgcmVzb3VyY2VzOiB7fQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgICAtIE5FVF9SQVcKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlLXZpcAogICAgICB0b2xlcmF0aW9uczoKICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIC0gZWZmZWN0OiBOb0V4ZWN1dGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgo=\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC=--cluster-init\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node02.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbmFtZTogc3lzdGVtOmt1YmUtdmlwLXJvbGUKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcyIsICJzZXJ2aWNlcy9zdGF0dXMiLCAibm9kZXMiLCAiZW5kcG9pbnRzIl0KICAgIHZlcmJzOiBbImxpc3QiLCJnZXQiLCJ3YXRjaCIsICJ1cGRhdGUiXQogIC0gYXBpR3JvdXBzOiBbImNvb3JkaW5hdGlvbi5rOHMuaW8iXQogICAgcmVzb3VyY2VzOiBbImxlYXNlcyJdCiAgICB2ZXJiczogWyJsaXN0IiwgImdldCIsICJ3YXRjaCIsICJ1cGRhdGUiLCAiY3JlYXRlIl0KLS0tCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1iaW5kaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIGxhYmVsczoKICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IGt1YmUtdmlwLWRzCiAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICBuYW1lOiBrdWJlLXZpcC1kcwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL3ZlcnNpb246IHYwLjUuNwogICAgc3BlYzoKICAgICAgYWZmaW5pdHk6CiAgICAgICAgbm9kZUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgICAgbm9kZVNlbGVjdG9yVGVybXM6CiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vY29udHJvbC1wbGFuZQogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICBjb250YWluZXJzOgogICAgICAtIGFyZ3M6CiAgICAgICAgLSBtYW5hZ2VyCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAxMjcuMC4wLjEKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiBwb3J0CiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgICAgICB2YWx1ZTogZW5vMQogICAgICAgIC0gbmFtZTogdmlwX2NpZHIKICAgICAgICAgIHZhbHVlOiAiMzIiCiAgICAgICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAgICAgLSBuYW1lOiB2aXBfZGRucwogICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAtIG5hbWU6IHZpcF9sZWFkZXJlbGVjdGlvbgogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYXNlZHVyYXRpb24KICAgICAgICAgIHZhbHVlOiAiNSIKICAgICAgICAtIG5hbWU6IHZpcF9yZW5ld2RlYWRsaW5lCiAgICAgICAgICB2YWx1ZTogIjMiCiAgICAgICAgLSBuYW1lOiB2aXBfcmV0cnlwZXJpb2QKICAgICAgICAgIHZhbHVlOiAiMSIKICAgICAgICAtIG5hbWU6IGFkZHJlc3MKICAgICAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgICAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgICAgICB2YWx1ZTogOjIxMTIKICAgICAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgIG5hbWU6IGt1YmUtdmlwCiAgICAgICAgcmVzb3VyY2VzOiB7fQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgICAtIE5FVF9SQVcKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlLXZpcAogICAgICB0b2xlcmF0aW9uczoKICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIC0gZWZmZWN0OiBOb0V4ZWN1dGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgo=\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=10min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "2523183441",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node02.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1hZ2VudC9zZXJ2aWNlYWNjb3VudC55YW1sCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6ICJjaWxpdW0iCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLW9wZXJhdG9yL3NlcnZpY2VhY2NvdW50LnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogImNpbGl1bS1vcGVyYXRvciIKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tY29uZmlnbWFwLnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bS1jb25maWcKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCmRhdGE6CgogICMgSWRlbnRpdHkgYWxsb2NhdGlvbiBtb2RlIHNlbGVjdHMgaG93IGlkZW50aXRpZXMgYXJlIHNoYXJlZCBiZXR3ZWVuIGNpbGl1bQogICMgbm9kZXMgYnkgc2V0dGluZyBob3cgdGhleSBhcmUgc3RvcmVkLiBUaGUgb3B0aW9ucyBhcmUgImNyZCIgb3IgImt2c3RvcmUiLgogICMgLSAiY3JkIiBzdG9yZXMgaWRlbnRpdGllcyBpbiBrdWJlcm5ldGVzIGFzIENSRHMgKGN1c3RvbSByZXNvdXJjZSBkZWZpbml0aW9uKS4KICAjICAgVGhlc2UgY2FuIGJlIHF1ZXJpZWQgd2l0aDoKICAjICAgICBrdWJlY3RsIGdldCBjaWxpdW1pZAogICMgLSAia3ZzdG9yZSIgc3RvcmVzIGlkZW50aXRpZXMgaW4gYW4gZXRjZCBrdnN0b3JlLCB0aGF0IGlzCiAgIyAgIGNvbmZpZ3VyZWQgYmVsb3cuIENpbGl1bSB2ZXJzaW9ucyBiZWZvcmUgMS42IHN1cHBvcnRlZCBvbmx5IHRoZSBrdnN0b3JlCiAgIyAgIGJhY2tlbmQuIFVwZ3JhZGVzIGZyb20gdGhlc2Ugb2xkZXIgY2lsaXVtIHZlcnNpb25zIHNob3VsZCBjb250aW51ZSB1c2luZwogICMgICB0aGUga3ZzdG9yZSBieSBjb21tZW50aW5nIG91dCB0aGUgaWRlbnRpdHktYWxsb2NhdGlvbi1tb2RlIGJlbG93LCBvcgogICMgICBzZXR0aW5nIGl0IHRvICJrdnN0b3JlIi4KICBpZGVudGl0eS1hbGxvY2F0aW9uLW1vZGU6IGNyZAogIGNpbGl1bS1lbmRwb2ludC1nYy1pbnRlcnZhbDogIjVtMHMiCiAgbm9kZXMtZ2MtaW50ZXJ2YWw6ICI1bTBzIgogICMgRGlzYWJsZSB0aGUgdXNhZ2Ugb2YgQ2lsaXVtRW5kcG9pbnQgQ1JECiAgZGlzYWJsZS1lbmRwb2ludC1jcmQ6ICJmYWxzZSIKCiAgIyBJZiB5b3Ugd2FudCB0byBydW4gY2lsaXVtIGluIGRlYnVnIG1vZGUgY2hhbmdlIHRoaXMgdmFsdWUgdG8gdHJ1ZQogIGRlYnVnOiAiZmFsc2UiCiAgIyBUaGUgYWdlbnQgY2FuIGJlIHB1dCBpbnRvIHRoZSBmb2xsb3dpbmcgdGhyZWUgcG9saWN5IGVuZm9yY2VtZW50IG1vZGVzCiAgIyBkZWZhdWx0LCBhbHdheXMgYW5kIG5ldmVyLgogICMgaHR0cHM6Ly9kb2NzLmNpbGl1bS5pby9lbi9sYXRlc3QvcG9saWN5L2ludHJvLyNwb2xpY3ktZW5mb3JjZW1lbnQtbW9kZXMKICBlbmFibGUtcG9saWN5OiAiZGVmYXVsdCIKCiAgIyBFbmFibGUgSVB2NCBhZGRyZXNzaW5nLiBJZiBlbmFibGVkLCBhbGwgZW5kcG9pbnRzIGFyZSBhbGxvY2F0ZWQgYW4gSVB2NAogICMgYWRkcmVzcy4KICBlbmFibGUtaXB2NDogInRydWUiCgogICMgRW5hYmxlIElQdjYgYWRkcmVzc2luZy4gSWYgZW5hYmxlZCwgYWxsIGVuZHBvaW50cyBhcmUgYWxsb2NhdGVkIGFuIElQdjYKICAjIGFkZHJlc3MuCiAgZW5hYmxlLWlwdjY6ICJmYWxzZSIKICAjIFVzZXJzIHdobyB3aXNoIHRvIHNwZWNpZnkgdGhlaXIgb3duIGN1c3RvbSBDTkkgY29uZmlndXJhdGlvbiBmaWxlIG11c3Qgc2V0CiAgIyBjdXN0b20tY25pLWNvbmYgdG8gInRydWUiLCBvdGhlcndpc2UgQ2lsaXVtIG1heSBvdmVyd3JpdGUgdGhlIGNvbmZpZ3VyYXRpb24uCiAgY3VzdG9tLWNuaS1jb25mOiAiZmFsc2UiCiAgZW5hYmxlLWJwZi1jbG9jay1wcm9iZTogInRydWUiCiAgIyBJZiB5b3Ugd2FudCBjaWxpdW0gbW9uaXRvciB0byBhZ2dyZWdhdGUgdHJhY2luZyBmb3IgcGFja2V0cywgc2V0IHRoaXMgbGV2ZWwKICAjIHRvICJsb3ciLCAibWVkaXVtIiwgb3IgIm1heGltdW0iLiBUaGUgaGlnaGVyIHRoZSBsZXZlbCwgdGhlIGxlc3MgcGFja2V0cwogICMgdGhhdCB3aWxsIGJlIHNlZW4gaW4gbW9uaXRvciBvdXRwdXQuCiAgbW9uaXRvci1hZ2dyZWdhdGlvbjogbWVkaXVtCgogICMgVGhlIG1vbml0b3IgYWdncmVnYXRpb24gaW50ZXJ2YWwgZ292ZXJucyB0aGUgdHlwaWNhbCB0aW1lIGJldHdlZW4gbW9uaXRvcgogICMgbm90aWZpY2F0aW9uIGV2ZW50cyBmb3IgZWFjaCBhbGxvd2VkIGNvbm5lY3Rpb24uCiAgIwogICMgT25seSBlZmZlY3RpdmUgd2hlbiBtb25pdG9yIGFnZ3JlZ2F0aW9uIGlzIHNldCB0byAibWVkaXVtIiBvciBoaWdoZXIuCiAgbW9uaXRvci1hZ2dyZWdhdGlvbi1pbnRlcnZhbDogNXMKCiAgIyBUaGUgbW9uaXRvciBhZ2dyZWdhdGlvbiBmbGFncyBkZXRlcm1pbmUgd2hpY2ggVENQIGZsYWdzIHdoaWNoLCB1cG9uIHRoZQogICMgZmlyc3Qgb2JzZXJ2YXRpb24sIGNhdXNlIG1vbml0b3Igbm90aWZpY2F0aW9ucyB0byBiZSBnZW5lcmF0ZWQuCiAgIwogICMgT25seSBlZmZlY3RpdmUgd2hlbiBtb25pdG9yIGFnZ3JlZ2F0aW9uIGlzIHNldCB0byAibWVkaXVtIiBvciBoaWdoZXIuCiAgbW9uaXRvci1hZ2dyZWdhdGlvbi1mbGFnczogYWxsCiAgIyBTcGVjaWZpZXMgdGhlIHJhdGlvICgwLjAtMS4wKSBvZiB0b3RhbCBzeXN0ZW0gbWVtb3J5IHRvIHVzZSBmb3IgZHluYW1pYwogICMgc2l6aW5nIG9mIHRoZSBUQ1AgQ1QsIG5vbi1UQ1AgQ1QsIE5BVCBhbmQgcG9saWN5IEJQRiBtYXBzLgogIGJwZi1tYXAtZHluYW1pYy1zaXplLXJhdGlvOiAiMC4wMDI1IgogICMgYnBmLXBvbGljeS1tYXAtbWF4IHNwZWNpZmllcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgZW50cmllcyBpbiBlbmRwb2ludAogICMgcG9saWN5IG1hcCAocGVyIGVuZHBvaW50KQogIGJwZi1wb2xpY3ktbWFwLW1heDogIjE2Mzg0IgogICMgYnBmLWxiLW1hcC1tYXggc3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBlbnRyaWVzIGluIGJwZiBsYiBzZXJ2aWNlLAogICMgYmFja2VuZCBhbmQgYWZmaW5pdHkgbWFwcy4KICBicGYtbGItbWFwLW1heDogIjY1NTM2IgogICMgYnBmLWxiLWJ5cGFzcy1maWItbG9va3VwIGluc3RydWN0cyBDaWxpdW0gdG8gZW5hYmxlIHRoZSBGSUIgbG9va3VwIGJ5cGFzcwogICMgb3B0aW1pemF0aW9uIGZvciBub2RlcG9ydCByZXZlcnNlIE5BVCBoYW5kbGluZy4KICBicGYtbGItZXh0ZXJuYWwtY2x1c3RlcmlwOiAiZmFsc2UiCgogICMgUHJlLWFsbG9jYXRpb24gb2YgbWFwIGVudHJpZXMgYWxsb3dzIHBlci1wYWNrZXQgbGF0ZW5jeSB0byBiZSByZWR1Y2VkLCBhdAogICMgdGhlIGV4cGVuc2Ugb2YgdXAtZnJvbnQgbWVtb3J5IGFsbG9jYXRpb24gZm9yIHRoZSBlbnRyaWVzIGluIHRoZSBtYXBzLiBUaGUKICAjIGRlZmF1bHQgdmFsdWUgYmVsb3cgd2lsbCBtaW5pbWl6ZSBtZW1vcnkgdXNhZ2UgaW4gdGhlIGRlZmF1bHQgaW5zdGFsbGF0aW9uOwogICMgdXNlcnMgd2hvIGFyZSBzZW5zaXRpdmUgdG8gbGF0ZW5jeSBtYXkgY29uc2lkZXIgc2V0dGluZyB0aGlzIHRvICJ0cnVlIi4KICAjCiAgIyBUaGlzIG9wdGlvbiB3YXMgaW50cm9kdWNlZCBpbiBDaWxpdW0gMS40LiBDaWxpdW0gMS4zIGFuZCBlYXJsaWVyIGlnbm9yZQogICMgdGhpcyBvcHRpb24gYW5kIGJlaGF2ZSBhcyB0aG91Z2ggaXQgaXMgc2V0IHRvICJ0cnVlIi4KICAjCiAgIyBJZiB0aGlzIHZhbHVlIGlzIG1vZGlmaWVkLCB0aGVuIGR1cmluZyB0aGUgbmV4dCBDaWxpdW0gc3RhcnR1cCB0aGUgcmVzdG9yZQogICMgb2YgZXhpc3RpbmcgZW5kcG9pbnRzIGFuZCB0cmFja2luZyBvZiBvbmdvaW5nIGNvbm5lY3Rpb25zIG1heSBiZSBkaXNydXB0ZWQuCiAgIyBBcyBhIHJlc3VsdCwgcmVwbHkgcGFja2V0cyBtYXkgYmUgZHJvcHBlZCBhbmQgdGhlIGxvYWQtYmFsYW5jaW5nIGRlY2lzaW9ucwogICMgZm9yIGVzdGFibGlzaGVkIGNvbm5lY3Rpb25zIG1heSBjaGFuZ2UuCiAgIwogICMgSWYgdGhpcyBvcHRpb24gaXMgc2V0IHRvICJmYWxzZSIgZHVyaW5nIGFuIHVwZ3JhZGUgZnJvbSAxLjMgb3IgZWFybGllciB0bwogICMgMS40IG9yIGxhdGVyLCB0aGVuIGl0IG1heSBjYXVzZSBvbmUtdGltZSBkaXNydXB0aW9ucyBkdXJpbmcgdGhlIHVwZ3JhZGUuCiAgcHJlYWxsb2NhdGUtYnBmLW1hcHM6ICJmYWxzZSIKCiAgIyBSZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hpbmcgY29tcGF0aWJsZSBJc3RpbyBzaWRlY2FyIGlzdGlvLXByb3h5CiAgIyBjb250YWluZXIgaW1hZ2UgbmFtZXMKICBzaWRlY2FyLWlzdGlvLXByb3h5LWltYWdlOiAiY2lsaXVtL2lzdGlvX3Byb3h5IgoKICAjIE5hbWUgb2YgdGhlIGNsdXN0ZXIuIE9ubHkgcmVsZXZhbnQgd2hlbiBidWlsZGluZyBhIG1lc2ggb2YgY2x1c3RlcnMuCiAgY2x1c3Rlci1uYW1lOiBjaG9uZ3VzCiAgIyBVbmlxdWUgSUQgb2YgdGhlIGNsdXN0ZXIuIE11c3QgYmUgdW5pcXVlIGFjcm9zcyBhbGwgY29ubmV0ZWQgY2x1c3RlcnMgYW5kCiAgIyBpbiB0aGUgcmFuZ2Ugb2YgMSBhbmQgMjU1LiBPbmx5IHJlbGV2YW50IHdoZW4gYnVpbGRpbmcgYSBtZXNoIG9mIGNsdXN0ZXJzLgogIGNsdXN0ZXItaWQ6ICIxIgoKICAjIEVuY2Fwc3VsYXRpb24gbW9kZSBmb3IgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIG5vZGVzCiAgIyBQb3NzaWJsZSB2YWx1ZXM6CiAgIyAgIC0gZGlzYWJsZWQKICAjICAgLSB2eGxhbiAoZGVmYXVsdCkKICAjICAgLSBnZW5ldmUKICB0dW5uZWw6ICJkaXNhYmxlZCIKICAjIEVuYWJsZXMgTDcgcHJveHkgZm9yIEw3IHBvbGljeSBlbmZvcmNlbWVudCBhbmQgdmlzaWJpbGl0eQogIGVuYWJsZS1sNy1wcm94eTogInRydWUiCgogIGVuYWJsZS1pcHY0LW1hc3F1ZXJhZGU6ICJ0cnVlIgogIGVuYWJsZS1pcHY2LW1hc3F1ZXJhZGU6ICJ0cnVlIgoKICBlbmFibGUteHQtc29ja2V0LWZhbGxiYWNrOiAidHJ1ZSIKICBpbnN0YWxsLWlwdGFibGVzLXJ1bGVzOiAidHJ1ZSIKICBpbnN0YWxsLW5vLWNvbm50cmFjay1pcHRhYmxlcy1ydWxlczogImZhbHNlIgoKICBhdXRvLWRpcmVjdC1ub2RlLXJvdXRlczogInRydWUiCiAgZW5hYmxlLWxvY2FsLXJlZGlyZWN0LXBvbGljeTogInRydWUiCiAgaXB2NC1uYXRpdmUtcm91dGluZy1jaWRyOiAxMC4yNDQuMC4wLzE2CgogIGt1YmUtcHJveHktcmVwbGFjZW1lbnQ6ICJzdHJpY3QiCiAga3ViZS1wcm94eS1yZXBsYWNlbWVudC1oZWFsdGh6LWJpbmQtYWRkcmVzczogIjAuMC4wLjA6MTAyNTYiCiAgYnBmLWxiLXNvY2s6ICJmYWxzZSIKICBlbmFibGUtaGVhbHRoLWNoZWNrLW5vZGVwb3J0OiAidHJ1ZSIKICBub2RlLXBvcnQtYmluZC1wcm90ZWN0aW9uOiAidHJ1ZSIKICBlbmFibGUtYXV0by1wcm90ZWN0LW5vZGUtcG9ydC1yYW5nZTogInRydWUiCiAgYnBmLWxiLW1vZGU6ICJkc3IiCiAgYnBmLWxiLWFsZ29yaXRobTogIm1hZ2xldiIKICBlbmFibGUtc3ZjLXNvdXJjZS1yYW5nZS1jaGVjazogInRydWUiCiAgZW5hYmxlLWwyLW5laWdoLWRpc2NvdmVyeTogInRydWUiCiAgYXJwaW5nLXJlZnJlc2gtcGVyaW9kOiAiMzBzIgogIGVuYWJsZS1lbmRwb2ludC1yb3V0ZXM6ICJ0cnVlIgogIGVuYWJsZS1lbmRwb2ludC1oZWFsdGgtY2hlY2tpbmc6ICJ0cnVlIgogIGVuYWJsZS1oZWFsdGgtY2hlY2tpbmc6ICJ0cnVlIgogIGVuYWJsZS13ZWxsLWtub3duLWlkZW50aXRpZXM6ICJmYWxzZSIKICBlbmFibGUtcmVtb3RlLW5vZGUtaWRlbnRpdHk6ICJ0cnVlIgogIHN5bmNocm9uaXplLWs4cy1ub2RlczogInRydWUiCiAgb3BlcmF0b3ItYXBpLXNlcnZlLWFkZHI6ICIxMjcuMC4wLjE6OTIzNCIKICBpcGFtOiAia3ViZXJuZXRlcyIKICBkaXNhYmxlLWNucC1zdGF0dXMtdXBkYXRlczogInRydWUiCiAgZW5hYmxlLXZ0ZXA6ICJmYWxzZSIKICB2dGVwLWVuZHBvaW50OiAiIgogIHZ0ZXAtY2lkcjogIiIKICB2dGVwLW1hc2s6ICIiCiAgdnRlcC1tYWM6ICIiCiAgZW5hYmxlLWJncC1jb250cm9sLXBsYW5lOiAiZmFsc2UiCiAgYnBmLXJvb3Q6ICIvc3lzL2ZzL2JwZiIKICBjZ3JvdXAtcm9vdDogIi9zeXMvZnMvY2dyb3VwIgogIGVuYWJsZS1rOHMtdGVybWluYXRpbmctZW5kcG9pbnQ6ICJ0cnVlIgogIHJlbW92ZS1jaWxpdW0tbm9kZS10YWludHM6ICJ0cnVlIgogIHNldC1jaWxpdW0taXMtdXAtY29uZGl0aW9uOiAidHJ1ZSIKICB1bm1hbmFnZWQtcG9kLXdhdGNoZXItaW50ZXJ2YWw6ICIxNSIKICB0b2ZxZG5zLWRucy1yZWplY3QtcmVzcG9uc2UtY29kZTogInJlZnVzZWQiCiAgdG9mcWRucy1lbmFibGUtZG5zLWNvbXByZXNzaW9uOiAidHJ1ZSIKICB0b2ZxZG5zLWVuZHBvaW50LW1heC1pcC1wZXItaG9zdG5hbWU6ICI1MCIKICB0b2ZxZG5zLWlkbGUtY29ubmVjdGlvbi1ncmFjZS1wZXJpb2Q6ICIwcyIKICB0b2ZxZG5zLW1heC1kZWZlcnJlZC1jb25uZWN0aW9uLWRlbGV0ZXM6ICIxMDAwMCIKICB0b2ZxZG5zLW1pbi10dGw6ICIzNjAwIgogIHRvZnFkbnMtcHJveHktcmVzcG9uc2UtbWF4LWRlbGF5OiAiMTAwbXMiCiAgYWdlbnQtbm90LXJlYWR5LXRhaW50LWtleTogIm5vZGUuY2lsaXVtLmlvL2FnZW50LW5vdC1yZWFkeSIKLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1hZ2VudC9jbHVzdGVycm9sZS55YW1sCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtCnJ1bGVzOgotIGFwaUdyb3VwczoKICAtIG5ldHdvcmtpbmcuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gbmV0d29ya3BvbGljaWVzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gZGlzY292ZXJ5Lms4cy5pbwogIHJlc291cmNlczoKICAtIGVuZHBvaW50c2xpY2VzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgLSBuYW1lc3BhY2VzCiAgLSBzZXJ2aWNlcwogIC0gcG9kcwogIC0gZW5kcG9pbnRzCiAgLSBub2RlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGFwaWV4dGVuc2lvbnMuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAjIFRoaXMgaXMgdXNlZCB3aGVuIHZhbGlkYXRpbmcgcG9saWNpZXMgaW4gcHJlZmxpZ2h0LiBUaGlzIHdpbGwgbmVlZCB0byBzdGF5CiAgIyB1bnRpbCB3ZSBmaWd1cmUgb3V0IGhvdyB0byBhdm9pZCAiZ2V0IiBpbnNpZGUgdGhlIHByZWZsaWdodCwgYW5kIHRoZW4KICAjIHNob3VsZCBiZSByZW1vdmVkIGlkZWFsbHkuCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1iZ3Bsb2FkYmFsYW5jZXJpcHBvb2xzCiAgLSBjaWxpdW1iZ3BwZWVyaW5ncG9saWNpZXMKICAtIGNpbGl1bWNsdXN0ZXJ3aWRlZW52b3ljb25maWdzCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcwogIC0gY2lsaXVtZWdyZXNzZ2F0ZXdheXBvbGljaWVzCiAgLSBjaWxpdW1lZ3Jlc3NuYXRwb2xpY2llcwogIC0gY2lsaXVtZW5kcG9pbnRzCiAgLSBjaWxpdW1lbmRwb2ludHNsaWNlcwogIC0gY2lsaXVtZW52b3ljb25maWdzCiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgLSBjaWxpdW1sb2NhbHJlZGlyZWN0cG9saWNpZXMKICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcwogIC0gY2lsaXVtbm9kZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtaWRlbnRpdGllcwogIC0gY2lsaXVtZW5kcG9pbnRzCiAgLSBjaWxpdW1ub2RlcwogIHZlcmJzOgogIC0gY3JlYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgIyBUbyBzeW5jaHJvbml6ZSBnYXJiYWdlIGNvbGxlY3Rpb24gb2Ygc3VjaCByZXNvdXJjZXMKICByZXNvdXJjZXM6CiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgdmVyYnM6CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1lbmRwb2ludHMKICB2ZXJiczoKICAtIGRlbGV0ZQogIC0gZ2V0Ci0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbm9kZXMKICAtIGNpbGl1bW5vZGVzL3N0YXR1cwogIHZlcmJzOgogIC0gZ2V0CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1uZXR3b3JrcG9saWNpZXMvc3RhdHVzCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcy9zdGF0dXMKICAtIGNpbGl1bWVuZHBvaW50cy9zdGF0dXMKICAtIGNpbGl1bWVuZHBvaW50cwogIHZlcmJzOgogIC0gcGF0Y2gKLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1vcGVyYXRvci9jbHVzdGVycm9sZS55YW1sCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCnJ1bGVzOgotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gcG9kcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAogICMgdG8gYXV0b21hdGljYWxseSBkZWxldGUgW2NvcmV8a3ViZV1kbnMgcG9kcyBzbyB0aGF0IGFyZSBzdGFydGluZyB0byBiZWluZwogICMgbWFuYWdlZCBieSBDaWxpdW0KICAtIGRlbGV0ZQotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gbm9kZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgIyBUbyByZW1vdmUgbm9kZSB0YWludHMKICAtIG5vZGVzCiAgIyBUbyBzZXQgTmV0d29ya1VuYXZhaWxhYmxlIGZhbHNlIG9uIHN0YXJ0dXAKICAtIG5vZGVzL3N0YXR1cwogIHZlcmJzOgogIC0gcGF0Y2gKLSBhcGlHcm91cHM6CiAgLSBkaXNjb3ZlcnkuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gZW5kcG9pbnRzbGljZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAjIHRvIHBlcmZvcm0gTEIgSVAgYWxsb2NhdGlvbiBmb3IgQkdQCiAgLSBzZXJ2aWNlcy9zdGF0dXMKICB2ZXJiczoKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogICMgdG8gY2hlY2sgYXBpc2VydmVyIGNvbm5lY3Rpdml0eQogIC0gbmFtZXNwYWNlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogICMgdG8gcGVyZm9ybSB0aGUgdHJhbnNsYXRpb24gb2YgYSBDTlAgdGhhdCBjb250YWlucyBgVG9Hcm91cGAgdG8gaXRzIGVuZHBvaW50cwogIC0gc2VydmljZXMKICAtIGVuZHBvaW50cwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcwogIC0gY2lsaXVtY2x1c3RlcndpZGVuZXR3b3JrcG9saWNpZXMKICB2ZXJiczoKICAjIENyZWF0ZSBhdXRvLWdlbmVyYXRlZCBDTlBzIGFuZCBDQ05QcyBmcm9tIFBvbGljaWVzIHRoYXQgaGF2ZSAndG9Hcm91cHMnCiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZGVsZXRlY29sbGVjdGlvbgogICMgVG8gdXBkYXRlIHRoZSBzdGF0dXMgb2YgdGhlIENOUHMgYW5kIENDTlBzCiAgLSBwYXRjaAogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcy9zdGF0dXMKICAtIGNpbGl1bWNsdXN0ZXJ3aWRlbmV0d29ya3BvbGljaWVzL3N0YXR1cwogIHZlcmJzOgogICMgVXBkYXRlIHRoZSBhdXRvLWdlbmVyYXRlZCBDTlBzIGFuZCBDQ05QcyBzdGF0dXMuCiAgLSBwYXRjaAogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtZW5kcG9pbnRzCiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgdmVyYnM6CiAgIyBUbyBwZXJmb3JtIGdhcmJhZ2UgY29sbGVjdGlvbiBvZiBzdWNoIHJlc291cmNlcwogIC0gZGVsZXRlCiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bWlkZW50aXRpZXMKICB2ZXJiczoKICAjIFRvIHN5bmNocm9uaXplIGdhcmJhZ2UgY29sbGVjdGlvbiBvZiBzdWNoIHJlc291cmNlcwogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbm9kZXMKICB2ZXJiczoKICAtIGNyZWF0ZQogIC0gdXBkYXRlCiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCiAgICAjIFRvIHBlcmZvcm0gQ2lsaXVtTm9kZSBnYXJiYWdlIGNvbGxlY3RvcgogIC0gZGVsZXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbm9kZXMvc3RhdHVzCiAgdmVyYnM6CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1lbmRwb2ludHNsaWNlcwogIC0gY2lsaXVtZW52b3ljb25maWdzCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZGVsZXRlCi0gYXBpR3JvdXBzOgogIC0gYXBpZXh0ZW5zaW9ucy5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBjdXN0b21yZXNvdXJjZWRlZmluaXRpb25zCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBhcGlleHRlbnNpb25zLms4cy5pbwogIHJlc291cmNlczoKICAtIGN1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMKICB2ZXJiczoKICAtIHVwZGF0ZQogIHJlc291cmNlTmFtZXM6CiAgLSBjaWxpdW1iZ3Bsb2FkYmFsYW5jZXJpcHBvb2xzLmNpbGl1bS5pbwogIC0gY2lsaXVtYmdwcGVlcmluZ3BvbGljaWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtY2x1c3RlcndpZGVlbnZveWNvbmZpZ3MuY2lsaXVtLmlvCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcy5jaWxpdW0uaW8KICAtIGNpbGl1bWVncmVzc2dhdGV3YXlwb2xpY2llcy5jaWxpdW0uaW8KICAtIGNpbGl1bWVncmVzc25hdHBvbGljaWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtZW5kcG9pbnRzLmNpbGl1bS5pbwogIC0gY2lsaXVtZW5kcG9pbnRzbGljZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1lbnZveWNvbmZpZ3MuY2lsaXVtLmlvCiAgLSBjaWxpdW1leHRlcm5hbHdvcmtsb2Fkcy5jaWxpdW0uaW8KICAtIGNpbGl1bWlkZW50aXRpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1sb2NhbHJlZGlyZWN0cG9saWNpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1uZXR3b3JrcG9saWNpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1ub2Rlcy5jaWxpdW0uaW8KIyBGb3IgY2lsaXVtLW9wZXJhdG9yIHJ1bm5pbmcgaW4gSEEgbW9kZS4KIwojIENpbGl1bSBvcGVyYXRvciBydW5uaW5nIGluIEhBIG1vZGUgcmVxdWlyZXMgdGhlIHVzZSBvZiBSZXNvdXJjZUxvY2sgZm9yIExlYWRlciBFbGVjdGlvbgojIGJldHdlZW4gbXVsdGlwbGUgcnVubmluZyBpbnN0YW5jZXMuCiMgVGhlIHByZWZlcnJlZCB3YXkgb2YgZG9pbmcgdGhpcyBpcyB0byB1c2UgTGVhc2VzUmVzb3VyY2VMb2NrIGFzIGVkaXRzIHRvIExlYXNlcyBhcmUgbGVzcwojIGNvbW1vbiBhbmQgZmV3ZXIgb2JqZWN0cyBpbiB0aGUgY2x1c3RlciB3YXRjaCAiYWxsIExlYXNlcyIuCi0gYXBpR3JvdXBzOgogIC0gY29vcmRpbmF0aW9uLms4cy5pbwogIHJlc291cmNlczoKICAtIGxlYXNlcwogIHZlcmJzOgogIC0gY3JlYXRlCiAgLSBnZXQKICAtIHVwZGF0ZQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLWFnZW50L2NsdXN0ZXJyb2xlYmluZGluZy55YW1sCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBjaWxpdW0Kc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiAiY2lsaXVtIgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1vcGVyYXRvci9jbHVzdGVycm9sZWJpbmRpbmcueWFtbAphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogImNpbGl1bS1vcGVyYXRvciIKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tYWdlbnQvZGFlbW9uc2V0LnlhbWwKYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIGxhYmVsczoKICAgIGs4cy1hcHA6IGNpbGl1bQpzcGVjOgogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGs4cy1hcHA6IGNpbGl1bQogIHVwZGF0ZVN0cmF0ZWd5OgogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4VW5hdmFpbGFibGU6IDIKICAgIHR5cGU6IFJvbGxpbmdVcGRhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBhbm5vdGF0aW9uczoKICAgICAgICAjIGVuc3VyZSBwb2RzIHJvbGwgd2hlbiBjb25maWdtYXAgdXBkYXRlcwogICAgICAgIGNpbGl1bS5pby9jaWxpdW0tY29uZmlnbWFwLWNoZWNrc3VtOiAiYmU2YmJiNDVhOTM5NGQxZTU4M2JhMjk4ODA2MDE5NDZjNDY3ZDZmMGRjMjA5MzI3ZGYxYzhjZGYwZjA3ZDlmYiIKICAgICAgbGFiZWxzOgogICAgICAgIGs4cy1hcHA6IGNpbGl1bQogICAgc3BlYzoKICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiBjaWxpdW0tYWdlbnQKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL2NpbGl1bTp2MS4xMi4yQHNoYTI1Njo5ODZmOGIwNGNmZGIzNWNmNzE0NzAxZTU4ZTM1ZGEwZWU2M2RhMmI4YTA0OGFiNTk2Y2NiNDlkZTU4ZDViYTM2IgogICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIGNpbGl1bS1hZ2VudAogICAgICAgIGFyZ3M6CiAgICAgICAgLSAtLWNvbmZpZy1kaXI9L3RtcC9jaWxpdW0vY29uZmlnLW1hcAogICAgICAgIHN0YXJ0dXBQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIGhvc3Q6ICIxMjcuMC4wLjEiCiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDk4NzkKICAgICAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgICAgIGh0dHBIZWFkZXJzOgogICAgICAgICAgICAtIG5hbWU6ICJicmllZiIKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICBmYWlsdXJlVGhyZXNob2xkOiAxMDUKICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDIKICAgICAgICAgIHN1Y2Nlc3NUaHJlc2hvbGQ6IDEKICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgaG9zdDogIjEyNy4wLjAuMSIKICAgICAgICAgICAgcGF0aDogL2hlYWx0aHoKICAgICAgICAgICAgcG9ydDogOTg3OQogICAgICAgICAgICBzY2hlbWU6IEhUVFAKICAgICAgICAgICAgaHR0cEhlYWRlcnM6CiAgICAgICAgICAgIC0gbmFtZTogImJyaWVmIgogICAgICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDMwCiAgICAgICAgICBzdWNjZXNzVGhyZXNob2xkOiAxCiAgICAgICAgICBmYWlsdXJlVGhyZXNob2xkOiAxMAogICAgICAgICAgdGltZW91dFNlY29uZHM6IDUKICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIGhvc3Q6ICIxMjcuMC4wLjEiCiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDk4NzkKICAgICAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgICAgIGh0dHBIZWFkZXJzOgogICAgICAgICAgICAtIG5hbWU6ICJicmllZiIKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAzMAogICAgICAgICAgc3VjY2Vzc1RocmVzaG9sZDogMQogICAgICAgICAgZmFpbHVyZVRocmVzaG9sZDogMwogICAgICAgICAgdGltZW91dFNlY29uZHM6IDUKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBLOFNfTk9ERV9OQU1FCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgZmllbGRQYXRoOiBzcGVjLm5vZGVOYW1lCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fSzhTX05BTUVTUEFDRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZXNwYWNlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQ0xVU1RFUk1FU0hfQ09ORklHCiAgICAgICAgICB2YWx1ZTogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoLwogICAgICAgIC0gbmFtZTogQ0lMSVVNX0NOSV9DSEFJTklOR19NT0RFCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAga2V5OiBjbmktY2hhaW5pbmctbW9kZQogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQ1VTVE9NX0NOSV9DT05GCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAga2V5OiBjdXN0b20tY25pLWNvbmYKICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAiMTcyLjE4LjIuMjUyIgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX1BPUlQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICBsaWZlY3ljbGU6CiAgICAgICAgICBwb3N0U3RhcnQ6CiAgICAgICAgICAgIGV4ZWM6CiAgICAgICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgICAtICIvY25pLWluc3RhbGwuc2giCiAgICAgICAgICAgICAgLSAiLS1lbmFibGUtZGVidWc9ZmFsc2UiCiAgICAgICAgICAgICAgLSAiLS1jbmktZXhjbHVzaXZlPXRydWUiCiAgICAgICAgICAgICAgLSAiLS1sb2ctZmlsZT0vdmFyL3J1bi9jaWxpdW0vY2lsaXVtLWNuaS5sb2ciCiAgICAgICAgICBwcmVTdG9wOgogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgLSAvY25pLXVuaW5zdGFsbC5zaAogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIHByaXZpbGVnZWQ6IHRydWUKICAgICAgICB0ZXJtaW5hdGlvbk1lc3NhZ2VQb2xpY3k6IEZhbGxiYWNrVG9Mb2dzT25FcnJvcgogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGJwZi1tYXBzCiAgICAgICAgICBtb3VudFBhdGg6IC9zeXMvZnMvYnBmCiAgICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBCaWRpcmVjdGlvbmFsCiAgICAgICAgIyBDaGVjayBmb3IgZHVwbGljYXRlIG1vdW50cyBiZWZvcmUgbW91bnRpbmcKICAgICAgICAtIG5hbWU6IGNpbGl1bS1jZ3JvdXAKICAgICAgICAgIG1vdW50UGF0aDogL3N5cy9mcy9jZ3JvdXAKICAgICAgICAtIG5hbWU6IGNpbGl1bS1ydW4KICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9ydW4vY2lsaXVtCiAgICAgICAgLSBuYW1lOiBjbmktcGF0aAogICAgICAgICAgbW91bnRQYXRoOiAvaG9zdC9vcHQvY25pL2JpbgogICAgICAgIC0gbmFtZTogZXRjLWNuaS1uZXRkCiAgICAgICAgICBtb3VudFBhdGg6IC9ob3N0L2V0Yy9jbmkvbmV0LmQKICAgICAgICAtIG5hbWU6IGNsdXN0ZXJtZXNoLXNlY3JldHMKICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoCiAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgIC0gbmFtZTogY2lsaXVtLWNvbmZpZy1wYXRoCiAgICAgICAgICBtb3VudFBhdGg6IC90bXAvY2lsaXVtL2NvbmZpZy1tYXAKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgICAjIE5lZWRlZCB0byBiZSBhYmxlIHRvIGxvYWQga2VybmVsIG1vZHVsZXMKICAgICAgICAtIG5hbWU6IGxpYi1tb2R1bGVzCiAgICAgICAgICBtb3VudFBhdGg6IC9saWIvbW9kdWxlcwogICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgICAtIG5hbWU6IHh0YWJsZXMtbG9jawogICAgICAgICAgbW91bnRQYXRoOiAvcnVuL3h0YWJsZXMubG9jawogICAgICBpbml0Q29udGFpbmVyczoKICAgICAgLSBuYW1lOiBjbGVhbi1jaWxpdW0tc3RhdGUKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL2NpbGl1bTp2MS4xMi4yQHNoYTI1Njo5ODZmOGIwNGNmZGIzNWNmNzE0NzAxZTU4ZTM1ZGEwZWU2M2RhMmI4YTA0OGFiNTk2Y2NiNDlkZTU4ZDViYTM2IgogICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIC9pbml0LWNvbnRhaW5lci5zaAogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IENJTElVTV9BTExfU1RBVEUKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgIG5hbWU6IGNpbGl1bS1jb25maWcKICAgICAgICAgICAgICBrZXk6IGNsZWFuLWNpbGl1bS1zdGF0ZQogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQlBGX1NUQVRFCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAga2V5OiBjbGVhbi1jaWxpdW0tYnBmLXN0YXRlCiAgICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9IT1NUCiAgICAgICAgICB2YWx1ZTogIjE3Mi4xOC4yLjI1MiIKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogYnBmLW1hcHMKICAgICAgICAgIG1vdW50UGF0aDogL3N5cy9mcy9icGYKICAgICAgICAgICMgUmVxdWlyZWQgdG8gbW91bnQgY2dyb3VwIGZpbGVzeXN0ZW0gZnJvbSB0aGUgaG9zdCB0byBjaWxpdW0gYWdlbnQgcG9kCiAgICAgICAgLSBuYW1lOiBjaWxpdW0tY2dyb3VwCiAgICAgICAgICBtb3VudFBhdGg6IC9zeXMvZnMvY2dyb3VwCiAgICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBIb3N0VG9Db250YWluZXIKICAgICAgICAtIG5hbWU6IGNpbGl1bS1ydW4KICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9ydW4vY2lsaXVtCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgcmVxdWVzdHM6CiAgICAgICAgICAgIGNwdTogMTAwbQogICAgICAgICAgICBtZW1vcnk6IDEwME1pICMgd2FpdC1mb3Ita3ViZS1wcm94eQogICAgICByZXN0YXJ0UG9saWN5OiBBbHdheXMKICAgICAgcHJpb3JpdHlDbGFzc05hbWU6IHN5c3RlbS1ub2RlLWNyaXRpY2FsCiAgICAgIHNlcnZpY2VBY2NvdW50OiAiY2lsaXVtIgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6ICJjaWxpdW0iCiAgICAgIHRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzOiAxCiAgICAgIGhvc3ROZXR3b3JrOiB0cnVlCiAgICAgIGFmZmluaXR5OgogICAgICAgIHBvZEFudGlBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAtIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICAgICAgbWF0Y2hMYWJlbHM6CiAgICAgICAgICAgICAgICBrOHMtYXBwOiBjaWxpdW0KICAgICAgICAgICAgdG9wb2xvZ3lLZXk6IGt1YmVybmV0ZXMuaW8vaG9zdG5hbWUKICAgICAgbm9kZVNlbGVjdG9yOgogICAgICAgIGt1YmVybmV0ZXMuaW8vb3M6IGxpbnV4CiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0gb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAgICMgVG8ga2VlcCBzdGF0ZSBiZXR3ZWVuIHJlc3RhcnRzIC8gdXBncmFkZXMKICAgICAgLSBuYW1lOiBjaWxpdW0tcnVuCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvdmFyL3J1bi9jaWxpdW0KICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICAgIyBUbyBrZWVwIHN0YXRlIGJldHdlZW4gcmVzdGFydHMgLyB1cGdyYWRlcyBmb3IgYnBmIG1hcHMKICAgICAgLSBuYW1lOiBicGYtbWFwcwogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL3N5cy9mcy9icGYKICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICMgVG8ga2VlcCBzdGF0ZSBiZXR3ZWVuIHJlc3RhcnRzIC8gdXBncmFkZXMgZm9yIGNncm91cDIgZmlsZXN5c3RlbQogICAgICAtIG5hbWU6IGNpbGl1bS1jZ3JvdXAKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9zeXMvZnMvY2dyb3VwCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnlPckNyZWF0ZQogICAgICAjIFRvIGluc3RhbGwgY2lsaXVtIGNuaSBwbHVnaW4gaW4gdGhlIGhvc3QKICAgICAgLSBuYW1lOiBjbmktcGF0aAogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogIC9vcHQvY25pL2JpbgogICAgICAgICAgdHlwZTogRGlyZWN0b3J5T3JDcmVhdGUKICAgICAgICAjIFRvIGluc3RhbGwgY2lsaXVtIGNuaSBjb25maWd1cmF0aW9uIGluIHRoZSBob3N0CiAgICAgIC0gbmFtZTogZXRjLWNuaS1uZXRkCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvZXRjL2NuaS9uZXQuZAogICAgICAgICAgdHlwZTogRGlyZWN0b3J5T3JDcmVhdGUKICAgICAgICAjIFRvIGJlIGFibGUgdG8gbG9hZCBrZXJuZWwgbW9kdWxlcwogICAgICAtIG5hbWU6IGxpYi1tb2R1bGVzCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvbGliL21vZHVsZXMKICAgICAgICAjIFRvIGFjY2VzcyBpcHRhYmxlcyBjb25jdXJyZW50bHkgd2l0aCBvdGhlciBwcm9jZXNzZXMgKGUuZy4ga3ViZS1wcm94eSkKICAgICAgLSBuYW1lOiB4dGFibGVzLWxvY2sKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9ydW4veHRhYmxlcy5sb2NrCiAgICAgICAgICB0eXBlOiBGaWxlT3JDcmVhdGUKICAgICAgICAjIFRvIHJlYWQgdGhlIGNsdXN0ZXJtZXNoIGNvbmZpZ3VyYXRpb24KICAgICAgLSBuYW1lOiBjbHVzdGVybWVzaC1zZWNyZXRzCiAgICAgICAgc2VjcmV0OgogICAgICAgICAgc2VjcmV0TmFtZTogY2lsaXVtLWNsdXN0ZXJtZXNoCiAgICAgICAgICAjIG5vdGU6IHRoZSBsZWFkaW5nIHplcm8gbWVhbnMgdGhpcyBudW1iZXIgaXMgaW4gb2N0YWwgcmVwcmVzZW50YXRpb246IGRvIG5vdCByZW1vdmUgaXQKICAgICAgICAgIGRlZmF1bHRNb2RlOiAwNDAwCiAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgICMgVG8gcmVhZCB0aGUgY29uZmlndXJhdGlvbiBmcm9tIHRoZSBjb25maWcgbWFwCiAgICAgIC0gbmFtZTogY2lsaXVtLWNvbmZpZy1wYXRoCiAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgbmFtZTogY2lsaXVtLWNvbmZpZwotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLW9wZXJhdG9yL2RlcGxveW1lbnQueWFtbAphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIGxhYmVsczoKICAgIGlvLmNpbGl1bS9hcHA6IG9wZXJhdG9yCiAgICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKc3BlYzoKICAjIFNlZSBkb2NzIG9uIFNlcnZlckNhcGFiaWxpdGllcy5MZWFzZXNSZXNvdXJjZUxvY2sgaW4gZmlsZSBwa2cvazhzL3ZlcnNpb24vdmVyc2lvbi5nbwogICMgZm9yIG1vcmUgZGV0YWlscy4KICByZXBsaWNhczogMgogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGlvLmNpbGl1bS9hcHA6IG9wZXJhdG9yCiAgICAgIG5hbWU6IGNpbGl1bS1vcGVyYXRvcgogIHN0cmF0ZWd5OgogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4U3VyZ2U6IDEKICAgICAgbWF4VW5hdmFpbGFibGU6IDEKICAgIHR5cGU6IFJvbGxpbmdVcGRhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBhbm5vdGF0aW9uczoKICAgICAgICAjIGVuc3VyZSBwb2RzIHJvbGwgd2hlbiBjb25maWdtYXAgdXBkYXRlcwogICAgICAgIGNpbGl1bS5pby9jaWxpdW0tY29uZmlnbWFwLWNoZWNrc3VtOiAiYmU2YmJiNDVhOTM5NGQxZTU4M2JhMjk4ODA2MDE5NDZjNDY3ZDZmMGRjMjA5MzI3ZGYxYzhjZGYwZjA3ZDlmYiIKICAgICAgbGFiZWxzOgogICAgICAgIGlvLmNpbGl1bS9hcHA6IG9wZXJhdG9yCiAgICAgICAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCiAgICBzcGVjOgogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IGNpbGl1bS1vcGVyYXRvcgogICAgICAgIGltYWdlOiBxdWF5LmlvL2NpbGl1bS9vcGVyYXRvci1nZW5lcmljOnYxLjEyLjJAc2hhMjU2OjAwNTA4Zjc4ZGFlNTQxMjE2MWZhNDBlZTMwMDY5YzI4MDJhZWYyMGY3YmRkMjBlOTE0MjMxMDNiYThjMGRmNmUKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSBjaWxpdW0tb3BlcmF0b3ItZ2VuZXJpYwogICAgICAgIGFyZ3M6CiAgICAgICAgLSAtLWNvbmZpZy1kaXI9L3RtcC9jaWxpdW0vY29uZmlnLW1hcAogICAgICAgIC0gLS1kZWJ1Zz0kKENJTElVTV9ERUJVRykKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBLOFNfTk9ERV9OQU1FCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgZmllbGRQYXRoOiBzcGVjLm5vZGVOYW1lCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fSzhTX05BTUVTUEFDRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZXNwYWNlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fREVCVUcKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgIGtleTogZGVidWcKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9IT1NUCiAgICAgICAgICB2YWx1ZTogIjE3Mi4xOC4yLjI1MiIKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIGhvc3Q6ICIxMjcuMC4wLjEiCiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDkyMzQKICAgICAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiA2MAogICAgICAgICAgcGVyaW9kU2Vjb25kczogMTAKICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiAzCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogY2lsaXVtLWNvbmZpZy1wYXRoCiAgICAgICAgICBtb3VudFBhdGg6IC90bXAvY2lsaXVtL2NvbmZpZy1tYXAKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgcmVzdGFydFBvbGljeTogQWx3YXlzCiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiBzeXN0ZW0tY2x1c3Rlci1jcml0aWNhbAogICAgICBzZXJ2aWNlQWNjb3VudDogImNpbGl1bS1vcGVyYXRvciIKICAgICAgc2VydmljZUFjY291bnROYW1lOiAiY2lsaXVtLW9wZXJhdG9yIgogICAgICAjIEluIEhBIG1vZGUsIGNpbGl1bS1vcGVyYXRvciBwb2RzIG11c3Qgbm90IGJlIHNjaGVkdWxlZCBvbiB0aGUgc2FtZQogICAgICAjIG5vZGUgYXMgdGhleSB3aWxsIGNsYXNoIHdpdGggZWFjaCBvdGhlci4KICAgICAgYWZmaW5pdHk6CiAgICAgICAgcG9kQW50aUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgIC0gbGFiZWxTZWxlY3RvcjoKICAgICAgICAgICAgICBtYXRjaExhYmVsczoKICAgICAgICAgICAgICAgIGlvLmNpbGl1bS9hcHA6IG9wZXJhdG9yCiAgICAgICAgICAgIHRvcG9sb2d5S2V5OiBrdWJlcm5ldGVzLmlvL2hvc3RuYW1lCiAgICAgIG5vZGVTZWxlY3RvcjoKICAgICAgICBrdWJlcm5ldGVzLmlvL29zOiBsaW51eAogICAgICB0b2xlcmF0aW9uczoKICAgICAgICAtIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgdm9sdW1lczoKICAgICAgICAjIFRvIHJlYWQgdGhlIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgY29uZmlnIG1hcAogICAgICAtIG5hbWU6IGNpbGl1bS1jb25maWctcGF0aAogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6IGNpbGl1bS1jb25maWcK\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbmFtZTogc3lzdGVtOmt1YmUtdmlwLXJvbGUKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcyIsICJzZXJ2aWNlcy9zdGF0dXMiLCAibm9kZXMiLCAiZW5kcG9pbnRzIl0KICAgIHZlcmJzOiBbImxpc3QiLCJnZXQiLCJ3YXRjaCIsICJ1cGRhdGUiXQogIC0gYXBpR3JvdXBzOiBbImNvb3JkaW5hdGlvbi5rOHMuaW8iXQogICAgcmVzb3VyY2VzOiBbImxlYXNlcyJdCiAgICB2ZXJiczogWyJsaXN0IiwgImdldCIsICJ3YXRjaCIsICJ1cGRhdGUiLCAiY3JlYXRlIl0KLS0tCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1iaW5kaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIGxhYmVsczoKICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IGt1YmUtdmlwLWRzCiAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICBuYW1lOiBrdWJlLXZpcC1kcwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL3ZlcnNpb246IHYwLjUuNwogICAgc3BlYzoKICAgICAgYWZmaW5pdHk6CiAgICAgICAgbm9kZUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgICAgbm9kZVNlbGVjdG9yVGVybXM6CiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vY29udHJvbC1wbGFuZQogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICBjb250YWluZXJzOgogICAgICAtIGFyZ3M6CiAgICAgICAgLSBtYW5hZ2VyCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAxMjcuMC4wLjEKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiBwb3J0CiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgICAgICB2YWx1ZTogZW5vMQogICAgICAgIC0gbmFtZTogdmlwX2NpZHIKICAgICAgICAgIHZhbHVlOiAiMzIiCiAgICAgICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAgICAgLSBuYW1lOiB2aXBfZGRucwogICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAtIG5hbWU6IHZpcF9sZWFkZXJlbGVjdGlvbgogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYXNlZHVyYXRpb24KICAgICAgICAgIHZhbHVlOiAiNSIKICAgICAgICAtIG5hbWU6IHZpcF9yZW5ld2RlYWRsaW5lCiAgICAgICAgICB2YWx1ZTogIjMiCiAgICAgICAgLSBuYW1lOiB2aXBfcmV0cnlwZXJpb2QKICAgICAgICAgIHZhbHVlOiAiMSIKICAgICAgICAtIG5hbWU6IGFkZHJlc3MKICAgICAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgICAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgICAgICB2YWx1ZTogOjIxMTIKICAgICAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgIG5hbWU6IGt1YmUtdmlwCiAgICAgICAgcmVzb3VyY2VzOiB7fQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgICAtIE5FVF9SQVcKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlLXZpcAogICAgICB0b2xlcmF0aW9uczoKICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIC0gZWZmZWN0OiBOb0V4ZWN1dGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgo=\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node03.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbmFtZTogc3lzdGVtOmt1YmUtdmlwLXJvbGUKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcyIsICJzZXJ2aWNlcy9zdGF0dXMiLCAibm9kZXMiLCAiZW5kcG9pbnRzIl0KICAgIHZlcmJzOiBbImxpc3QiLCJnZXQiLCJ3YXRjaCIsICJ1cGRhdGUiXQogIC0gYXBpR3JvdXBzOiBbImNvb3JkaW5hdGlvbi5rOHMuaW8iXQogICAgcmVzb3VyY2VzOiBbImxlYXNlcyJdCiAgICB2ZXJiczogWyJsaXN0IiwgImdldCIsICJ3YXRjaCIsICJ1cGRhdGUiLCAiY3JlYXRlIl0KLS0tCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1iaW5kaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIGxhYmVsczoKICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IGt1YmUtdmlwLWRzCiAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICBuYW1lOiBrdWJlLXZpcC1kcwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL3ZlcnNpb246IHYwLjUuNwogICAgc3BlYzoKICAgICAgYWZmaW5pdHk6CiAgICAgICAgbm9kZUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgICAgbm9kZVNlbGVjdG9yVGVybXM6CiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vY29udHJvbC1wbGFuZQogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICBjb250YWluZXJzOgogICAgICAtIGFyZ3M6CiAgICAgICAgLSBtYW5hZ2VyCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAxMjcuMC4wLjEKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiBwb3J0CiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgICAgICB2YWx1ZTogZW5vMQogICAgICAgIC0gbmFtZTogdmlwX2NpZHIKICAgICAgICAgIHZhbHVlOiAiMzIiCiAgICAgICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAgICAgLSBuYW1lOiB2aXBfZGRucwogICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAtIG5hbWU6IHZpcF9sZWFkZXJlbGVjdGlvbgogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYXNlZHVyYXRpb24KICAgICAgICAgIHZhbHVlOiAiNSIKICAgICAgICAtIG5hbWU6IHZpcF9yZW5ld2RlYWRsaW5lCiAgICAgICAgICB2YWx1ZTogIjMiCiAgICAgICAgLSBuYW1lOiB2aXBfcmV0cnlwZXJpb2QKICAgICAgICAgIHZhbHVlOiAiMSIKICAgICAgICAtIG5hbWU6IGFkZHJlc3MKICAgICAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgICAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgICAgICB2YWx1ZTogOjIxMTIKICAgICAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgIG5hbWU6IGt1YmUtdmlwCiAgICAgICAgcmVzb3VyY2VzOiB7fQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgICAtIE5FVF9SQVcKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlLXZpcAogICAgICB0b2xlcmF0aW9uczoKICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIC0gZWZmZWN0OiBOb0V4ZWN1dGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgo=\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=10min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "3658544399",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node03.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbmFtZTogc3lzdGVtOmt1YmUtdmlwLXJvbGUKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcyIsICJzZXJ2aWNlcy9zdGF0dXMiLCAibm9kZXMiLCAiZW5kcG9pbnRzIl0KICAgIHZlcmJzOiBbImxpc3QiLCJnZXQiLCJ3YXRjaCIsICJ1cGRhdGUiXQogIC0gYXBpR3JvdXBzOiBbImNvb3JkaW5hdGlvbi5rOHMuaW8iXQogICAgcmVzb3VyY2VzOiBbImxlYXNlcyJdCiAgICB2ZXJiczogWyJsaXN0IiwgImdldCIsICJ3YXRjaCIsICJ1cGRhdGUiLCAiY3JlYXRlIl0KLS0tCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1iaW5kaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIGxhYmVsczoKICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IGt1YmUtdmlwLWRzCiAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICBuYW1lOiBrdWJlLXZpcC1kcwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL3ZlcnNpb246IHYwLjUuNwogICAgc3BlYzoKICAgICAgYWZmaW5pdHk6CiAgICAgICAgbm9kZUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgICAgbm9kZVNlbGVjdG9yVGVybXM6CiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vY29udHJvbC1wbGFuZQogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICBjb250YWluZXJzOgogICAgICAtIGFyZ3M6CiAgICAgICAgLSBtYW5hZ2VyCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAxMjcuMC4wLjEKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiBwb3J0CiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgICAgICB2YWx1ZTogZW5vMQogICAgICAgIC0gbmFtZTogdmlwX2NpZHIKICAgICAgICAgIHZhbHVlOiAiMzIiCiAgICAgICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAgICAgLSBuYW1lOiB2aXBfZGRucwogICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAtIG5hbWU6IHZpcF9sZWFkZXJlbGVjdGlvbgogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYXNlZHVyYXRpb24KICAgICAgICAgIHZhbHVlOiAiNSIKICAgICAgICAtIG5hbWU6IHZpcF9yZW5ld2RlYWRsaW5lCiAgICAgICAgICB2YWx1ZTogIjMiCiAgICAgICAgLSBuYW1lOiB2aXBfcmV0cnlwZXJpb2QKICAgICAgICAgIHZhbHVlOiAiMSIKICAgICAgICAtIG5hbWU6IGFkZHJlc3MKICAgICAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgICAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgICAgICB2YWx1ZTogOjIxMTIKICAgICAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgIG5hbWU6IGt1YmUtdmlwCiAgICAgICAgcmVzb3VyY2VzOiB7fQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgICAtIE5FVF9SQVcKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlLXZpcAogICAgICB0b2xlcmF0aW9uczoKICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIC0gZWZmZWN0OiBOb0V4ZWN1dGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgo=\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "cilium-install",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "7dcc0afd315479526403371f5d040aef53ae7db7ed3fc94ce9c52b29bcbddf93",
            "rendered": "---\n# Source: cilium/templates/cilium-agent/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-operator/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium-operator\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cilium-config\n  namespace: kube-system\ndata:\n\n  # Identity allocation mode selects how identities are shared between cilium\n  # nodes by setting how they are stored. The options are \"crd\" or \"kvstore\".\n  # - \"crd\" stores identities in kubernetes as CRDs (custom resource definition).\n  #   These can be queried with:\n  #     kubectl get ciliumid\n  # - \"kvstore\" stores identities in an etcd kvstore, that is\n  #   configured below. Cilium versions before 1.6 supported only the kvstore\n  #   backend. Upgrades from these older cilium versions should continue using\n  #   the kvstore by commenting out the identity-allocation-mode below, or\n  #   setting it to \"kvstore\".\n  identity-allocation-mode: crd\n  cilium-endpoint-gc-interval: \"5m0s\"\n  nodes-gc-interval: \"5m0s\"\n  # Disable the usage of CiliumEndpoint CRD\n  disable-endpoint-crd: \"false\"\n\n  # If you want to run cilium in debug mode change this value to true\n  debug: \"false\"\n  # The agent can be put into the following three policy enforcement modes\n  # default, always and never.\n  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes\n  enable-policy: \"default\"\n\n  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4\n  # address.\n  enable-ipv4: \"true\"\n\n  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6\n  # address.\n  enable-ipv6: \"false\"\n  # Users who wish to specify their own custom CNI configuration file must set\n  # custom-cni-conf to \"true\", otherwise Cilium may overwrite the configuration.\n  custom-cni-conf: \"false\"\n  enable-bpf-clock-probe: \"true\"\n  # If you want cilium monitor to aggregate tracing for packets, set this level\n  # to \"low\", \"medium\", or \"maximum\". The higher the level, the less packets\n  # that will be seen in monitor output.\n  monitor-aggregation: medium\n\n  # The monitor aggregation interval governs the typical time between monitor\n  # notification events for each allowed connection.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-interval: 5s\n\n  # The monitor aggregation flags determine which TCP flags which, upon the\n  # first observation, cause monitor notifications to be generated.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-flags: all\n  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic\n  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.\n  bpf-map-dynamic-size-ratio: \"0.0025\"\n  # bpf-policy-map-max specifies the maximum number of entries in endpoint\n  # policy map (per endpoint)\n  bpf-policy-map-max: \"16384\"\n  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,\n  # backend and affinity maps.\n  bpf-lb-map-max: \"65536\"\n  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass\n  # optimization for nodeport reverse NAT handling.\n  bpf-lb-external-clusterip: \"false\"\n\n  # Pre-allocation of map entries allows per-packet latency to be reduced, at\n  # the expense of up-front memory allocation for the entries in the maps. The\n  # default value below will minimize memory usage in the default installation;\n  # users who are sensitive to latency may consider setting this to \"true\".\n  #\n  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore\n  # this option and behave as though it is set to \"true\".\n  #\n  # If this value is modified, then during the next Cilium startup the restore\n  # of existing endpoints and tracking of ongoing connections may be disrupted.\n  # As a result, reply packets may be dropped and the load-balancing decisions\n  # for established connections may change.\n  #\n  # If this option is set to \"false\" during an upgrade from 1.3 or earlier to\n  # 1.4 or later, then it may cause one-time disruptions during the upgrade.\n  preallocate-bpf-maps: \"false\"\n\n  # Regular expression matching compatible Istio sidecar istio-proxy\n  # container image names\n  sidecar-istio-proxy-image: \"cilium/istio_proxy\"\n\n  # Name of the cluster. Only relevant when building a mesh of clusters.\n  cluster-name: chongus\n  # Unique ID of the cluster. Must be unique across all conneted clusters and\n  # in the range of 1 and 255. Only relevant when building a mesh of clusters.\n  cluster-id: \"1\"\n\n  # Encapsulation mode for communication between nodes\n  # Possible values:\n  #   - disabled\n  #   - vxlan (default)\n  #   - geneve\n  tunnel: \"disabled\"\n  # Enables L7 proxy for L7 policy enforcement and visibility\n  enable-l7-proxy: \"true\"\n\n  enable-ipv4-masquerade: \"true\"\n  enable-ipv6-masquerade: \"true\"\n\n  enable-xt-socket-fallback: \"true\"\n  install-iptables-rules: \"true\"\n  install-no-conntrack-iptables-rules: \"false\"\n\n  auto-direct-node-routes: \"true\"\n  enable-local-redirect-policy: \"true\"\n  ipv4-native-routing-cidr: 10.244.0.0/16\n\n  kube-proxy-replacement: \"strict\"\n  kube-proxy-replacement-healthz-bind-address: \"0.0.0.0:10256\"\n  bpf-lb-sock: \"false\"\n  enable-health-check-nodeport: \"true\"\n  node-port-bind-protection: \"true\"\n  enable-auto-protect-node-port-range: \"true\"\n  bpf-lb-mode: \"dsr\"\n  bpf-lb-algorithm: \"maglev\"\n  enable-svc-source-range-check: \"true\"\n  enable-l2-neigh-discovery: \"true\"\n  arping-refresh-period: \"30s\"\n  enable-endpoint-routes: \"true\"\n  enable-endpoint-health-checking: \"true\"\n  enable-health-checking: \"true\"\n  enable-well-known-identities: \"false\"\n  enable-remote-node-identity: \"true\"\n  synchronize-k8s-nodes: \"true\"\n  operator-api-serve-addr: \"127.0.0.1:9234\"\n  ipam: \"kubernetes\"\n  disable-cnp-status-updates: \"true\"\n  enable-vtep: \"false\"\n  vtep-endpoint: \"\"\n  vtep-cidr: \"\"\n  vtep-mask: \"\"\n  vtep-mac: \"\"\n  enable-bgp-control-plane: \"false\"\n  bpf-root: \"/sys/fs/bpf\"\n  cgroup-root: \"/sys/fs/cgroup\"\n  enable-k8s-terminating-endpoint: \"true\"\n  remove-cilium-node-taints: \"true\"\n  set-cilium-is-up-condition: \"true\"\n  unmanaged-pod-watcher-interval: \"15\"\n  tofqdns-dns-reject-response-code: \"refused\"\n  tofqdns-enable-dns-compression: \"true\"\n  tofqdns-endpoint-max-ip-per-hostname: \"50\"\n  tofqdns-idle-connection-grace-period: \"0s\"\n  tofqdns-max-deferred-connection-deletes: \"10000\"\n  tofqdns-min-ttl: \"3600\"\n  tofqdns-proxy-response-max-delay: \"100ms\"\n  agent-not-ready-taint-key: \"node.cilium.io/agent-not-ready\"\n---\n# Source: cilium/templates/cilium-agent/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium\nrules:\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  - services\n  - pods\n  - endpoints\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - list\n  - watch\n  # This is used when validating policies in preflight. This will need to stay\n  # until we figure out how to avoid \"get\" inside the preflight, and then\n  # should be removed ideally.\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumbgploadbalancerippools\n  - ciliumbgppeeringpolicies\n  - ciliumclusterwideenvoyconfigs\n  - ciliumclusterwidenetworkpolicies\n  - ciliumegressgatewaypolicies\n  - ciliumegressnatpolicies\n  - ciliumendpoints\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  - ciliumidentities\n  - ciliumlocalredirectpolicies\n  - ciliumnetworkpolicies\n  - ciliumnodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  - ciliumendpoints\n  - ciliumnodes\n  verbs:\n  - create\n- apiGroups:\n  - cilium.io\n  # To synchronize garbage collection of such resources\n  resources:\n  - ciliumidentities\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  verbs:\n  - delete\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  - ciliumnodes/status\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  - ciliumendpoints/status\n  - ciliumendpoints\n  verbs:\n  - patch\n---\n# Source: cilium/templates/cilium-operator/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium-operator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n  - list\n  - watch\n  # to automatically delete [core|kube]dns pods so that are starting to being\n  # managed by Cilium\n  - delete\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # To remove node taints\n  - nodes\n  # To set NetworkUnavailable false on startup\n  - nodes/status\n  verbs:\n  - patch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform LB IP allocation for BGP\n  - services/status\n  verbs:\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  # to check apiserver connectivity\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform the translation of a CNP that contains `ToGroup` to its endpoints\n  - services\n  - endpoints\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies\n  - ciliumclusterwidenetworkpolicies\n  verbs:\n  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'\n  - create\n  - update\n  - deletecollection\n  # To update the status of the CNPs and CCNPs\n  - patch\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  verbs:\n  # Update the auto-generated CNPs and CCNPs status.\n  - patch\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  - ciliumidentities\n  verbs:\n  # To perform garbage collection of such resources\n  - delete\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  verbs:\n  # To synchronize garbage collection of such resources\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n    # To perform CiliumNode garbage collector\n  - delete\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes/status\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n  - delete\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - create\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - update\n  resourceNames:\n  - ciliumbgploadbalancerippools.cilium.io\n  - ciliumbgppeeringpolicies.cilium.io\n  - ciliumclusterwideenvoyconfigs.cilium.io\n  - ciliumclusterwidenetworkpolicies.cilium.io\n  - ciliumegressgatewaypolicies.cilium.io\n  - ciliumegressnatpolicies.cilium.io\n  - ciliumendpoints.cilium.io\n  - ciliumendpointslices.cilium.io\n  - ciliumenvoyconfigs.cilium.io\n  - ciliumexternalworkloads.cilium.io\n  - ciliumidentities.cilium.io\n  - ciliumlocalredirectpolicies.cilium.io\n  - ciliumnetworkpolicies.cilium.io\n  - ciliumnodes.cilium.io\n# For cilium-operator running in HA mode.\n#\n# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election\n# between multiple running instances.\n# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less\n# common and fewer objects in the cluster watch \"all Leases\".\n- apiGroups:\n  - coordination.k8s.io\n  resources:\n  - leases\n  verbs:\n  - create\n  - get\n  - update\n---\n# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium-operator\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium-operator\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-agent/daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cilium\n  namespace: kube-system\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    matchLabels:\n      k8s-app: cilium\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 2\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # ensure pods roll when configmap updates\n        cilium.io/cilium-configmap-checksum: \"be6bbb45a9394d1e583ba29880601946c467d6f0dc209327df1c8cdf0f07d9fb\"\n      labels:\n        k8s-app: cilium\n    spec:\n      containers:\n      - name: cilium-agent\n        image: \"quay.io/cilium/cilium:v1.12.2@sha256:986f8b04cfdb35cf714701e58e35da0ee63da2b8a048ab596ccb49de58d5ba36\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-agent\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        startupProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          failureThreshold: 105\n          periodSeconds: 2\n          successThreshold: 1\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 3\n          timeoutSeconds: 5\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_CLUSTERMESH_CONFIG\n          value: /var/lib/cilium/clustermesh/\n        - name: CILIUM_CNI_CHAINING_MODE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: cni-chaining-mode\n              optional: true\n        - name: CILIUM_CUSTOM_CNI_CONF\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: custom-cni-conf\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        lifecycle:\n          postStart:\n            exec:\n              command:\n              - \"/cni-install.sh\"\n              - \"--enable-debug=false\"\n              - \"--cni-exclusive=true\"\n              - \"--log-file=/var/run/cilium/cilium-cni.log\"\n          preStop:\n            exec:\n              command:\n              - /cni-uninstall.sh\n        securityContext:\n          privileged: true\n        terminationMessagePolicy: FallbackToLogsOnError\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          mountPropagation: Bidirectional\n        # Check for duplicate mounts before mounting\n        - name: cilium-cgroup\n          mountPath: /sys/fs/cgroup\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        - name: cni-path\n          mountPath: /host/opt/cni/bin\n        - name: etc-cni-netd\n          mountPath: /host/etc/cni/net.d\n        - name: clustermesh-secrets\n          mountPath: /var/lib/cilium/clustermesh\n          readOnly: true\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n          # Needed to be able to load kernel modules\n        - name: lib-modules\n          mountPath: /lib/modules\n          readOnly: true\n        - name: xtables-lock\n          mountPath: /run/xtables.lock\n      initContainers:\n      - name: clean-cilium-state\n        image: \"quay.io/cilium/cilium:v1.12.2@sha256:986f8b04cfdb35cf714701e58e35da0ee63da2b8a048ab596ccb49de58d5ba36\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - /init-container.sh\n        env:\n        - name: CILIUM_ALL_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-state\n              optional: true\n        - name: CILIUM_BPF_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-bpf-state\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Required to mount cgroup filesystem from the host to cilium agent pod\n        - name: cilium-cgroup\n          mountPath: /sys/fs/cgroup\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi # wait-for-kube-proxy\n      restartPolicy: Always\n      priorityClassName: system-node-critical\n      serviceAccount: \"cilium\"\n      serviceAccountName: \"cilium\"\n      terminationGracePeriodSeconds: 1\n      hostNetwork: true\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                k8s-app: cilium\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To keep state between restarts / upgrades\n      - name: cilium-run\n        hostPath:\n          path: /var/run/cilium\n          type: DirectoryOrCreate\n        # To keep state between restarts / upgrades for bpf maps\n      - name: bpf-maps\n        hostPath:\n          path: /sys/fs/bpf\n          type: DirectoryOrCreate\n      # To keep state between restarts / upgrades for cgroup2 filesystem\n      - name: cilium-cgroup\n        hostPath:\n          path: /sys/fs/cgroup\n          type: DirectoryOrCreate\n      # To install cilium cni plugin in the host\n      - name: cni-path\n        hostPath:\n          path:  /opt/cni/bin\n          type: DirectoryOrCreate\n        # To install cilium cni configuration in the host\n      - name: etc-cni-netd\n        hostPath:\n          path: /etc/cni/net.d\n          type: DirectoryOrCreate\n        # To be able to load kernel modules\n      - name: lib-modules\n        hostPath:\n          path: /lib/modules\n        # To access iptables concurrently with other processes (e.g. kube-proxy)\n      - name: xtables-lock\n        hostPath:\n          path: /run/xtables.lock\n          type: FileOrCreate\n        # To read the clustermesh configuration\n      - name: clustermesh-secrets\n        secret:\n          secretName: cilium-clustermesh\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          optional: true\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n---\n# Source: cilium/templates/cilium-operator/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cilium-operator\n  namespace: kube-system\n  labels:\n    io.cilium/app: operator\n    name: cilium-operator\nspec:\n  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go\n  # for more details.\n  replicas: 2\n  selector:\n    matchLabels:\n      io.cilium/app: operator\n      name: cilium-operator\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # ensure pods roll when configmap updates\n        cilium.io/cilium-configmap-checksum: \"be6bbb45a9394d1e583ba29880601946c467d6f0dc209327df1c8cdf0f07d9fb\"\n      labels:\n        io.cilium/app: operator\n        name: cilium-operator\n    spec:\n      containers:\n      - name: cilium-operator\n        image: quay.io/cilium/operator-generic:v1.12.2@sha256:00508f78dae5412161fa40ee30069c2802aef20f7bdd20e91423103ba8c0df6e\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-operator-generic\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        - --debug=$(CILIUM_DEBUG)\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              key: debug\n              name: cilium-config\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9234\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          timeoutSeconds: 3\n        volumeMounts:\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n        terminationMessagePolicy: FallbackToLogsOnError\n      hostNetwork: true\n      restartPolicy: Always\n      priorityClassName: system-cluster-critical\n      serviceAccount: \"cilium-operator\"\n      serviceAccountName: \"cilium-operator\"\n      # In HA mode, cilium-operator pods must not be scheduled on the same\n      # node as they will clash with each other.\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                io.cilium/app: operator\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n",
            "template": "---\n# Source: cilium/templates/cilium-agent/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-operator/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium-operator\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cilium-config\n  namespace: kube-system\ndata:\n\n  # Identity allocation mode selects how identities are shared between cilium\n  # nodes by setting how they are stored. The options are \"crd\" or \"kvstore\".\n  # - \"crd\" stores identities in kubernetes as CRDs (custom resource definition).\n  #   These can be queried with:\n  #     kubectl get ciliumid\n  # - \"kvstore\" stores identities in an etcd kvstore, that is\n  #   configured below. Cilium versions before 1.6 supported only the kvstore\n  #   backend. Upgrades from these older cilium versions should continue using\n  #   the kvstore by commenting out the identity-allocation-mode below, or\n  #   setting it to \"kvstore\".\n  identity-allocation-mode: crd\n  cilium-endpoint-gc-interval: \"5m0s\"\n  nodes-gc-interval: \"5m0s\"\n  # Disable the usage of CiliumEndpoint CRD\n  disable-endpoint-crd: \"false\"\n\n  # If you want to run cilium in debug mode change this value to true\n  debug: \"false\"\n  # The agent can be put into the following three policy enforcement modes\n  # default, always and never.\n  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes\n  enable-policy: \"default\"\n\n  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4\n  # address.\n  enable-ipv4: \"true\"\n\n  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6\n  # address.\n  enable-ipv6: \"false\"\n  # Users who wish to specify their own custom CNI configuration file must set\n  # custom-cni-conf to \"true\", otherwise Cilium may overwrite the configuration.\n  custom-cni-conf: \"false\"\n  enable-bpf-clock-probe: \"true\"\n  # If you want cilium monitor to aggregate tracing for packets, set this level\n  # to \"low\", \"medium\", or \"maximum\". The higher the level, the less packets\n  # that will be seen in monitor output.\n  monitor-aggregation: medium\n\n  # The monitor aggregation interval governs the typical time between monitor\n  # notification events for each allowed connection.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-interval: 5s\n\n  # The monitor aggregation flags determine which TCP flags which, upon the\n  # first observation, cause monitor notifications to be generated.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-flags: all\n  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic\n  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.\n  bpf-map-dynamic-size-ratio: \"0.0025\"\n  # bpf-policy-map-max specifies the maximum number of entries in endpoint\n  # policy map (per endpoint)\n  bpf-policy-map-max: \"16384\"\n  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,\n  # backend and affinity maps.\n  bpf-lb-map-max: \"65536\"\n  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass\n  # optimization for nodeport reverse NAT handling.\n  bpf-lb-external-clusterip: \"false\"\n\n  # Pre-allocation of map entries allows per-packet latency to be reduced, at\n  # the expense of up-front memory allocation for the entries in the maps. The\n  # default value below will minimize memory usage in the default installation;\n  # users who are sensitive to latency may consider setting this to \"true\".\n  #\n  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore\n  # this option and behave as though it is set to \"true\".\n  #\n  # If this value is modified, then during the next Cilium startup the restore\n  # of existing endpoints and tracking of ongoing connections may be disrupted.\n  # As a result, reply packets may be dropped and the load-balancing decisions\n  # for established connections may change.\n  #\n  # If this option is set to \"false\" during an upgrade from 1.3 or earlier to\n  # 1.4 or later, then it may cause one-time disruptions during the upgrade.\n  preallocate-bpf-maps: \"false\"\n\n  # Regular expression matching compatible Istio sidecar istio-proxy\n  # container image names\n  sidecar-istio-proxy-image: \"cilium/istio_proxy\"\n\n  # Name of the cluster. Only relevant when building a mesh of clusters.\n  cluster-name: ${cluster_name}\n  # Unique ID of the cluster. Must be unique across all conneted clusters and\n  # in the range of 1 and 255. Only relevant when building a mesh of clusters.\n  cluster-id: \"1\"\n\n  # Encapsulation mode for communication between nodes\n  # Possible values:\n  #   - disabled\n  #   - vxlan (default)\n  #   - geneve\n  tunnel: \"disabled\"\n  # Enables L7 proxy for L7 policy enforcement and visibility\n  enable-l7-proxy: \"true\"\n\n  enable-ipv4-masquerade: \"true\"\n  enable-ipv6-masquerade: \"true\"\n\n  enable-xt-socket-fallback: \"true\"\n  install-iptables-rules: \"true\"\n  install-no-conntrack-iptables-rules: \"false\"\n\n  auto-direct-node-routes: \"true\"\n  enable-local-redirect-policy: \"true\"\n  ipv4-native-routing-cidr: 10.244.0.0/16\n\n  kube-proxy-replacement: \"strict\"\n  kube-proxy-replacement-healthz-bind-address: \"0.0.0.0:10256\"\n  bpf-lb-sock: \"false\"\n  enable-health-check-nodeport: \"true\"\n  node-port-bind-protection: \"true\"\n  enable-auto-protect-node-port-range: \"true\"\n  bpf-lb-mode: \"dsr\"\n  bpf-lb-algorithm: \"maglev\"\n  enable-svc-source-range-check: \"true\"\n  enable-l2-neigh-discovery: \"true\"\n  arping-refresh-period: \"30s\"\n  enable-endpoint-routes: \"true\"\n  enable-endpoint-health-checking: \"true\"\n  enable-health-checking: \"true\"\n  enable-well-known-identities: \"false\"\n  enable-remote-node-identity: \"true\"\n  synchronize-k8s-nodes: \"true\"\n  operator-api-serve-addr: \"127.0.0.1:9234\"\n  ipam: \"kubernetes\"\n  disable-cnp-status-updates: \"true\"\n  enable-vtep: \"false\"\n  vtep-endpoint: \"\"\n  vtep-cidr: \"\"\n  vtep-mask: \"\"\n  vtep-mac: \"\"\n  enable-bgp-control-plane: \"false\"\n  bpf-root: \"/sys/fs/bpf\"\n  cgroup-root: \"/sys/fs/cgroup\"\n  enable-k8s-terminating-endpoint: \"true\"\n  remove-cilium-node-taints: \"true\"\n  set-cilium-is-up-condition: \"true\"\n  unmanaged-pod-watcher-interval: \"15\"\n  tofqdns-dns-reject-response-code: \"refused\"\n  tofqdns-enable-dns-compression: \"true\"\n  tofqdns-endpoint-max-ip-per-hostname: \"50\"\n  tofqdns-idle-connection-grace-period: \"0s\"\n  tofqdns-max-deferred-connection-deletes: \"10000\"\n  tofqdns-min-ttl: \"3600\"\n  tofqdns-proxy-response-max-delay: \"100ms\"\n  agent-not-ready-taint-key: \"node.cilium.io/agent-not-ready\"\n---\n# Source: cilium/templates/cilium-agent/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium\nrules:\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  - services\n  - pods\n  - endpoints\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - list\n  - watch\n  # This is used when validating policies in preflight. This will need to stay\n  # until we figure out how to avoid \"get\" inside the preflight, and then\n  # should be removed ideally.\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumbgploadbalancerippools\n  - ciliumbgppeeringpolicies\n  - ciliumclusterwideenvoyconfigs\n  - ciliumclusterwidenetworkpolicies\n  - ciliumegressgatewaypolicies\n  - ciliumegressnatpolicies\n  - ciliumendpoints\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  - ciliumidentities\n  - ciliumlocalredirectpolicies\n  - ciliumnetworkpolicies\n  - ciliumnodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  - ciliumendpoints\n  - ciliumnodes\n  verbs:\n  - create\n- apiGroups:\n  - cilium.io\n  # To synchronize garbage collection of such resources\n  resources:\n  - ciliumidentities\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  verbs:\n  - delete\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  - ciliumnodes/status\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  - ciliumendpoints/status\n  - ciliumendpoints\n  verbs:\n  - patch\n---\n# Source: cilium/templates/cilium-operator/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium-operator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n  - list\n  - watch\n  # to automatically delete [core|kube]dns pods so that are starting to being\n  # managed by Cilium\n  - delete\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # To remove node taints\n  - nodes\n  # To set NetworkUnavailable false on startup\n  - nodes/status\n  verbs:\n  - patch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform LB IP allocation for BGP\n  - services/status\n  verbs:\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  # to check apiserver connectivity\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform the translation of a CNP that contains `ToGroup` to its endpoints\n  - services\n  - endpoints\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies\n  - ciliumclusterwidenetworkpolicies\n  verbs:\n  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'\n  - create\n  - update\n  - deletecollection\n  # To update the status of the CNPs and CCNPs\n  - patch\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  verbs:\n  # Update the auto-generated CNPs and CCNPs status.\n  - patch\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  - ciliumidentities\n  verbs:\n  # To perform garbage collection of such resources\n  - delete\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  verbs:\n  # To synchronize garbage collection of such resources\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n    # To perform CiliumNode garbage collector\n  - delete\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes/status\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n  - delete\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - create\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - update\n  resourceNames:\n  - ciliumbgploadbalancerippools.cilium.io\n  - ciliumbgppeeringpolicies.cilium.io\n  - ciliumclusterwideenvoyconfigs.cilium.io\n  - ciliumclusterwidenetworkpolicies.cilium.io\n  - ciliumegressgatewaypolicies.cilium.io\n  - ciliumegressnatpolicies.cilium.io\n  - ciliumendpoints.cilium.io\n  - ciliumendpointslices.cilium.io\n  - ciliumenvoyconfigs.cilium.io\n  - ciliumexternalworkloads.cilium.io\n  - ciliumidentities.cilium.io\n  - ciliumlocalredirectpolicies.cilium.io\n  - ciliumnetworkpolicies.cilium.io\n  - ciliumnodes.cilium.io\n# For cilium-operator running in HA mode.\n#\n# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election\n# between multiple running instances.\n# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less\n# common and fewer objects in the cluster watch \"all Leases\".\n- apiGroups:\n  - coordination.k8s.io\n  resources:\n  - leases\n  verbs:\n  - create\n  - get\n  - update\n---\n# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium-operator\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium-operator\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-agent/daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cilium\n  namespace: kube-system\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    matchLabels:\n      k8s-app: cilium\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 2\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # ensure pods roll when configmap updates\n        cilium.io/cilium-configmap-checksum: \"be6bbb45a9394d1e583ba29880601946c467d6f0dc209327df1c8cdf0f07d9fb\"\n      labels:\n        k8s-app: cilium\n    spec:\n      containers:\n      - name: cilium-agent\n        image: \"quay.io/cilium/cilium:v1.12.2@sha256:986f8b04cfdb35cf714701e58e35da0ee63da2b8a048ab596ccb49de58d5ba36\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-agent\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        startupProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          failureThreshold: 105\n          periodSeconds: 2\n          successThreshold: 1\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 3\n          timeoutSeconds: 5\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_CLUSTERMESH_CONFIG\n          value: /var/lib/cilium/clustermesh/\n        - name: CILIUM_CNI_CHAINING_MODE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: cni-chaining-mode\n              optional: true\n        - name: CILIUM_CUSTOM_CNI_CONF\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: custom-cni-conf\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        lifecycle:\n          postStart:\n            exec:\n              command:\n              - \"/cni-install.sh\"\n              - \"--enable-debug=false\"\n              - \"--cni-exclusive=true\"\n              - \"--log-file=/var/run/cilium/cilium-cni.log\"\n          preStop:\n            exec:\n              command:\n              - /cni-uninstall.sh\n        securityContext:\n          privileged: true\n        terminationMessagePolicy: FallbackToLogsOnError\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          mountPropagation: Bidirectional\n        # Check for duplicate mounts before mounting\n        - name: cilium-cgroup\n          mountPath: /sys/fs/cgroup\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        - name: cni-path\n          mountPath: /host/opt/cni/bin\n        - name: etc-cni-netd\n          mountPath: /host/etc/cni/net.d\n        - name: clustermesh-secrets\n          mountPath: /var/lib/cilium/clustermesh\n          readOnly: true\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n          # Needed to be able to load kernel modules\n        - name: lib-modules\n          mountPath: /lib/modules\n          readOnly: true\n        - name: xtables-lock\n          mountPath: /run/xtables.lock\n      initContainers:\n      - name: clean-cilium-state\n        image: \"quay.io/cilium/cilium:v1.12.2@sha256:986f8b04cfdb35cf714701e58e35da0ee63da2b8a048ab596ccb49de58d5ba36\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - /init-container.sh\n        env:\n        - name: CILIUM_ALL_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-state\n              optional: true\n        - name: CILIUM_BPF_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-bpf-state\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Required to mount cgroup filesystem from the host to cilium agent pod\n        - name: cilium-cgroup\n          mountPath: /sys/fs/cgroup\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi # wait-for-kube-proxy\n      restartPolicy: Always\n      priorityClassName: system-node-critical\n      serviceAccount: \"cilium\"\n      serviceAccountName: \"cilium\"\n      terminationGracePeriodSeconds: 1\n      hostNetwork: true\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                k8s-app: cilium\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To keep state between restarts / upgrades\n      - name: cilium-run\n        hostPath:\n          path: /var/run/cilium\n          type: DirectoryOrCreate\n        # To keep state between restarts / upgrades for bpf maps\n      - name: bpf-maps\n        hostPath:\n          path: /sys/fs/bpf\n          type: DirectoryOrCreate\n      # To keep state between restarts / upgrades for cgroup2 filesystem\n      - name: cilium-cgroup\n        hostPath:\n          path: /sys/fs/cgroup\n          type: DirectoryOrCreate\n      # To install cilium cni plugin in the host\n      - name: cni-path\n        hostPath:\n          path:  /opt/cni/bin\n          type: DirectoryOrCreate\n        # To install cilium cni configuration in the host\n      - name: etc-cni-netd\n        hostPath:\n          path: /etc/cni/net.d\n          type: DirectoryOrCreate\n        # To be able to load kernel modules\n      - name: lib-modules\n        hostPath:\n          path: /lib/modules\n        # To access iptables concurrently with other processes (e.g. kube-proxy)\n      - name: xtables-lock\n        hostPath:\n          path: /run/xtables.lock\n          type: FileOrCreate\n        # To read the clustermesh configuration\n      - name: clustermesh-secrets\n        secret:\n          secretName: cilium-clustermesh\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          optional: true\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n---\n# Source: cilium/templates/cilium-operator/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cilium-operator\n  namespace: kube-system\n  labels:\n    io.cilium/app: operator\n    name: cilium-operator\nspec:\n  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go\n  # for more details.\n  replicas: 2\n  selector:\n    matchLabels:\n      io.cilium/app: operator\n      name: cilium-operator\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # ensure pods roll when configmap updates\n        cilium.io/cilium-configmap-checksum: \"be6bbb45a9394d1e583ba29880601946c467d6f0dc209327df1c8cdf0f07d9fb\"\n      labels:\n        io.cilium/app: operator\n        name: cilium-operator\n    spec:\n      containers:\n      - name: cilium-operator\n        image: quay.io/cilium/operator-generic:v1.12.2@sha256:00508f78dae5412161fa40ee30069c2802aef20f7bdd20e91423103ba8c0df6e\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-operator-generic\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        - --debug=$(CILIUM_DEBUG)\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              key: debug\n              name: cilium-config\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9234\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          timeoutSeconds: 3\n        volumeMounts:\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n        terminationMessagePolicy: FallbackToLogsOnError\n      hostNetwork: true\n      restartPolicy: Always\n      priorityClassName: system-cluster-critical\n      serviceAccount: \"cilium-operator\"\n      serviceAccountName: \"cilium-operator\"\n      # In HA mode, cilium-operator pods must not be scheduled on the same\n      # node as they will clash with each other.\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                io.cilium/app: operator\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "cluster_name": "chongus"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "k3s-config",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "2eb4f53e577f70797239eb77e30fd08b667a9a4a3fdfa50b321d8e1a283b1a62",
            "rendered": "---\ntls-san:\n  - api.cho.rtrox.com\n  - 172.18.2.252\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
            "template": "---\ntls-san:\n  - ${api_fqdn}\n  - ${api_vip}\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
            "vars": {
              "api_fqdn": "api.cho.rtrox.com",
              "api_vip": "172.18.2.252"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "kube-vip",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "39bdd3dd5d815c0d83effc623e66b4225cd4f63e1d6296700a8b2dda554be8d7",
            "rendered": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/name: kube-vip-ds\n    app.kubernetes.io/version: v0.5.7\n  name: kube-vip-ds\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: kube-vip-ds\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app.kubernetes.io/name: kube-vip-ds\n        app.kubernetes.io/version: v0.5.7\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: node-role.kubernetes.io/master\n                operator: Exists\n            - matchExpressions:\n              - key: node-role.kubernetes.io/control-plane\n                operator: Exists\n      containers:\n      - args:\n        - manager\n        env:\n        - name: KUBERNETES_SERVICE_HOST\n          value: 127.0.0.1\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        - name: vip_arp\n          value: \"true\"\n        - name: port\n          value: \"6443\"\n        - name: vip_interface\n          value: eno1\n        - name: vip_cidr\n          value: \"32\"\n        - name: cp_enable\n          value: \"true\"\n        - name: cp_namespace\n          value: kube-system\n        - name: vip_ddns\n          value: \"false\"\n        - name: vip_leaderelection\n          value: \"true\"\n        - name: vip_leaseduration\n          value: \"5\"\n        - name: vip_renewdeadline\n          value: \"3\"\n        - name: vip_retryperiod\n          value: \"1\"\n        - name: address\n          value: 172.18.2.252\n        - name: prometheus_server\n          value: :2112\n        image: ghcr.io/kube-vip/kube-vip:v0.5.7\n        imagePullPolicy: Always\n        name: kube-vip\n        resources: {}\n        securityContext:\n          capabilities:\n            add:\n            - NET_ADMIN\n            - NET_RAW\n      hostNetwork: true\n      serviceAccountName: kube-vip\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n  updateStrategy: {}\nstatus:\n  currentNumberScheduled: 0\n  desiredNumberScheduled: 0\n  numberMisscheduled: 0\n  numberReady: 0\n\n",
            "template": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/name: kube-vip-ds\n    app.kubernetes.io/version: v0.5.7\n  name: kube-vip-ds\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: kube-vip-ds\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app.kubernetes.io/name: kube-vip-ds\n        app.kubernetes.io/version: v0.5.7\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: node-role.kubernetes.io/master\n                operator: Exists\n            - matchExpressions:\n              - key: node-role.kubernetes.io/control-plane\n                operator: Exists\n      containers:\n      - args:\n        - manager\n        env:\n        - name: KUBERNETES_SERVICE_HOST\n          value: 127.0.0.1\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        - name: vip_arp\n          value: \"true\"\n        - name: port\n          value: \"6443\"\n        - name: vip_interface\n          value: ${api_vip_iface}\n        - name: vip_cidr\n          value: \"32\"\n        - name: cp_enable\n          value: \"true\"\n        - name: cp_namespace\n          value: kube-system\n        - name: vip_ddns\n          value: \"false\"\n        - name: vip_leaderelection\n          value: \"true\"\n        - name: vip_leaseduration\n          value: \"5\"\n        - name: vip_renewdeadline\n          value: \"3\"\n        - name: vip_retryperiod\n          value: \"1\"\n        - name: address\n          value: ${api_vip}\n        - name: prometheus_server\n          value: :2112\n        image: ghcr.io/kube-vip/kube-vip:v0.5.7\n        imagePullPolicy: Always\n        name: kube-vip\n        resources: {}\n        securityContext:\n          capabilities:\n            add:\n            - NET_ADMIN\n            - NET_RAW\n      hostNetwork: true\n      serviceAccountName: kube-vip\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n  updateStrategy: {}\nstatus:\n  currentNumberScheduled: 0\n  desiredNumberScheduled: 0\n  numberMisscheduled: 0\n  numberReady: 0\n\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "api_vip_iface": "eno1"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_group",
      "name": "flatcar-install",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node01",
            "metadata": {},
            "name": "flatcar-install-node01",
            "profile": "flatcar-install-node01",
            "selector": {
              "mac": "44:a8:42:3e:b9:27"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node02",
            "metadata": {},
            "name": "flatcar-install-node02",
            "profile": "flatcar-install-node02",
            "selector": {
              "mac": "b0:83:fe:cf:91:f7"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node03",
            "metadata": {},
            "name": "flatcar-install-node03",
            "profile": "flatcar-install-node03",
            "selector": {
              "mac": "b0:83:fe:cf:d7:ee"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_group",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node01",
            "metadata": {},
            "name": "worker-node01",
            "profile": "worker-node01",
            "selector": {
              "node": "node01",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node02",
            "metadata": {},
            "name": "worker-node02",
            "profile": "worker-node02",
            "selector": {
              "node": "node02",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node03",
            "metadata": {},
            "name": "worker-node03",
            "profile": "worker-node03",
            "selector": {
              "node": "node03",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_profile",
      "name": "flatcar-install",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node01",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node01",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLMYrDMBCF4V6nmPXCdpLsdsHkImkkzSRWkDRBMzb27UNI0qR58OD7f398zM3HIAtY2k1aewFrO2k/YBphWFTv/97XoGmJvDvJ6Lp23l3i6vO1Zc3cTixzbqKhFMK/xkjzc8ZpAMvwUe4m3MylBE2h27eHswGwCB5p84Lh9fNXtCJtASsIqRYycohSTVqgU2RW8wgAAP//FWpKkcgAAAA=\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node01-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node02",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node02",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vS9SgUX8RLkhltJMlIZlratxdRL14++OD3//3xMTcfg8xgaTNp6QWs7aR9h/8Rhln1fvS+Bk1z5M1JRte18+YSV5+vLWvmdmKZchMNpRD+NUaanjMeBrAMH+Vuws1cStAUun17OBsAi+CRVi8YXj9/RQvSGrCCkGohI7so1aQFOkVmNY8AAAD//1sM4inIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node02-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node03",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node03",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vSxZtQfBEvSWa0kSQjmWlp315EvXj54IPf//fHx9x8DDKDpc2kpRewtpP2Hf5HGGbV+9H7GjTNkTcnGV3XzptLXH2+tqyZ24llyk00lEL41xhpes54GMAyfJS7CTdzKUFT6Pbt4WwALIJHWr1geP38FS1Ia8AKQqqFjOyiVJMW6BSZ1TwCAAD//14sVffIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node03-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_profile",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node01",
            "initrd": null,
            "kernel": null,
            "name": "worker-node01",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node01.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbmFtZTogc3lzdGVtOmt1YmUtdmlwLXJvbGUKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcyIsICJzZXJ2aWNlcy9zdGF0dXMiLCAibm9kZXMiLCAiZW5kcG9pbnRzIl0KICAgIHZlcmJzOiBbImxpc3QiLCJnZXQiLCJ3YXRjaCIsICJ1cGRhdGUiXQogIC0gYXBpR3JvdXBzOiBbImNvb3JkaW5hdGlvbi5rOHMuaW8iXQogICAgcmVzb3VyY2VzOiBbImxlYXNlcyJdCiAgICB2ZXJiczogWyJsaXN0IiwgImdldCIsICJ3YXRjaCIsICJ1cGRhdGUiLCAiY3JlYXRlIl0KLS0tCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1iaW5kaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIGxhYmVsczoKICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IGt1YmUtdmlwLWRzCiAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICBuYW1lOiBrdWJlLXZpcC1kcwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL3ZlcnNpb246IHYwLjUuNwogICAgc3BlYzoKICAgICAgYWZmaW5pdHk6CiAgICAgICAgbm9kZUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgICAgbm9kZVNlbGVjdG9yVGVybXM6CiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vY29udHJvbC1wbGFuZQogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICBjb250YWluZXJzOgogICAgICAtIGFyZ3M6CiAgICAgICAgLSBtYW5hZ2VyCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAxMjcuMC4wLjEKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiBwb3J0CiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgICAgICB2YWx1ZTogZW5vMQogICAgICAgIC0gbmFtZTogdmlwX2NpZHIKICAgICAgICAgIHZhbHVlOiAiMzIiCiAgICAgICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAgICAgLSBuYW1lOiB2aXBfZGRucwogICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAtIG5hbWU6IHZpcF9sZWFkZXJlbGVjdGlvbgogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYXNlZHVyYXRpb24KICAgICAgICAgIHZhbHVlOiAiNSIKICAgICAgICAtIG5hbWU6IHZpcF9yZW5ld2RlYWRsaW5lCiAgICAgICAgICB2YWx1ZTogIjMiCiAgICAgICAgLSBuYW1lOiB2aXBfcmV0cnlwZXJpb2QKICAgICAgICAgIHZhbHVlOiAiMSIKICAgICAgICAtIG5hbWU6IGFkZHJlc3MKICAgICAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgICAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgICAgICB2YWx1ZTogOjIxMTIKICAgICAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgIG5hbWU6IGt1YmUtdmlwCiAgICAgICAgcmVzb3VyY2VzOiB7fQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgICAtIE5FVF9SQVcKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlLXZpcAogICAgICB0b2xlcmF0aW9uczoKICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIC0gZWZmZWN0OiBOb0V4ZWN1dGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgo=\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC=--cluster-init\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node02",
            "initrd": null,
            "kernel": null,
            "name": "worker-node02",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node02.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbmFtZTogc3lzdGVtOmt1YmUtdmlwLXJvbGUKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcyIsICJzZXJ2aWNlcy9zdGF0dXMiLCAibm9kZXMiLCAiZW5kcG9pbnRzIl0KICAgIHZlcmJzOiBbImxpc3QiLCJnZXQiLCJ3YXRjaCIsICJ1cGRhdGUiXQogIC0gYXBpR3JvdXBzOiBbImNvb3JkaW5hdGlvbi5rOHMuaW8iXQogICAgcmVzb3VyY2VzOiBbImxlYXNlcyJdCiAgICB2ZXJiczogWyJsaXN0IiwgImdldCIsICJ3YXRjaCIsICJ1cGRhdGUiLCAiY3JlYXRlIl0KLS0tCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1iaW5kaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIGxhYmVsczoKICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IGt1YmUtdmlwLWRzCiAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICBuYW1lOiBrdWJlLXZpcC1kcwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL3ZlcnNpb246IHYwLjUuNwogICAgc3BlYzoKICAgICAgYWZmaW5pdHk6CiAgICAgICAgbm9kZUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgICAgbm9kZVNlbGVjdG9yVGVybXM6CiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vY29udHJvbC1wbGFuZQogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICBjb250YWluZXJzOgogICAgICAtIGFyZ3M6CiAgICAgICAgLSBtYW5hZ2VyCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAxMjcuMC4wLjEKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiBwb3J0CiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgICAgICB2YWx1ZTogZW5vMQogICAgICAgIC0gbmFtZTogdmlwX2NpZHIKICAgICAgICAgIHZhbHVlOiAiMzIiCiAgICAgICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAgICAgLSBuYW1lOiB2aXBfZGRucwogICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAtIG5hbWU6IHZpcF9sZWFkZXJlbGVjdGlvbgogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYXNlZHVyYXRpb24KICAgICAgICAgIHZhbHVlOiAiNSIKICAgICAgICAtIG5hbWU6IHZpcF9yZW5ld2RlYWRsaW5lCiAgICAgICAgICB2YWx1ZTogIjMiCiAgICAgICAgLSBuYW1lOiB2aXBfcmV0cnlwZXJpb2QKICAgICAgICAgIHZhbHVlOiAiMSIKICAgICAgICAtIG5hbWU6IGFkZHJlc3MKICAgICAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgICAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgICAgICB2YWx1ZTogOjIxMTIKICAgICAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgIG5hbWU6IGt1YmUtdmlwCiAgICAgICAgcmVzb3VyY2VzOiB7fQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgICAtIE5FVF9SQVcKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlLXZpcAogICAgICB0b2xlcmF0aW9uczoKICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIC0gZWZmZWN0OiBOb0V4ZWN1dGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgo=\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node03",
            "initrd": null,
            "kernel": null,
            "name": "worker-node03",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node03.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbmFtZTogc3lzdGVtOmt1YmUtdmlwLXJvbGUKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcyIsICJzZXJ2aWNlcy9zdGF0dXMiLCAibm9kZXMiLCAiZW5kcG9pbnRzIl0KICAgIHZlcmJzOiBbImxpc3QiLCJnZXQiLCJ3YXRjaCIsICJ1cGRhdGUiXQogIC0gYXBpR3JvdXBzOiBbImNvb3JkaW5hdGlvbi5rOHMuaW8iXQogICAgcmVzb3VyY2VzOiBbImxlYXNlcyJdCiAgICB2ZXJiczogWyJsaXN0IiwgImdldCIsICJ3YXRjaCIsICJ1cGRhdGUiLCAiY3JlYXRlIl0KLS0tCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1iaW5kaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIGxhYmVsczoKICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IGt1YmUtdmlwLWRzCiAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICBuYW1lOiBrdWJlLXZpcC1kcwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL3ZlcnNpb246IHYwLjUuNwogICAgc3BlYzoKICAgICAgYWZmaW5pdHk6CiAgICAgICAgbm9kZUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgICAgbm9kZVNlbGVjdG9yVGVybXM6CiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vY29udHJvbC1wbGFuZQogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICBjb250YWluZXJzOgogICAgICAtIGFyZ3M6CiAgICAgICAgLSBtYW5hZ2VyCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAxMjcuMC4wLjEKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiBwb3J0CiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgICAgICB2YWx1ZTogZW5vMQogICAgICAgIC0gbmFtZTogdmlwX2NpZHIKICAgICAgICAgIHZhbHVlOiAiMzIiCiAgICAgICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAgICAgLSBuYW1lOiB2aXBfZGRucwogICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAtIG5hbWU6IHZpcF9sZWFkZXJlbGVjdGlvbgogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYXNlZHVyYXRpb24KICAgICAgICAgIHZhbHVlOiAiNSIKICAgICAgICAtIG5hbWU6IHZpcF9yZW5ld2RlYWRsaW5lCiAgICAgICAgICB2YWx1ZTogIjMiCiAgICAgICAgLSBuYW1lOiB2aXBfcmV0cnlwZXJpb2QKICAgICAgICAgIHZhbHVlOiAiMSIKICAgICAgICAtIG5hbWU6IGFkZHJlc3MKICAgICAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgICAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgICAgICB2YWx1ZTogOjIxMTIKICAgICAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgIG5hbWU6IGt1YmUtdmlwCiAgICAgICAgcmVzb3VyY2VzOiB7fQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgICAtIE5FVF9SQVcKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlLXZpcAogICAgICB0b2xlcmF0aW9uczoKICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIC0gZWZmZWN0OiBOb0V4ZWN1dGUKICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgo=\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
