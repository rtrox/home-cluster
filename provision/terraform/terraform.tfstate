{
  "version": 4,
  "terraform_version": "1.3.6",
  "serial": 147,
  "lineage": "010f88ba-7585-17bd-e205-abfa42200d0b",
  "outputs": {
    "k3s-api-fqdn": {
      "value": "api.cho.rtrox.com",
      "type": "string"
    },
    "k3s-api-vip": {
      "value": "172.18.2.252",
      "type": "string"
    },
    "k3s-config": {
      "value": "---\ntls-san:\n  - api.cho.rtrox.com\n  - 172.18.2.252\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
      "type": "string"
    }
  },
  "resources": [
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "ct_config",
      "name": "install",
      "provider": "provider[\"registry.terraform.io/poseidon/ct\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node01\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node01-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "908637654",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLMYrDMBCF4V6nmPXCdpLsdsHkImkkzSRWkDRBMzb27UNI0qR58OD7f398zM3HIAtY2k1aewFrO2k/YBphWFTv/97XoGmJvDvJ6Lp23l3i6vO1Zc3cTixzbqKhFMK/xkjzc8ZpAMvwUe4m3MylBE2h27eHswGwCB5p84Lh9fNXtCJtASsIqRYycohSTVqgU2RW8wgAAP//FWpKkcgAAAA=\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node01-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node02\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node02-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "2515247730",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vS9SgUX8RLkhltJMlIZlratxdRL14++OD3//3xMTcfg8xgaTNp6QWs7aR9h/8Rhln1fvS+Bk1z5M1JRte18+YSV5+vLWvmdmKZchMNpRD+NUaanjMeBrAMH+Vuws1cStAUun17OBsAi+CRVi8YXj9/RQvSGrCCkGohI7so1aQFOkVmNY8AAAD//1sM4inIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node02-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node03\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node03-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "843122694",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vSxZtQfBEvSWa0kSQjmWlp315EvXj54IPf//fHx9x8DDKDpc2kpRewtpP2Hf5HGGbV+9H7GjTNkTcnGV3XzptLXH2+tqyZ24llyk00lEL41xhpes54GMAyfJS7CTdzKUFT6Pbt4WwALIJHWr1geP38FS1Ia8AKQqqFjOyiVJMW6BSZ1TwCAAD//14sVffIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node03-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "ct_config",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/ct\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node01.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgY29udGFpbmVyczoKICAtIGFyZ3M6CiAgICAtIG1hbmFnZXIKICAgIGVudjoKICAgIC0gbmFtZTogdmlwX2FycAogICAgICB2YWx1ZTogImZhbHNlIgogICAgLSBuYW1lOiBwb3J0CiAgICAgIHZhbHVlOiAiNjQ0MyIKICAgIC0gbmFtZTogdmlwX2ludGVyZmFjZQogICAgICB2YWx1ZTogZW5vMQogICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICB2YWx1ZTogIjMyIgogICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBjcF9uYW1lc3BhY2UKICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IGJncF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBiZ3Bfcm91dGVyaWQKICAgICAgdmFsdWU6IDE3Mi4xOC4yLjEKICAgIC0gbmFtZTogYmdwX2FzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVyYWRkcmVzcwogICAgLSBuYW1lOiBiZ3BfcGVlcnBhc3MKICAgIC0gbmFtZTogYmdwX3BlZXJhcwogICAgICB2YWx1ZTogIjY0NTEyIgogICAgLSBuYW1lOiBiZ3BfcGVlcnMKICAgICAgdmFsdWU6IDE3Mi4xNi4yNTQuMTo2NDUxMjo6ZmFsc2UKICAgIC0gbmFtZTogYWRkcmVzcwogICAgICB2YWx1ZTogMTcyLjE4LjIuMjUyCiAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgIHZhbHVlOiA6MjExMgogICAgaW1hZ2U6IGdoY3IuaW8va3ViZS12aXAva3ViZS12aXA6djAuNS43CiAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgbmFtZToga3ViZS12aXAKICAgIHJlc291cmNlczoge30KICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgIGFkZDoKICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgIC0gTkVUX1JBVwogICAgdm9sdW1lTW91bnRzOgogICAgLSBtb3VudFBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICAgIG5hbWU6IGt1YmVjb25maWcKICBob3N0QWxpYXNlczoKICAtIGhvc3RuYW1lczoKICAgIC0ga3ViZXJuZXRlcwogICAgaXA6IDEyNy4wLjAuMQogIGhvc3ROZXR3b3JrOiB0cnVlCiAgdm9sdW1lczoKICAtIGhvc3RQYXRoOgogICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMvYWRtaW4uY29uZgogICAgbmFtZToga3ViZWNvbmZpZwpzdGF0dXM6IHt9\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC=--cluster-init\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=\"/usr/bin/rm\" \"-rf\" \"/var/lib/rancher/k3s/server/manifests/runonce/*\"\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=5min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "3426368606",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node01.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgY29udGFpbmVyczoKICAtIGFyZ3M6CiAgICAtIG1hbmFnZXIKICAgIGVudjoKICAgIC0gbmFtZTogdmlwX2FycAogICAgICB2YWx1ZTogImZhbHNlIgogICAgLSBuYW1lOiBwb3J0CiAgICAgIHZhbHVlOiAiNjQ0MyIKICAgIC0gbmFtZTogdmlwX2ludGVyZmFjZQogICAgICB2YWx1ZTogZW5vMQogICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICB2YWx1ZTogIjMyIgogICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBjcF9uYW1lc3BhY2UKICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IGJncF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBiZ3Bfcm91dGVyaWQKICAgICAgdmFsdWU6IDE3Mi4xOC4yLjEKICAgIC0gbmFtZTogYmdwX2FzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVyYWRkcmVzcwogICAgLSBuYW1lOiBiZ3BfcGVlcnBhc3MKICAgIC0gbmFtZTogYmdwX3BlZXJhcwogICAgICB2YWx1ZTogIjY0NTEyIgogICAgLSBuYW1lOiBiZ3BfcGVlcnMKICAgICAgdmFsdWU6IDE3Mi4xNi4yNTQuMTo2NDUxMjo6ZmFsc2UKICAgIC0gbmFtZTogYWRkcmVzcwogICAgICB2YWx1ZTogMTcyLjE4LjIuMjUyCiAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgIHZhbHVlOiA6MjExMgogICAgaW1hZ2U6IGdoY3IuaW8va3ViZS12aXAva3ViZS12aXA6djAuNS43CiAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgbmFtZToga3ViZS12aXAKICAgIHJlc291cmNlczoge30KICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgIGFkZDoKICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgIC0gTkVUX1JBVwogICAgdm9sdW1lTW91bnRzOgogICAgLSBtb3VudFBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICAgIG5hbWU6IGt1YmVjb25maWcKICBob3N0QWxpYXNlczoKICAtIGhvc3RuYW1lczoKICAgIC0ga3ViZXJuZXRlcwogICAgaXA6IDEyNy4wLjAuMQogIGhvc3ROZXR3b3JrOiB0cnVlCiAgdm9sdW1lczoKICAtIGhvc3RQYXRoOgogICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMvYWRtaW4uY29uZgogICAgbmFtZToga3ViZWNvbmZpZwpzdGF0dXM6IHt9\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC=--cluster-init\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=\\\"/usr/bin/rm\\\" \\\"-rf\\\" \\\"/var/lib/rancher/k3s/server/manifests/runonce/*\\\"\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=5min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node02.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IE5hbWVzcGFjZQptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0KICBsYWJlbHM6CiAgICBwb2Qtc2VjdXJpdHkua3ViZXJuZXRlcy5pby9lbmZvcmNlOiBwcml2aWxlZ2VkCgotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLWFnZW50L3NlcnZpY2VhY2NvdW50LnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogImNpbGl1bSIKICBuYW1lc3BhY2U6IGNpbGl1bQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLW9wZXJhdG9yL3NlcnZpY2VhY2NvdW50LnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogImNpbGl1bS1vcGVyYXRvciIKICBuYW1lc3BhY2U6IGNpbGl1bQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLWNvbmZpZ21hcC55YW1sCmFwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZ01hcAptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgbmFtZXNwYWNlOiBjaWxpdW0KZGF0YToKCiAgIyBJZGVudGl0eSBhbGxvY2F0aW9uIG1vZGUgc2VsZWN0cyBob3cgaWRlbnRpdGllcyBhcmUgc2hhcmVkIGJldHdlZW4gY2lsaXVtCiAgIyBub2RlcyBieSBzZXR0aW5nIGhvdyB0aGV5IGFyZSBzdG9yZWQuIFRoZSBvcHRpb25zIGFyZSAiY3JkIiBvciAia3ZzdG9yZSIuCiAgIyAtICJjcmQiIHN0b3JlcyBpZGVudGl0aWVzIGluIGt1YmVybmV0ZXMgYXMgQ1JEcyAoY3VzdG9tIHJlc291cmNlIGRlZmluaXRpb24pLgogICMgICBUaGVzZSBjYW4gYmUgcXVlcmllZCB3aXRoOgogICMgICAgIGt1YmVjdGwgZ2V0IGNpbGl1bWlkCiAgIyAtICJrdnN0b3JlIiBzdG9yZXMgaWRlbnRpdGllcyBpbiBhbiBldGNkIGt2c3RvcmUsIHRoYXQgaXMKICAjICAgY29uZmlndXJlZCBiZWxvdy4gQ2lsaXVtIHZlcnNpb25zIGJlZm9yZSAxLjYgc3VwcG9ydGVkIG9ubHkgdGhlIGt2c3RvcmUKICAjICAgYmFja2VuZC4gVXBncmFkZXMgZnJvbSB0aGVzZSBvbGRlciBjaWxpdW0gdmVyc2lvbnMgc2hvdWxkIGNvbnRpbnVlIHVzaW5nCiAgIyAgIHRoZSBrdnN0b3JlIGJ5IGNvbW1lbnRpbmcgb3V0IHRoZSBpZGVudGl0eS1hbGxvY2F0aW9uLW1vZGUgYmVsb3csIG9yCiAgIyAgIHNldHRpbmcgaXQgdG8gImt2c3RvcmUiLgogIGlkZW50aXR5LWFsbG9jYXRpb24tbW9kZTogY3JkCiAgY2lsaXVtLWVuZHBvaW50LWdjLWludGVydmFsOiAiNW0wcyIKICBub2Rlcy1nYy1pbnRlcnZhbDogIjVtMHMiCiAgIyBEaXNhYmxlIHRoZSB1c2FnZSBvZiBDaWxpdW1FbmRwb2ludCBDUkQKICBkaXNhYmxlLWVuZHBvaW50LWNyZDogImZhbHNlIgoKICAjIElmIHlvdSB3YW50IHRvIHJ1biBjaWxpdW0gaW4gZGVidWcgbW9kZSBjaGFuZ2UgdGhpcyB2YWx1ZSB0byB0cnVlCiAgZGVidWc6ICJmYWxzZSIKICAjIFRoZSBhZ2VudCBjYW4gYmUgcHV0IGludG8gdGhlIGZvbGxvd2luZyB0aHJlZSBwb2xpY3kgZW5mb3JjZW1lbnQgbW9kZXMKICAjIGRlZmF1bHQsIGFsd2F5cyBhbmQgbmV2ZXIuCiAgIyBodHRwczovL2RvY3MuY2lsaXVtLmlvL2VuL2xhdGVzdC9wb2xpY3kvaW50cm8vI3BvbGljeS1lbmZvcmNlbWVudC1tb2RlcwogIGVuYWJsZS1wb2xpY3k6ICJkZWZhdWx0IgoKICAjIEVuYWJsZSBJUHY0IGFkZHJlc3NpbmcuIElmIGVuYWJsZWQsIGFsbCBlbmRwb2ludHMgYXJlIGFsbG9jYXRlZCBhbiBJUHY0CiAgIyBhZGRyZXNzLgogIGVuYWJsZS1pcHY0OiAidHJ1ZSIKCiAgIyBFbmFibGUgSVB2NiBhZGRyZXNzaW5nLiBJZiBlbmFibGVkLCBhbGwgZW5kcG9pbnRzIGFyZSBhbGxvY2F0ZWQgYW4gSVB2NgogICMgYWRkcmVzcy4KICBlbmFibGUtaXB2NjogImZhbHNlIgogICMgVXNlcnMgd2hvIHdpc2ggdG8gc3BlY2lmeSB0aGVpciBvd24gY3VzdG9tIENOSSBjb25maWd1cmF0aW9uIGZpbGUgbXVzdCBzZXQKICAjIGN1c3RvbS1jbmktY29uZiB0byAidHJ1ZSIsIG90aGVyd2lzZSBDaWxpdW0gbWF5IG92ZXJ3cml0ZSB0aGUgY29uZmlndXJhdGlvbi4KICBjdXN0b20tY25pLWNvbmY6ICJmYWxzZSIKICBlbmFibGUtYnBmLWNsb2NrLXByb2JlOiAidHJ1ZSIKICAjIElmIHlvdSB3YW50IGNpbGl1bSBtb25pdG9yIHRvIGFnZ3JlZ2F0ZSB0cmFjaW5nIGZvciBwYWNrZXRzLCBzZXQgdGhpcyBsZXZlbAogICMgdG8gImxvdyIsICJtZWRpdW0iLCBvciAibWF4aW11bSIuIFRoZSBoaWdoZXIgdGhlIGxldmVsLCB0aGUgbGVzcyBwYWNrZXRzCiAgIyB0aGF0IHdpbGwgYmUgc2VlbiBpbiBtb25pdG9yIG91dHB1dC4KICBtb25pdG9yLWFnZ3JlZ2F0aW9uOiBtZWRpdW0KCiAgIyBUaGUgbW9uaXRvciBhZ2dyZWdhdGlvbiBpbnRlcnZhbCBnb3Zlcm5zIHRoZSB0eXBpY2FsIHRpbWUgYmV0d2VlbiBtb25pdG9yCiAgIyBub3RpZmljYXRpb24gZXZlbnRzIGZvciBlYWNoIGFsbG93ZWQgY29ubmVjdGlvbi4KICAjCiAgIyBPbmx5IGVmZmVjdGl2ZSB3aGVuIG1vbml0b3IgYWdncmVnYXRpb24gaXMgc2V0IHRvICJtZWRpdW0iIG9yIGhpZ2hlci4KICBtb25pdG9yLWFnZ3JlZ2F0aW9uLWludGVydmFsOiA1cwoKICAjIFRoZSBtb25pdG9yIGFnZ3JlZ2F0aW9uIGZsYWdzIGRldGVybWluZSB3aGljaCBUQ1AgZmxhZ3Mgd2hpY2gsIHVwb24gdGhlCiAgIyBmaXJzdCBvYnNlcnZhdGlvbiwgY2F1c2UgbW9uaXRvciBub3RpZmljYXRpb25zIHRvIGJlIGdlbmVyYXRlZC4KICAjCiAgIyBPbmx5IGVmZmVjdGl2ZSB3aGVuIG1vbml0b3IgYWdncmVnYXRpb24gaXMgc2V0IHRvICJtZWRpdW0iIG9yIGhpZ2hlci4KICBtb25pdG9yLWFnZ3JlZ2F0aW9uLWZsYWdzOiBhbGwKICAjIFNwZWNpZmllcyB0aGUgcmF0aW8gKDAuMC0xLjApIG9mIHRvdGFsIHN5c3RlbSBtZW1vcnkgdG8gdXNlIGZvciBkeW5hbWljCiAgIyBzaXppbmcgb2YgdGhlIFRDUCBDVCwgbm9uLVRDUCBDVCwgTkFUIGFuZCBwb2xpY3kgQlBGIG1hcHMuCiAgYnBmLW1hcC1keW5hbWljLXNpemUtcmF0aW86ICIwLjAwMjUiCiAgIyBicGYtcG9saWN5LW1hcC1tYXggc3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBlbnRyaWVzIGluIGVuZHBvaW50CiAgIyBwb2xpY3kgbWFwIChwZXIgZW5kcG9pbnQpCiAgYnBmLXBvbGljeS1tYXAtbWF4OiAiMTYzODQiCiAgIyBicGYtbGItbWFwLW1heCBzcGVjaWZpZXMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGVudHJpZXMgaW4gYnBmIGxiIHNlcnZpY2UsCiAgIyBiYWNrZW5kIGFuZCBhZmZpbml0eSBtYXBzLgogIGJwZi1sYi1tYXAtbWF4OiAiNjU1MzYiCiAgIyBicGYtbGItYnlwYXNzLWZpYi1sb29rdXAgaW5zdHJ1Y3RzIENpbGl1bSB0byBlbmFibGUgdGhlIEZJQiBsb29rdXAgYnlwYXNzCiAgIyBvcHRpbWl6YXRpb24gZm9yIG5vZGVwb3J0IHJldmVyc2UgTkFUIGhhbmRsaW5nLgogIGJwZi1sYi1leHRlcm5hbC1jbHVzdGVyaXA6ICJmYWxzZSIKCiAgIyBQcmUtYWxsb2NhdGlvbiBvZiBtYXAgZW50cmllcyBhbGxvd3MgcGVyLXBhY2tldCBsYXRlbmN5IHRvIGJlIHJlZHVjZWQsIGF0CiAgIyB0aGUgZXhwZW5zZSBvZiB1cC1mcm9udCBtZW1vcnkgYWxsb2NhdGlvbiBmb3IgdGhlIGVudHJpZXMgaW4gdGhlIG1hcHMuIFRoZQogICMgZGVmYXVsdCB2YWx1ZSBiZWxvdyB3aWxsIG1pbmltaXplIG1lbW9yeSB1c2FnZSBpbiB0aGUgZGVmYXVsdCBpbnN0YWxsYXRpb247CiAgIyB1c2VycyB3aG8gYXJlIHNlbnNpdGl2ZSB0byBsYXRlbmN5IG1heSBjb25zaWRlciBzZXR0aW5nIHRoaXMgdG8gInRydWUiLgogICMKICAjIFRoaXMgb3B0aW9uIHdhcyBpbnRyb2R1Y2VkIGluIENpbGl1bSAxLjQuIENpbGl1bSAxLjMgYW5kIGVhcmxpZXIgaWdub3JlCiAgIyB0aGlzIG9wdGlvbiBhbmQgYmVoYXZlIGFzIHRob3VnaCBpdCBpcyBzZXQgdG8gInRydWUiLgogICMKICAjIElmIHRoaXMgdmFsdWUgaXMgbW9kaWZpZWQsIHRoZW4gZHVyaW5nIHRoZSBuZXh0IENpbGl1bSBzdGFydHVwIHRoZSByZXN0b3JlCiAgIyBvZiBleGlzdGluZyBlbmRwb2ludHMgYW5kIHRyYWNraW5nIG9mIG9uZ29pbmcgY29ubmVjdGlvbnMgbWF5IGJlIGRpc3J1cHRlZC4KICAjIEFzIGEgcmVzdWx0LCByZXBseSBwYWNrZXRzIG1heSBiZSBkcm9wcGVkIGFuZCB0aGUgbG9hZC1iYWxhbmNpbmcgZGVjaXNpb25zCiAgIyBmb3IgZXN0YWJsaXNoZWQgY29ubmVjdGlvbnMgbWF5IGNoYW5nZS4KICAjCiAgIyBJZiB0aGlzIG9wdGlvbiBpcyBzZXQgdG8gImZhbHNlIiBkdXJpbmcgYW4gdXBncmFkZSBmcm9tIDEuMyBvciBlYXJsaWVyIHRvCiAgIyAxLjQgb3IgbGF0ZXIsIHRoZW4gaXQgbWF5IGNhdXNlIG9uZS10aW1lIGRpc3J1cHRpb25zIGR1cmluZyB0aGUgdXBncmFkZS4KICBwcmVhbGxvY2F0ZS1icGYtbWFwczogImZhbHNlIgoKICAjIFJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaGluZyBjb21wYXRpYmxlIElzdGlvIHNpZGVjYXIgaXN0aW8tcHJveHkKICAjIGNvbnRhaW5lciBpbWFnZSBuYW1lcwogIHNpZGVjYXItaXN0aW8tcHJveHktaW1hZ2U6ICJjaWxpdW0vaXN0aW9fcHJveHkiCgogICMgTmFtZSBvZiB0aGUgY2x1c3Rlci4gT25seSByZWxldmFudCB3aGVuIGJ1aWxkaW5nIGEgbWVzaCBvZiBjbHVzdGVycy4KICBjbHVzdGVyLW5hbWU6IGNob25ndXMKICAjIFVuaXF1ZSBJRCBvZiB0aGUgY2x1c3Rlci4gTXVzdCBiZSB1bmlxdWUgYWNyb3NzIGFsbCBjb25uZXRlZCBjbHVzdGVycyBhbmQKICAjIGluIHRoZSByYW5nZSBvZiAxIGFuZCAyNTUuIE9ubHkgcmVsZXZhbnQgd2hlbiBidWlsZGluZyBhIG1lc2ggb2YgY2x1c3RlcnMuCiAgY2x1c3Rlci1pZDogIjEiCgogICMgRW5jYXBzdWxhdGlvbiBtb2RlIGZvciBjb21tdW5pY2F0aW9uIGJldHdlZW4gbm9kZXMKICAjIFBvc3NpYmxlIHZhbHVlczoKICAjICAgLSBkaXNhYmxlZAogICMgICAtIHZ4bGFuIChkZWZhdWx0KQogICMgICAtIGdlbmV2ZQogIHR1bm5lbDogImRpc2FibGVkIgogICMgRW5hYmxlcyBMNyBwcm94eSBmb3IgTDcgcG9saWN5IGVuZm9yY2VtZW50IGFuZCB2aXNpYmlsaXR5CiAgZW5hYmxlLWw3LXByb3h5OiAidHJ1ZSIKCiAgZW5hYmxlLWlwdjQtbWFzcXVlcmFkZTogInRydWUiCiAgZW5hYmxlLWlwdjYtbWFzcXVlcmFkZTogInRydWUiCgogIGVuYWJsZS14dC1zb2NrZXQtZmFsbGJhY2s6ICJ0cnVlIgogIGluc3RhbGwtaXB0YWJsZXMtcnVsZXM6ICJ0cnVlIgogIGluc3RhbGwtbm8tY29ubnRyYWNrLWlwdGFibGVzLXJ1bGVzOiAiZmFsc2UiCgogIGF1dG8tZGlyZWN0LW5vZGUtcm91dGVzOiAidHJ1ZSIKICBlbmFibGUtbG9jYWwtcmVkaXJlY3QtcG9saWN5OiAidHJ1ZSIKICBpcHY0LW5hdGl2ZS1yb3V0aW5nLWNpZHI6IDEwLjI0NC4wLjAvMTYKCiAga3ViZS1wcm94eS1yZXBsYWNlbWVudDogInN0cmljdCIKICBrdWJlLXByb3h5LXJlcGxhY2VtZW50LWhlYWx0aHotYmluZC1hZGRyZXNzOiAiMC4wLjAuMDoxMDI1NiIKICBicGYtbGItc29jazogImZhbHNlIgogIGVuYWJsZS1oZWFsdGgtY2hlY2stbm9kZXBvcnQ6ICJ0cnVlIgogIG5vZGUtcG9ydC1iaW5kLXByb3RlY3Rpb246ICJ0cnVlIgogIGVuYWJsZS1hdXRvLXByb3RlY3Qtbm9kZS1wb3J0LXJhbmdlOiAidHJ1ZSIKICBicGYtbGItbW9kZTogImRzciIKICBicGYtbGItYWxnb3JpdGhtOiAibWFnbGV2IgogIGVuYWJsZS1zdmMtc291cmNlLXJhbmdlLWNoZWNrOiAidHJ1ZSIKICBlbmFibGUtbDItbmVpZ2gtZGlzY292ZXJ5OiAidHJ1ZSIKICBhcnBpbmctcmVmcmVzaC1wZXJpb2Q6ICIzMHMiCiAgZW5hYmxlLWVuZHBvaW50LXJvdXRlczogInRydWUiCiAgZW5hYmxlLWVuZHBvaW50LWhlYWx0aC1jaGVja2luZzogInRydWUiCiAgZW5hYmxlLWhlYWx0aC1jaGVja2luZzogInRydWUiCiAgZW5hYmxlLXdlbGwta25vd24taWRlbnRpdGllczogImZhbHNlIgogIGVuYWJsZS1yZW1vdGUtbm9kZS1pZGVudGl0eTogInRydWUiCiAgc3luY2hyb25pemUtazhzLW5vZGVzOiAidHJ1ZSIKICBvcGVyYXRvci1hcGktc2VydmUtYWRkcjogIjEyNy4wLjAuMTo5MjM0IgogIGlwYW06ICJrdWJlcm5ldGVzIgogIGRpc2FibGUtY25wLXN0YXR1cy11cGRhdGVzOiAidHJ1ZSIKICBlbmFibGUtdnRlcDogImZhbHNlIgogIHZ0ZXAtZW5kcG9pbnQ6ICIiCiAgdnRlcC1jaWRyOiAiIgogIHZ0ZXAtbWFzazogIiIKICB2dGVwLW1hYzogIiIKICBlbmFibGUtYmdwLWNvbnRyb2wtcGxhbmU6ICJmYWxzZSIKICBicGYtcm9vdDogIi9zeXMvZnMvYnBmIgogIGNncm91cC1yb290OiAiL3J1bi9jaWxpdW0vY2dyb3VwdjIiCiAgZW5hYmxlLWs4cy10ZXJtaW5hdGluZy1lbmRwb2ludDogInRydWUiCiAgcmVtb3ZlLWNpbGl1bS1ub2RlLXRhaW50czogInRydWUiCiAgc2V0LWNpbGl1bS1pcy11cC1jb25kaXRpb246ICJ0cnVlIgogIHVubWFuYWdlZC1wb2Qtd2F0Y2hlci1pbnRlcnZhbDogIjE1IgogIHRvZnFkbnMtZG5zLXJlamVjdC1yZXNwb25zZS1jb2RlOiAicmVmdXNlZCIKICB0b2ZxZG5zLWVuYWJsZS1kbnMtY29tcHJlc3Npb246ICJ0cnVlIgogIHRvZnFkbnMtZW5kcG9pbnQtbWF4LWlwLXBlci1ob3N0bmFtZTogIjUwIgogIHRvZnFkbnMtaWRsZS1jb25uZWN0aW9uLWdyYWNlLXBlcmlvZDogIjBzIgogIHRvZnFkbnMtbWF4LWRlZmVycmVkLWNvbm5lY3Rpb24tZGVsZXRlczogIjEwMDAwIgogIHRvZnFkbnMtbWluLXR0bDogIjM2MDAiCiAgdG9mcWRucy1wcm94eS1yZXNwb25zZS1tYXgtZGVsYXk6ICIxMDBtcyIKICBhZ2VudC1ub3QtcmVhZHktdGFpbnQta2V5OiAibm9kZS5jaWxpdW0uaW8vYWdlbnQtbm90LXJlYWR5IgotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLWFnZW50L2NsdXN0ZXJyb2xlLnlhbWwKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0KcnVsZXM6Ci0gYXBpR3JvdXBzOgogIC0gbmV0d29ya2luZy5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBuZXR3b3JrcG9saWNpZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBkaXNjb3ZlcnkuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gZW5kcG9pbnRzbGljZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAtIG5hbWVzcGFjZXMKICAtIHNlcnZpY2VzCiAgLSBwb2RzCiAgLSBlbmRwb2ludHMKICAtIG5vZGVzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gYXBpZXh0ZW5zaW9ucy5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBjdXN0b21yZXNvdXJjZWRlZmluaXRpb25zCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAogICMgVGhpcyBpcyB1c2VkIHdoZW4gdmFsaWRhdGluZyBwb2xpY2llcyBpbiBwcmVmbGlnaHQuIFRoaXMgd2lsbCBuZWVkIHRvIHN0YXkKICAjIHVudGlsIHdlIGZpZ3VyZSBvdXQgaG93IHRvIGF2b2lkICJnZXQiIGluc2lkZSB0aGUgcHJlZmxpZ2h0LCBhbmQgdGhlbgogICMgc2hvdWxkIGJlIHJlbW92ZWQgaWRlYWxseS4KICAtIGdldAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bWJncGxvYWRiYWxhbmNlcmlwcG9vbHMKICAtIGNpbGl1bWJncHBlZXJpbmdwb2xpY2llcwogIC0gY2lsaXVtY2x1c3RlcndpZGVlbnZveWNvbmZpZ3MKICAtIGNpbGl1bWNsdXN0ZXJ3aWRlbmV0d29ya3BvbGljaWVzCiAgLSBjaWxpdW1lZ3Jlc3NnYXRld2F5cG9saWNpZXMKICAtIGNpbGl1bWVncmVzc25hdHBvbGljaWVzCiAgLSBjaWxpdW1lbmRwb2ludHMKICAtIGNpbGl1bWVuZHBvaW50c2xpY2VzCiAgLSBjaWxpdW1lbnZveWNvbmZpZ3MKICAtIGNpbGl1bWlkZW50aXRpZXMKICAtIGNpbGl1bWxvY2FscmVkaXJlY3Rwb2xpY2llcwogIC0gY2lsaXVtbmV0d29ya3BvbGljaWVzCiAgLSBjaWxpdW1ub2RlcwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgLSBjaWxpdW1lbmRwb2ludHMKICAtIGNpbGl1bW5vZGVzCiAgdmVyYnM6CiAgLSBjcmVhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICAjIFRvIHN5bmNocm9uaXplIGdhcmJhZ2UgY29sbGVjdGlvbiBvZiBzdWNoIHJlc291cmNlcwogIHJlc291cmNlczoKICAtIGNpbGl1bWlkZW50aXRpZXMKICB2ZXJiczoKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bWVuZHBvaW50cwogIHZlcmJzOgogIC0gZGVsZXRlCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1ub2RlcwogIC0gY2lsaXVtbm9kZXMvc3RhdHVzCiAgdmVyYnM6CiAgLSBnZXQKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcy9zdGF0dXMKICAtIGNpbGl1bWNsdXN0ZXJ3aWRlbmV0d29ya3BvbGljaWVzL3N0YXR1cwogIC0gY2lsaXVtZW5kcG9pbnRzL3N0YXR1cwogIC0gY2lsaXVtZW5kcG9pbnRzCiAgdmVyYnM6CiAgLSBwYXRjaAotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLW9wZXJhdG9yL2NsdXN0ZXJyb2xlLnlhbWwKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKcnVsZXM6Ci0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgLSBwb2RzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCiAgIyB0byBhdXRvbWF0aWNhbGx5IGRlbGV0ZSBbY29yZXxrdWJlXWRucyBwb2RzIHNvIHRoYXQgYXJlIHN0YXJ0aW5nIHRvIGJlaW5nCiAgIyBtYW5hZ2VkIGJ5IENpbGl1bQogIC0gZGVsZXRlCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgLSBub2RlcwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAjIFRvIHJlbW92ZSBub2RlIHRhaW50cwogIC0gbm9kZXMKICAjIFRvIHNldCBOZXR3b3JrVW5hdmFpbGFibGUgZmFsc2Ugb24gc3RhcnR1cAogIC0gbm9kZXMvc3RhdHVzCiAgdmVyYnM6CiAgLSBwYXRjaAotIGFwaUdyb3VwczoKICAtIGRpc2NvdmVyeS5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBlbmRwb2ludHNsaWNlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogICMgdG8gcGVyZm9ybSBMQiBJUCBhbGxvY2F0aW9uIGZvciBCR1AKICAtIHNlcnZpY2VzL3N0YXR1cwogIHZlcmJzOgogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgIyB0byBjaGVjayBhcGlzZXJ2ZXIgY29ubmVjdGl2aXR5CiAgLSBuYW1lc3BhY2VzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgIyB0byBwZXJmb3JtIHRoZSB0cmFuc2xhdGlvbiBvZiBhIENOUCB0aGF0IGNvbnRhaW5zIGBUb0dyb3VwYCB0byBpdHMgZW5kcG9pbnRzCiAgLSBzZXJ2aWNlcwogIC0gZW5kcG9pbnRzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbmV0d29ya3BvbGljaWVzCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcwogIHZlcmJzOgogICMgQ3JlYXRlIGF1dG8tZ2VuZXJhdGVkIENOUHMgYW5kIENDTlBzIGZyb20gUG9saWNpZXMgdGhhdCBoYXZlICd0b0dyb3VwcycKICAtIGNyZWF0ZQogIC0gdXBkYXRlCiAgLSBkZWxldGVjb2xsZWN0aW9uCiAgIyBUbyB1cGRhdGUgdGhlIHN0YXR1cyBvZiB0aGUgQ05QcyBhbmQgQ0NOUHMKICAtIHBhdGNoCiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbmV0d29ya3BvbGljaWVzL3N0YXR1cwogIC0gY2lsaXVtY2x1c3RlcndpZGVuZXR3b3JrcG9saWNpZXMvc3RhdHVzCiAgdmVyYnM6CiAgIyBVcGRhdGUgdGhlIGF1dG8tZ2VuZXJhdGVkIENOUHMgYW5kIENDTlBzIHN0YXR1cy4KICAtIHBhdGNoCiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1lbmRwb2ludHMKICAtIGNpbGl1bWlkZW50aXRpZXMKICB2ZXJiczoKICAjIFRvIHBlcmZvcm0gZ2FyYmFnZSBjb2xsZWN0aW9uIG9mIHN1Y2ggcmVzb3VyY2VzCiAgLSBkZWxldGUKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtaWRlbnRpdGllcwogIHZlcmJzOgogICMgVG8gc3luY2hyb25pemUgZ2FyYmFnZSBjb2xsZWN0aW9uIG9mIHN1Y2ggcmVzb3VyY2VzCiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1ub2RlcwogIHZlcmJzOgogIC0gY3JlYXRlCiAgLSB1cGRhdGUKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKICAgICMgVG8gcGVyZm9ybSBDaWxpdW1Ob2RlIGdhcmJhZ2UgY29sbGVjdG9yCiAgLSBkZWxldGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1ub2Rlcy9zdGF0dXMKICB2ZXJiczoKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bWVuZHBvaW50c2xpY2VzCiAgLSBjaWxpdW1lbnZveWNvbmZpZ3MKICB2ZXJiczoKICAtIGNyZWF0ZQogIC0gdXBkYXRlCiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBkZWxldGUKLSBhcGlHcm91cHM6CiAgLSBhcGlleHRlbnNpb25zLms4cy5pbwogIHJlc291cmNlczoKICAtIGN1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMKICB2ZXJiczoKICAtIGNyZWF0ZQogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGFwaWV4dGVuc2lvbnMuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucwogIHZlcmJzOgogIC0gdXBkYXRlCiAgcmVzb3VyY2VOYW1lczoKICAtIGNpbGl1bWJncGxvYWRiYWxhbmNlcmlwcG9vbHMuY2lsaXVtLmlvCiAgLSBjaWxpdW1iZ3BwZWVyaW5ncG9saWNpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1jbHVzdGVyd2lkZWVudm95Y29uZmlncy5jaWxpdW0uaW8KICAtIGNpbGl1bWNsdXN0ZXJ3aWRlbmV0d29ya3BvbGljaWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtZWdyZXNzZ2F0ZXdheXBvbGljaWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtZWdyZXNzbmF0cG9saWNpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1lbmRwb2ludHMuY2lsaXVtLmlvCiAgLSBjaWxpdW1lbmRwb2ludHNsaWNlcy5jaWxpdW0uaW8KICAtIGNpbGl1bWVudm95Y29uZmlncy5jaWxpdW0uaW8KICAtIGNpbGl1bWV4dGVybmFsd29ya2xvYWRzLmNpbGl1bS5pbwogIC0gY2lsaXVtaWRlbnRpdGllcy5jaWxpdW0uaW8KICAtIGNpbGl1bWxvY2FscmVkaXJlY3Rwb2xpY2llcy5jaWxpdW0uaW8KICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcy5jaWxpdW0uaW8KICAtIGNpbGl1bW5vZGVzLmNpbGl1bS5pbwojIEZvciBjaWxpdW0tb3BlcmF0b3IgcnVubmluZyBpbiBIQSBtb2RlLgojCiMgQ2lsaXVtIG9wZXJhdG9yIHJ1bm5pbmcgaW4gSEEgbW9kZSByZXF1aXJlcyB0aGUgdXNlIG9mIFJlc291cmNlTG9jayBmb3IgTGVhZGVyIEVsZWN0aW9uCiMgYmV0d2VlbiBtdWx0aXBsZSBydW5uaW5nIGluc3RhbmNlcy4KIyBUaGUgcHJlZmVycmVkIHdheSBvZiBkb2luZyB0aGlzIGlzIHRvIHVzZSBMZWFzZXNSZXNvdXJjZUxvY2sgYXMgZWRpdHMgdG8gTGVhc2VzIGFyZSBsZXNzCiMgY29tbW9uIGFuZCBmZXdlciBvYmplY3RzIGluIHRoZSBjbHVzdGVyIHdhdGNoICJhbGwgTGVhc2VzIi4KLSBhcGlHcm91cHM6CiAgLSBjb29yZGluYXRpb24uazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gbGVhc2VzCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIGdldAogIC0gdXBkYXRlCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tYWdlbnQvY2x1c3RlcnJvbGViaW5kaW5nLnlhbWwKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGNpbGl1bQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6ICJjaWxpdW0iCiAgbmFtZXNwYWNlOiBjaWxpdW0KLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1vcGVyYXRvci9jbHVzdGVycm9sZWJpbmRpbmcueWFtbAphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogImNpbGl1bS1vcGVyYXRvciIKICBuYW1lc3BhY2U6IGNpbGl1bQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLWFnZW50L2RhZW1vbnNldC55YW1sCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGFlbW9uU2V0Cm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bQogIG5hbWVzcGFjZTogY2lsaXVtCiAgbGFiZWxzOgogICAgazhzLWFwcDogY2lsaXVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgazhzLWFwcDogY2lsaXVtCiAgdXBkYXRlU3RyYXRlZ3k6CiAgICByb2xsaW5nVXBkYXRlOgogICAgICBtYXhVbmF2YWlsYWJsZTogMgogICAgdHlwZTogUm9sbGluZ1VwZGF0ZQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGFubm90YXRpb25zOgogICAgICAgICMgZW5zdXJlIHBvZHMgcm9sbCB3aGVuIGNvbmZpZ21hcCB1cGRhdGVzCiAgICAgICAgY2lsaXVtLmlvL2NpbGl1bS1jb25maWdtYXAtY2hlY2tzdW06ICI2Yzk4ZDg3NThjZmUzNGVmOWQ4N2FmNjdmOTA2ZWJmZTI1Y2FiMDg0ZjNmNDA2OGViYjkzMzBhYzcxYmZmMmFjIgogICAgICBsYWJlbHM6CiAgICAgICAgazhzLWFwcDogY2lsaXVtCiAgICBzcGVjOgogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IGNpbGl1bS1hZ2VudAogICAgICAgIGltYWdlOiAicXVheS5pby9jaWxpdW0vY2lsaXVtOnYxLjEyLjRAc2hhMjU2OjRiMDc0ZmNmYmE5MzI1YzE4ZTk3NTY5ZWQxOTg4NDY0MzA5YTVlYmY2NGJiYzc5YmVjNmYzZDU4Y2FmY2I4Y2YiCiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBjb21tYW5kOgogICAgICAgIC0gY2lsaXVtLWFnZW50CiAgICAgICAgYXJnczoKICAgICAgICAtIC0tY29uZmlnLWRpcj0vdG1wL2NpbGl1bS9jb25maWctbWFwCiAgICAgICAgc3RhcnR1cFByb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgaG9zdDogIjEyNy4wLjAuMSIKICAgICAgICAgICAgcGF0aDogL2hlYWx0aHoKICAgICAgICAgICAgcG9ydDogOTg3OQogICAgICAgICAgICBzY2hlbWU6IEhUVFAKICAgICAgICAgICAgaHR0cEhlYWRlcnM6CiAgICAgICAgICAgIC0gbmFtZTogImJyaWVmIgogICAgICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAgIGZhaWx1cmVUaHJlc2hvbGQ6IDEwNQogICAgICAgICAgcGVyaW9kU2Vjb25kczogMgogICAgICAgICAgc3VjY2Vzc1RocmVzaG9sZDogMQogICAgICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICBob3N0OiAiMTI3LjAuMC4xIgogICAgICAgICAgICBwYXRoOiAvaGVhbHRoegogICAgICAgICAgICBwb3J0OiA5ODc5CiAgICAgICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgICAgICBodHRwSGVhZGVyczoKICAgICAgICAgICAgLSBuYW1lOiAiYnJpZWYiCiAgICAgICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgICAgcGVyaW9kU2Vjb25kczogMzAKICAgICAgICAgIHN1Y2Nlc3NUaHJlc2hvbGQ6IDEKICAgICAgICAgIGZhaWx1cmVUaHJlc2hvbGQ6IDEwCiAgICAgICAgICB0aW1lb3V0U2Vjb25kczogNQogICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgaG9zdDogIjEyNy4wLjAuMSIKICAgICAgICAgICAgcGF0aDogL2hlYWx0aHoKICAgICAgICAgICAgcG9ydDogOTg3OQogICAgICAgICAgICBzY2hlbWU6IEhUVFAKICAgICAgICAgICAgaHR0cEhlYWRlcnM6CiAgICAgICAgICAgIC0gbmFtZTogImJyaWVmIgogICAgICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDMwCiAgICAgICAgICBzdWNjZXNzVGhyZXNob2xkOiAxCiAgICAgICAgICBmYWlsdXJlVGhyZXNob2xkOiAzCiAgICAgICAgICB0aW1lb3V0U2Vjb25kczogNQogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IEs4U19OT0RFX05BTUUKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgYXBpVmVyc2lvbjogdjEKICAgICAgICAgICAgICBmaWVsZFBhdGg6IHNwZWMubm9kZU5hbWUKICAgICAgICAtIG5hbWU6IENJTElVTV9LOFNfTkFNRVNQQUNFCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgZmllbGRQYXRoOiBtZXRhZGF0YS5uYW1lc3BhY2UKICAgICAgICAtIG5hbWU6IENJTElVTV9DTFVTVEVSTUVTSF9DT05GSUcKICAgICAgICAgIHZhbHVlOiAvdmFyL2xpYi9jaWxpdW0vY2x1c3Rlcm1lc2gvCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQ05JX0NIQUlOSU5HX01PREUKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgIG5hbWU6IGNpbGl1bS1jb25maWcKICAgICAgICAgICAgICBrZXk6IGNuaS1jaGFpbmluZy1tb2RlCiAgICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgICAtIG5hbWU6IENJTElVTV9DVVNUT01fQ05JX0NPTkYKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgIG5hbWU6IGNpbGl1bS1jb25maWcKICAgICAgICAgICAgICBrZXk6IGN1c3RvbS1jbmktY29uZgogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX1NFUlZJQ0VfSE9TVAogICAgICAgICAgdmFsdWU6ICIxNzIuMTguMi4yNTIiCiAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX1NFUlZJQ0VfUE9SVAogICAgICAgICAgdmFsdWU6ICI2NDQzIgogICAgICAgIGxpZmVjeWNsZToKICAgICAgICAgIHBvc3RTdGFydDoKICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgIC0gIi9jbmktaW5zdGFsbC5zaCIKICAgICAgICAgICAgICAtICItLWVuYWJsZS1kZWJ1Zz1mYWxzZSIKICAgICAgICAgICAgICAtICItLWNuaS1leGNsdXNpdmU9dHJ1ZSIKICAgICAgICAgICAgICAtICItLWxvZy1maWxlPS92YXIvcnVuL2NpbGl1bS9jaWxpdW0tY25pLmxvZyIKICAgICAgICAgIHByZVN0b3A6CiAgICAgICAgICAgIGV4ZWM6CiAgICAgICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgICAtIC9jbmktdW5pbnN0YWxsLnNoCiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgICAgIHRlcm1pbmF0aW9uTWVzc2FnZVBvbGljeTogRmFsbGJhY2tUb0xvZ3NPbkVycm9yCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogYnBmLW1hcHMKICAgICAgICAgIG1vdW50UGF0aDogL3N5cy9mcy9icGYKICAgICAgICAgIG1vdW50UHJvcGFnYXRpb246IEJpZGlyZWN0aW9uYWwKICAgICAgICAtIG5hbWU6IGNpbGl1bS1ydW4KICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9ydW4vY2lsaXVtCiAgICAgICAgLSBuYW1lOiBjbmktcGF0aAogICAgICAgICAgbW91bnRQYXRoOiAvaG9zdC9vcHQvY25pL2JpbgogICAgICAgIC0gbmFtZTogZXRjLWNuaS1uZXRkCiAgICAgICAgICBtb3VudFBhdGg6IC9ob3N0L2V0Yy9jbmkvbmV0LmQKICAgICAgICAtIG5hbWU6IGNsdXN0ZXJtZXNoLXNlY3JldHMKICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoCiAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgIC0gbmFtZTogY2lsaXVtLWNvbmZpZy1wYXRoCiAgICAgICAgICBtb3VudFBhdGg6IC90bXAvY2lsaXVtL2NvbmZpZy1tYXAKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgICAjIE5lZWRlZCB0byBiZSBhYmxlIHRvIGxvYWQga2VybmVsIG1vZHVsZXMKICAgICAgICAtIG5hbWU6IGxpYi1tb2R1bGVzCiAgICAgICAgICBtb3VudFBhdGg6IC9saWIvbW9kdWxlcwogICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgICAtIG5hbWU6IHh0YWJsZXMtbG9jawogICAgICAgICAgbW91bnRQYXRoOiAvcnVuL3h0YWJsZXMubG9jawogICAgICBpbml0Q29udGFpbmVyczoKICAgICAgIyBSZXF1aXJlZCB0byBtb3VudCBjZ3JvdXAyIGZpbGVzeXN0ZW0gb24gdGhlIHVuZGVybHlpbmcgS3ViZXJuZXRlcyBub2RlLgogICAgICAjIFdlIHVzZSBuc2VudGVyIGNvbW1hbmQgd2l0aCBob3N0J3MgY2dyb3VwIGFuZCBtb3VudCBuYW1lc3BhY2VzIGVuYWJsZWQuCiAgICAgIC0gbmFtZTogbW91bnQtY2dyb3VwCiAgICAgICAgaW1hZ2U6ICJxdWF5LmlvL2NpbGl1bS9jaWxpdW06djEuMTIuNEBzaGEyNTY6NGIwNzRmY2ZiYTkzMjVjMThlOTc1NjllZDE5ODg0NjQzMDlhNWViZjY0YmJjNzliZWM2ZjNkNThjYWZjYjhjZiIKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IENHUk9VUF9ST09UCiAgICAgICAgICB2YWx1ZTogL3J1bi9jaWxpdW0vY2dyb3VwdjIKICAgICAgICAtIG5hbWU6IEJJTl9QQVRICiAgICAgICAgICB2YWx1ZTogL29wdC9jbmkvYmluCiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIHNoCiAgICAgICAgLSAtZWMKICAgICAgICAjIFRoZSBzdGF0aWNhbGx5IGxpbmtlZCBHbyBwcm9ncmFtIGJpbmFyeSBpcyBpbnZva2VkIHRvIGF2b2lkIGFueQogICAgICAgICMgZGVwZW5kZW5jeSBvbiB1dGlsaXRpZXMgbGlrZSBzaCBhbmQgbW91bnQgdGhhdCBjYW4gYmUgbWlzc2luZyBvbiBjZXJ0YWluCiAgICAgICAgIyBkaXN0cm9zIGluc3RhbGxlZCBvbiB0aGUgdW5kZXJseWluZyBob3N0LiBDb3B5IHRoZSBiaW5hcnkgdG8gdGhlCiAgICAgICAgIyBzYW1lIGRpcmVjdG9yeSB3aGVyZSB3ZSBpbnN0YWxsIGNpbGl1bSBjbmkgcGx1Z2luIHNvIHRoYXQgZXhlYyBwZXJtaXNzaW9ucwogICAgICAgICMgYXJlIGF2YWlsYWJsZS4KICAgICAgICAtIHwKICAgICAgICAgIGNwIC91c3IvYmluL2NpbGl1bS1tb3VudCAvaG9zdGJpbi9jaWxpdW0tbW91bnQ7CiAgICAgICAgICBuc2VudGVyIC0tY2dyb3VwPS9ob3N0cHJvYy8xL25zL2Nncm91cCAtLW1vdW50PS9ob3N0cHJvYy8xL25zL21udCAiJHtCSU5fUEFUSH0vY2lsaXVtLW1vdW50IiAkQ0dST1VQX1JPT1Q7CiAgICAgICAgICBybSAvaG9zdGJpbi9jaWxpdW0tbW91bnQKICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgLSBuYW1lOiBob3N0cHJvYwogICAgICAgICAgbW91bnRQYXRoOiAvaG9zdHByb2MKICAgICAgICAtIG5hbWU6IGNuaS1wYXRoCiAgICAgICAgICBtb3VudFBhdGg6IC9ob3N0YmluCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICAgIC0gbmFtZTogYXBwbHktc3lzY3RsLW92ZXJ3cml0ZXMKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL2NpbGl1bTp2MS4xMi40QHNoYTI1Njo0YjA3NGZjZmJhOTMyNWMxOGU5NzU2OWVkMTk4ODQ2NDMwOWE1ZWJmNjRiYmM3OWJlYzZmM2Q1OGNhZmNiOGNmIgogICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogQklOX1BBVEgKICAgICAgICAgIHZhbHVlOiAvb3B0L2NuaS9iaW4KICAgICAgICBjb21tYW5kOgogICAgICAgIC0gc2gKICAgICAgICAtIC1lYwogICAgICAgICMgVGhlIHN0YXRpY2FsbHkgbGlua2VkIEdvIHByb2dyYW0gYmluYXJ5IGlzIGludm9rZWQgdG8gYXZvaWQgYW55CiAgICAgICAgIyBkZXBlbmRlbmN5IG9uIHV0aWxpdGllcyBsaWtlIHNoIHRoYXQgY2FuIGJlIG1pc3Npbmcgb24gY2VydGFpbgogICAgICAgICMgZGlzdHJvcyBpbnN0YWxsZWQgb24gdGhlIHVuZGVybHlpbmcgaG9zdC4gQ29weSB0aGUgYmluYXJ5IHRvIHRoZQogICAgICAgICMgc2FtZSBkaXJlY3Rvcnkgd2hlcmUgd2UgaW5zdGFsbCBjaWxpdW0gY25pIHBsdWdpbiBzbyB0aGF0IGV4ZWMgcGVybWlzc2lvbnMKICAgICAgICAjIGFyZSBhdmFpbGFibGUuCiAgICAgICAgLSB8CiAgICAgICAgICBjcCAvdXNyL2Jpbi9jaWxpdW0tc3lzY3RsZml4IC9ob3N0YmluL2NpbGl1bS1zeXNjdGxmaXg7CiAgICAgICAgICBuc2VudGVyIC0tbW91bnQ9L2hvc3Rwcm9jLzEvbnMvbW50ICIke0JJTl9QQVRIfS9jaWxpdW0tc3lzY3RsZml4IjsKICAgICAgICAgIHJtIC9ob3N0YmluL2NpbGl1bS1zeXNjdGxmaXgKICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgLSBuYW1lOiBob3N0cHJvYwogICAgICAgICAgbW91bnRQYXRoOiAvaG9zdHByb2MKICAgICAgICAtIG5hbWU6IGNuaS1wYXRoCiAgICAgICAgICBtb3VudFBhdGg6IC9ob3N0YmluCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICAgIC0gbmFtZTogY2xlYW4tY2lsaXVtLXN0YXRlCiAgICAgICAgaW1hZ2U6ICJxdWF5LmlvL2NpbGl1bS9jaWxpdW06djEuMTIuNEBzaGEyNTY6NGIwNzRmY2ZiYTkzMjVjMThlOTc1NjllZDE5ODg0NjQzMDlhNWViZjY0YmJjNzliZWM2ZjNkNThjYWZjYjhjZiIKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSAvaW5pdC1jb250YWluZXIuc2gKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQUxMX1NUQVRFCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAga2V5OiBjbGVhbi1jaWxpdW0tc3RhdGUKICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgIC0gbmFtZTogQ0lMSVVNX0JQRl9TVEFURQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgbmFtZTogY2lsaXVtLWNvbmZpZwogICAgICAgICAgICAgIGtleTogY2xlYW4tY2lsaXVtLWJwZi1zdGF0ZQogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX1NFUlZJQ0VfSE9TVAogICAgICAgICAgdmFsdWU6ICIxNzIuMTguMi4yNTIiCiAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX1NFUlZJQ0VfUE9SVAogICAgICAgICAgdmFsdWU6ICI2NDQzIgogICAgICAgIHRlcm1pbmF0aW9uTWVzc2FnZVBvbGljeTogRmFsbGJhY2tUb0xvZ3NPbkVycm9yCiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGJwZi1tYXBzCiAgICAgICAgICBtb3VudFBhdGg6IC9zeXMvZnMvYnBmCiAgICAgICAgICAjIFJlcXVpcmVkIHRvIG1vdW50IGNncm91cCBmaWxlc3lzdGVtIGZyb20gdGhlIGhvc3QgdG8gY2lsaXVtIGFnZW50IHBvZAogICAgICAgIC0gbmFtZTogY2lsaXVtLWNncm91cAogICAgICAgICAgbW91bnRQYXRoOiAvcnVuL2NpbGl1bS9jZ3JvdXB2MgogICAgICAgICAgbW91bnRQcm9wYWdhdGlvbjogSG9zdFRvQ29udGFpbmVyCiAgICAgICAgLSBuYW1lOiBjaWxpdW0tcnVuCiAgICAgICAgICBtb3VudFBhdGg6IC92YXIvcnVuL2NpbGl1bQogICAgICAgIHJlc291cmNlczoKICAgICAgICAgIHJlcXVlc3RzOgogICAgICAgICAgICBjcHU6IDEwMG0KICAgICAgICAgICAgbWVtb3J5OiAxMDBNaSAjIHdhaXQtZm9yLWt1YmUtcHJveHkKICAgICAgcmVzdGFydFBvbGljeTogQWx3YXlzCiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiBzeXN0ZW0tbm9kZS1jcml0aWNhbAogICAgICBzZXJ2aWNlQWNjb3VudDogImNpbGl1bSIKICAgICAgc2VydmljZUFjY291bnROYW1lOiAiY2lsaXVtIgogICAgICB0ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kczogMQogICAgICBob3N0TmV0d29yazogdHJ1ZQogICAgICBhZmZpbml0eToKICAgICAgICBwb2RBbnRpQWZmaW5pdHk6CiAgICAgICAgICByZXF1aXJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uOgogICAgICAgICAgLSBsYWJlbFNlbGVjdG9yOgogICAgICAgICAgICAgIG1hdGNoTGFiZWxzOgogICAgICAgICAgICAgICAgazhzLWFwcDogY2lsaXVtCiAgICAgICAgICAgIHRvcG9sb2d5S2V5OiBrdWJlcm5ldGVzLmlvL2hvc3RuYW1lCiAgICAgIG5vZGVTZWxlY3RvcjoKICAgICAgICBrdWJlcm5ldGVzLmlvL29zOiBsaW51eAogICAgICB0b2xlcmF0aW9uczoKICAgICAgICAtIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgdm9sdW1lczoKICAgICAgICAjIFRvIGtlZXAgc3RhdGUgYmV0d2VlbiByZXN0YXJ0cyAvIHVwZ3JhZGVzCiAgICAgIC0gbmFtZTogY2lsaXVtLXJ1bgogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL3Zhci9ydW4vY2lsaXVtCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnlPckNyZWF0ZQogICAgICAgICMgVG8ga2VlcCBzdGF0ZSBiZXR3ZWVuIHJlc3RhcnRzIC8gdXBncmFkZXMgZm9yIGJwZiBtYXBzCiAgICAgIC0gbmFtZTogYnBmLW1hcHMKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9zeXMvZnMvYnBmCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnlPckNyZWF0ZQogICAgICAjIFRvIG1vdW50IGNncm91cDIgZmlsZXN5c3RlbSBvbiB0aGUgaG9zdAogICAgICAtIG5hbWU6IGhvc3Rwcm9jCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvcHJvYwogICAgICAgICAgdHlwZTogRGlyZWN0b3J5CiAgICAgICMgVG8ga2VlcCBzdGF0ZSBiZXR3ZWVuIHJlc3RhcnRzIC8gdXBncmFkZXMgZm9yIGNncm91cDIgZmlsZXN5c3RlbQogICAgICAtIG5hbWU6IGNpbGl1bS1jZ3JvdXAKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9ydW4vY2lsaXVtL2Nncm91cHYyCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnlPckNyZWF0ZQogICAgICAjIFRvIGluc3RhbGwgY2lsaXVtIGNuaSBwbHVnaW4gaW4gdGhlIGhvc3QKICAgICAgLSBuYW1lOiBjbmktcGF0aAogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogIC9vcHQvY25pL2JpbgogICAgICAgICAgdHlwZTogRGlyZWN0b3J5T3JDcmVhdGUKICAgICAgICAjIFRvIGluc3RhbGwgY2lsaXVtIGNuaSBjb25maWd1cmF0aW9uIGluIHRoZSBob3N0CiAgICAgIC0gbmFtZTogZXRjLWNuaS1uZXRkCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvZXRjL2NuaS9uZXQuZAogICAgICAgICAgdHlwZTogRGlyZWN0b3J5T3JDcmVhdGUKICAgICAgICAjIFRvIGJlIGFibGUgdG8gbG9hZCBrZXJuZWwgbW9kdWxlcwogICAgICAtIG5hbWU6IGxpYi1tb2R1bGVzCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvbGliL21vZHVsZXMKICAgICAgICAjIFRvIGFjY2VzcyBpcHRhYmxlcyBjb25jdXJyZW50bHkgd2l0aCBvdGhlciBwcm9jZXNzZXMgKGUuZy4ga3ViZS1wcm94eSkKICAgICAgLSBuYW1lOiB4dGFibGVzLWxvY2sKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9ydW4veHRhYmxlcy5sb2NrCiAgICAgICAgICB0eXBlOiBGaWxlT3JDcmVhdGUKICAgICAgICAjIFRvIHJlYWQgdGhlIGNsdXN0ZXJtZXNoIGNvbmZpZ3VyYXRpb24KICAgICAgLSBuYW1lOiBjbHVzdGVybWVzaC1zZWNyZXRzCiAgICAgICAgc2VjcmV0OgogICAgICAgICAgc2VjcmV0TmFtZTogY2lsaXVtLWNsdXN0ZXJtZXNoCiAgICAgICAgICAjIG5vdGU6IHRoZSBsZWFkaW5nIHplcm8gbWVhbnMgdGhpcyBudW1iZXIgaXMgaW4gb2N0YWwgcmVwcmVzZW50YXRpb246IGRvIG5vdCByZW1vdmUgaXQKICAgICAgICAgIGRlZmF1bHRNb2RlOiAwNDAwCiAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgICMgVG8gcmVhZCB0aGUgY29uZmlndXJhdGlvbiBmcm9tIHRoZSBjb25maWcgbWFwCiAgICAgIC0gbmFtZTogY2lsaXVtLWNvbmZpZy1wYXRoCiAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgbmFtZTogY2lsaXVtLWNvbmZpZwotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLW9wZXJhdG9yL2RlcGxveW1lbnQueWFtbAphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCiAgbmFtZXNwYWNlOiBjaWxpdW0KICBsYWJlbHM6CiAgICBpby5jaWxpdW0vYXBwOiBvcGVyYXRvcgogICAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCnNwZWM6CiAgIyBTZWUgZG9jcyBvbiBTZXJ2ZXJDYXBhYmlsaXRpZXMuTGVhc2VzUmVzb3VyY2VMb2NrIGluIGZpbGUgcGtnL2s4cy92ZXJzaW9uL3ZlcnNpb24uZ28KICAjIGZvciBtb3JlIGRldGFpbHMuCiAgcmVwbGljYXM6IDIKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBpby5jaWxpdW0vYXBwOiBvcGVyYXRvcgogICAgICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKICBzdHJhdGVneToKICAgIHJvbGxpbmdVcGRhdGU6CiAgICAgIG1heFN1cmdlOiAxCiAgICAgIG1heFVuYXZhaWxhYmxlOiAxCiAgICB0eXBlOiBSb2xsaW5nVXBkYXRlCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgIyBlbnN1cmUgcG9kcyByb2xsIHdoZW4gY29uZmlnbWFwIHVwZGF0ZXMKICAgICAgICBjaWxpdW0uaW8vY2lsaXVtLWNvbmZpZ21hcC1jaGVja3N1bTogIjZjOThkODc1OGNmZTM0ZWY5ZDg3YWY2N2Y5MDZlYmZlMjVjYWIwODRmM2Y0MDY4ZWJiOTMzMGFjNzFiZmYyYWMiCiAgICAgIGxhYmVsczoKICAgICAgICBpby5jaWxpdW0vYXBwOiBvcGVyYXRvcgogICAgICAgIG5hbWU6IGNpbGl1bS1vcGVyYXRvcgogICAgc3BlYzoKICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL29wZXJhdG9yLWdlbmVyaWM6djEuMTIuNEBzaGEyNTY6MDcxMDg5ZWM1YmNhMWY1NTZhZmI4ZTU0MWQ5OTcyYTBkZmIwOWQxZTI1NTA0YWU2NDJjZWQwMjFlY2JlZGJkMSIKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSBjaWxpdW0tb3BlcmF0b3ItZ2VuZXJpYwogICAgICAgIGFyZ3M6CiAgICAgICAgLSAtLWNvbmZpZy1kaXI9L3RtcC9jaWxpdW0vY29uZmlnLW1hcAogICAgICAgIC0gLS1kZWJ1Zz0kKENJTElVTV9ERUJVRykKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBLOFNfTk9ERV9OQU1FCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgZmllbGRQYXRoOiBzcGVjLm5vZGVOYW1lCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fSzhTX05BTUVTUEFDRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZXNwYWNlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fREVCVUcKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgIGtleTogZGVidWcKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9IT1NUCiAgICAgICAgICB2YWx1ZTogIjE3Mi4xOC4yLjI1MiIKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIGhvc3Q6ICIxMjcuMC4wLjEiCiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDkyMzQKICAgICAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiA2MAogICAgICAgICAgcGVyaW9kU2Vjb25kczogMTAKICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiAzCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogY2lsaXVtLWNvbmZpZy1wYXRoCiAgICAgICAgICBtb3VudFBhdGg6IC90bXAvY2lsaXVtL2NvbmZpZy1tYXAKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgcmVzdGFydFBvbGljeTogQWx3YXlzCiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiBzeXN0ZW0tY2x1c3Rlci1jcml0aWNhbAogICAgICBzZXJ2aWNlQWNjb3VudDogImNpbGl1bS1vcGVyYXRvciIKICAgICAgc2VydmljZUFjY291bnROYW1lOiAiY2lsaXVtLW9wZXJhdG9yIgogICAgICAjIEluIEhBIG1vZGUsIGNpbGl1bS1vcGVyYXRvciBwb2RzIG11c3Qgbm90IGJlIHNjaGVkdWxlZCBvbiB0aGUgc2FtZQogICAgICAjIG5vZGUgYXMgdGhleSB3aWxsIGNsYXNoIHdpdGggZWFjaCBvdGhlci4KICAgICAgYWZmaW5pdHk6CiAgICAgICAgcG9kQW50aUFmZmluaXR5OgogICAgICAgICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgICAgICAgIC0gbGFiZWxTZWxlY3RvcjoKICAgICAgICAgICAgICBtYXRjaExhYmVsczoKICAgICAgICAgICAgICAgIGlvLmNpbGl1bS9hcHA6IG9wZXJhdG9yCiAgICAgICAgICAgIHRvcG9sb2d5S2V5OiBrdWJlcm5ldGVzLmlvL2hvc3RuYW1lCiAgICAgIG5vZGVTZWxlY3RvcjoKICAgICAgICBrdWJlcm5ldGVzLmlvL29zOiBsaW51eAogICAgICB0b2xlcmF0aW9uczoKICAgICAgICAtIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgdm9sdW1lczoKICAgICAgICAjIFRvIHJlYWQgdGhlIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgY29uZmlnIG1hcAogICAgICAtIG5hbWU6IGNpbGl1bS1jb25maWctcGF0aAogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6IGNpbGl1bS1jb25maWcK\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgY29udGFpbmVyczoKICAtIGFyZ3M6CiAgICAtIG1hbmFnZXIKICAgIGVudjoKICAgIC0gbmFtZTogdmlwX2FycAogICAgICB2YWx1ZTogImZhbHNlIgogICAgLSBuYW1lOiBwb3J0CiAgICAgIHZhbHVlOiAiNjQ0MyIKICAgIC0gbmFtZTogdmlwX2ludGVyZmFjZQogICAgICB2YWx1ZTogZW5vMQogICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICB2YWx1ZTogIjMyIgogICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBjcF9uYW1lc3BhY2UKICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IGJncF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBiZ3Bfcm91dGVyaWQKICAgICAgdmFsdWU6IDE3Mi4xOC4yLjIKICAgIC0gbmFtZTogYmdwX2FzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVyYWRkcmVzcwogICAgLSBuYW1lOiBiZ3BfcGVlcnBhc3MKICAgIC0gbmFtZTogYmdwX3BlZXJhcwogICAgICB2YWx1ZTogIjY0NTEyIgogICAgLSBuYW1lOiBiZ3BfcGVlcnMKICAgICAgdmFsdWU6IDE3Mi4xNi4yNTQuMTo2NDUxMjo6ZmFsc2UKICAgIC0gbmFtZTogYWRkcmVzcwogICAgICB2YWx1ZTogMTcyLjE4LjIuMjUyCiAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgIHZhbHVlOiA6MjExMgogICAgaW1hZ2U6IGdoY3IuaW8va3ViZS12aXAva3ViZS12aXA6djAuNS43CiAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgbmFtZToga3ViZS12aXAKICAgIHJlc291cmNlczoge30KICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgIGFkZDoKICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgIC0gTkVUX1JBVwogICAgdm9sdW1lTW91bnRzOgogICAgLSBtb3VudFBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICAgIG5hbWU6IGt1YmVjb25maWcKICBob3N0QWxpYXNlczoKICAtIGhvc3RuYW1lczoKICAgIC0ga3ViZXJuZXRlcwogICAgaXA6IDEyNy4wLjAuMQogIGhvc3ROZXR3b3JrOiB0cnVlCiAgdm9sdW1lczoKICAtIGhvc3RQYXRoOgogICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMvYWRtaW4uY29uZgogICAgbmFtZToga3ViZWNvbmZpZwpzdGF0dXM6IHt9\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=\"/usr/bin/rm\" \"-rf\" \"/var/lib/rancher/k3s/server/manifests/runonce/*\"\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=5min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "3612101493",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node02.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgY29udGFpbmVyczoKICAtIGFyZ3M6CiAgICAtIG1hbmFnZXIKICAgIGVudjoKICAgIC0gbmFtZTogdmlwX2FycAogICAgICB2YWx1ZTogImZhbHNlIgogICAgLSBuYW1lOiBwb3J0CiAgICAgIHZhbHVlOiAiNjQ0MyIKICAgIC0gbmFtZTogdmlwX2ludGVyZmFjZQogICAgICB2YWx1ZTogZW5vMQogICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICB2YWx1ZTogIjMyIgogICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBjcF9uYW1lc3BhY2UKICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IGJncF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBiZ3Bfcm91dGVyaWQKICAgICAgdmFsdWU6IDE3Mi4xOC4yLjIKICAgIC0gbmFtZTogYmdwX2FzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVyYWRkcmVzcwogICAgLSBuYW1lOiBiZ3BfcGVlcnBhc3MKICAgIC0gbmFtZTogYmdwX3BlZXJhcwogICAgICB2YWx1ZTogIjY0NTEyIgogICAgLSBuYW1lOiBiZ3BfcGVlcnMKICAgICAgdmFsdWU6IDE3Mi4xNi4yNTQuMTo2NDUxMjo6ZmFsc2UKICAgIC0gbmFtZTogYWRkcmVzcwogICAgICB2YWx1ZTogMTcyLjE4LjIuMjUyCiAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgIHZhbHVlOiA6MjExMgogICAgaW1hZ2U6IGdoY3IuaW8va3ViZS12aXAva3ViZS12aXA6djAuNS43CiAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgbmFtZToga3ViZS12aXAKICAgIHJlc291cmNlczoge30KICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgIGFkZDoKICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgIC0gTkVUX1JBVwogICAgdm9sdW1lTW91bnRzOgogICAgLSBtb3VudFBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICAgIG5hbWU6IGt1YmVjb25maWcKICBob3N0QWxpYXNlczoKICAtIGhvc3RuYW1lczoKICAgIC0ga3ViZXJuZXRlcwogICAgaXA6IDEyNy4wLjAuMQogIGhvc3ROZXR3b3JrOiB0cnVlCiAgdm9sdW1lczoKICAtIGhvc3RQYXRoOgogICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMvYWRtaW4uY29uZgogICAgbmFtZToga3ViZWNvbmZpZwpzdGF0dXM6IHt9\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=\\\"/usr/bin/rm\\\" \\\"-rf\\\" \\\"/var/lib/rancher/k3s/server/manifests/runonce/*\\\"\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=5min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node03.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgY29udGFpbmVyczoKICAtIGFyZ3M6CiAgICAtIG1hbmFnZXIKICAgIGVudjoKICAgIC0gbmFtZTogdmlwX2FycAogICAgICB2YWx1ZTogImZhbHNlIgogICAgLSBuYW1lOiBwb3J0CiAgICAgIHZhbHVlOiAiNjQ0MyIKICAgIC0gbmFtZTogdmlwX2ludGVyZmFjZQogICAgICB2YWx1ZTogZW5vMQogICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICB2YWx1ZTogIjMyIgogICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBjcF9uYW1lc3BhY2UKICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IGJncF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBiZ3Bfcm91dGVyaWQKICAgICAgdmFsdWU6IDE3Mi4xOC4yLjMKICAgIC0gbmFtZTogYmdwX2FzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVyYWRkcmVzcwogICAgLSBuYW1lOiBiZ3BfcGVlcnBhc3MKICAgIC0gbmFtZTogYmdwX3BlZXJhcwogICAgICB2YWx1ZTogIjY0NTEyIgogICAgLSBuYW1lOiBiZ3BfcGVlcnMKICAgICAgdmFsdWU6IDE3Mi4xNi4yNTQuMTo2NDUxMjo6ZmFsc2UKICAgIC0gbmFtZTogYWRkcmVzcwogICAgICB2YWx1ZTogMTcyLjE4LjIuMjUyCiAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgIHZhbHVlOiA6MjExMgogICAgaW1hZ2U6IGdoY3IuaW8va3ViZS12aXAva3ViZS12aXA6djAuNS43CiAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgbmFtZToga3ViZS12aXAKICAgIHJlc291cmNlczoge30KICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgIGFkZDoKICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgIC0gTkVUX1JBVwogICAgdm9sdW1lTW91bnRzOgogICAgLSBtb3VudFBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICAgIG5hbWU6IGt1YmVjb25maWcKICBob3N0QWxpYXNlczoKICAtIGhvc3RuYW1lczoKICAgIC0ga3ViZXJuZXRlcwogICAgaXA6IDEyNy4wLjAuMQogIGhvc3ROZXR3b3JrOiB0cnVlCiAgdm9sdW1lczoKICAtIGhvc3RQYXRoOgogICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMvYWRtaW4uY29uZgogICAgbmFtZToga3ViZWNvbmZpZwpzdGF0dXM6IHt9\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=\"/usr/bin/rm\" \"-rf\" \"/var/lib/rancher/k3s/server/manifests/runonce/*\"\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=5min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "4167306989",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node03.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgY29udGFpbmVyczoKICAtIGFyZ3M6CiAgICAtIG1hbmFnZXIKICAgIGVudjoKICAgIC0gbmFtZTogdmlwX2FycAogICAgICB2YWx1ZTogImZhbHNlIgogICAgLSBuYW1lOiBwb3J0CiAgICAgIHZhbHVlOiAiNjQ0MyIKICAgIC0gbmFtZTogdmlwX2ludGVyZmFjZQogICAgICB2YWx1ZTogZW5vMQogICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICB2YWx1ZTogIjMyIgogICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBjcF9uYW1lc3BhY2UKICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IGJncF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBiZ3Bfcm91dGVyaWQKICAgICAgdmFsdWU6IDE3Mi4xOC4yLjMKICAgIC0gbmFtZTogYmdwX2FzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVyYWRkcmVzcwogICAgLSBuYW1lOiBiZ3BfcGVlcnBhc3MKICAgIC0gbmFtZTogYmdwX3BlZXJhcwogICAgICB2YWx1ZTogIjY0NTEyIgogICAgLSBuYW1lOiBiZ3BfcGVlcnMKICAgICAgdmFsdWU6IDE3Mi4xNi4yNTQuMTo2NDUxMjo6ZmFsc2UKICAgIC0gbmFtZTogYWRkcmVzcwogICAgICB2YWx1ZTogMTcyLjE4LjIuMjUyCiAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgIHZhbHVlOiA6MjExMgogICAgaW1hZ2U6IGdoY3IuaW8va3ViZS12aXAva3ViZS12aXA6djAuNS43CiAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgbmFtZToga3ViZS12aXAKICAgIHJlc291cmNlczoge30KICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgIGFkZDoKICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgIC0gTkVUX1JBVwogICAgdm9sdW1lTW91bnRzOgogICAgLSBtb3VudFBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICAgIG5hbWU6IGt1YmVjb25maWcKICBob3N0QWxpYXNlczoKICAtIGhvc3RuYW1lczoKICAgIC0ga3ViZXJuZXRlcwogICAgaXA6IDEyNy4wLjAuMQogIGhvc3ROZXR3b3JrOiB0cnVlCiAgdm9sdW1lczoKICAtIGhvc3RQYXRoOgogICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMvYWRtaW4uY29uZgogICAgbmFtZToga3ViZWNvbmZpZwpzdGF0dXM6IHt9\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=\\\"/usr/bin/rm\\\" \\\"-rf\\\" \\\"/var/lib/rancher/k3s/server/manifests/runonce/*\\\"\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=5min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "cilium-install",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "bc6020ed63aa7e626e9f39c175b83a2533da4b3f85413611b7ae07211c24454f",
            "rendered": "---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: cilium\n  labels:\n    pod-security.kubernetes.io/enforce: privileged\n\n---\n# Source: cilium/templates/cilium-agent/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium\"\n  namespace: cilium\n---\n# Source: cilium/templates/cilium-operator/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium-operator\"\n  namespace: cilium\n---\n# Source: cilium/templates/cilium-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cilium-config\n  namespace: cilium\ndata:\n\n  # Identity allocation mode selects how identities are shared between cilium\n  # nodes by setting how they are stored. The options are \"crd\" or \"kvstore\".\n  # - \"crd\" stores identities in kubernetes as CRDs (custom resource definition).\n  #   These can be queried with:\n  #     kubectl get ciliumid\n  # - \"kvstore\" stores identities in an etcd kvstore, that is\n  #   configured below. Cilium versions before 1.6 supported only the kvstore\n  #   backend. Upgrades from these older cilium versions should continue using\n  #   the kvstore by commenting out the identity-allocation-mode below, or\n  #   setting it to \"kvstore\".\n  identity-allocation-mode: crd\n  cilium-endpoint-gc-interval: \"5m0s\"\n  nodes-gc-interval: \"5m0s\"\n  # Disable the usage of CiliumEndpoint CRD\n  disable-endpoint-crd: \"false\"\n\n  # If you want to run cilium in debug mode change this value to true\n  debug: \"false\"\n  # The agent can be put into the following three policy enforcement modes\n  # default, always and never.\n  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes\n  enable-policy: \"default\"\n\n  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4\n  # address.\n  enable-ipv4: \"true\"\n\n  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6\n  # address.\n  enable-ipv6: \"false\"\n  # Users who wish to specify their own custom CNI configuration file must set\n  # custom-cni-conf to \"true\", otherwise Cilium may overwrite the configuration.\n  custom-cni-conf: \"false\"\n  enable-bpf-clock-probe: \"true\"\n  # If you want cilium monitor to aggregate tracing for packets, set this level\n  # to \"low\", \"medium\", or \"maximum\". The higher the level, the less packets\n  # that will be seen in monitor output.\n  monitor-aggregation: medium\n\n  # The monitor aggregation interval governs the typical time between monitor\n  # notification events for each allowed connection.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-interval: 5s\n\n  # The monitor aggregation flags determine which TCP flags which, upon the\n  # first observation, cause monitor notifications to be generated.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-flags: all\n  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic\n  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.\n  bpf-map-dynamic-size-ratio: \"0.0025\"\n  # bpf-policy-map-max specifies the maximum number of entries in endpoint\n  # policy map (per endpoint)\n  bpf-policy-map-max: \"16384\"\n  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,\n  # backend and affinity maps.\n  bpf-lb-map-max: \"65536\"\n  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass\n  # optimization for nodeport reverse NAT handling.\n  bpf-lb-external-clusterip: \"false\"\n\n  # Pre-allocation of map entries allows per-packet latency to be reduced, at\n  # the expense of up-front memory allocation for the entries in the maps. The\n  # default value below will minimize memory usage in the default installation;\n  # users who are sensitive to latency may consider setting this to \"true\".\n  #\n  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore\n  # this option and behave as though it is set to \"true\".\n  #\n  # If this value is modified, then during the next Cilium startup the restore\n  # of existing endpoints and tracking of ongoing connections may be disrupted.\n  # As a result, reply packets may be dropped and the load-balancing decisions\n  # for established connections may change.\n  #\n  # If this option is set to \"false\" during an upgrade from 1.3 or earlier to\n  # 1.4 or later, then it may cause one-time disruptions during the upgrade.\n  preallocate-bpf-maps: \"false\"\n\n  # Regular expression matching compatible Istio sidecar istio-proxy\n  # container image names\n  sidecar-istio-proxy-image: \"cilium/istio_proxy\"\n\n  # Name of the cluster. Only relevant when building a mesh of clusters.\n  cluster-name: chongus\n  # Unique ID of the cluster. Must be unique across all conneted clusters and\n  # in the range of 1 and 255. Only relevant when building a mesh of clusters.\n  cluster-id: \"1\"\n\n  # Encapsulation mode for communication between nodes\n  # Possible values:\n  #   - disabled\n  #   - vxlan (default)\n  #   - geneve\n  tunnel: \"disabled\"\n  # Enables L7 proxy for L7 policy enforcement and visibility\n  enable-l7-proxy: \"true\"\n\n  enable-ipv4-masquerade: \"true\"\n  enable-ipv6-masquerade: \"true\"\n\n  enable-xt-socket-fallback: \"true\"\n  install-iptables-rules: \"true\"\n  install-no-conntrack-iptables-rules: \"false\"\n\n  auto-direct-node-routes: \"true\"\n  enable-local-redirect-policy: \"true\"\n  ipv4-native-routing-cidr: 10.244.0.0/16\n\n  kube-proxy-replacement: \"strict\"\n  kube-proxy-replacement-healthz-bind-address: \"0.0.0.0:10256\"\n  bpf-lb-sock: \"false\"\n  enable-health-check-nodeport: \"true\"\n  node-port-bind-protection: \"true\"\n  enable-auto-protect-node-port-range: \"true\"\n  bpf-lb-mode: \"dsr\"\n  bpf-lb-algorithm: \"maglev\"\n  enable-svc-source-range-check: \"true\"\n  enable-l2-neigh-discovery: \"true\"\n  arping-refresh-period: \"30s\"\n  enable-endpoint-routes: \"true\"\n  enable-endpoint-health-checking: \"true\"\n  enable-health-checking: \"true\"\n  enable-well-known-identities: \"false\"\n  enable-remote-node-identity: \"true\"\n  synchronize-k8s-nodes: \"true\"\n  operator-api-serve-addr: \"127.0.0.1:9234\"\n  ipam: \"kubernetes\"\n  disable-cnp-status-updates: \"true\"\n  enable-vtep: \"false\"\n  vtep-endpoint: \"\"\n  vtep-cidr: \"\"\n  vtep-mask: \"\"\n  vtep-mac: \"\"\n  enable-bgp-control-plane: \"false\"\n  bpf-root: \"/sys/fs/bpf\"\n  cgroup-root: \"/run/cilium/cgroupv2\"\n  enable-k8s-terminating-endpoint: \"true\"\n  remove-cilium-node-taints: \"true\"\n  set-cilium-is-up-condition: \"true\"\n  unmanaged-pod-watcher-interval: \"15\"\n  tofqdns-dns-reject-response-code: \"refused\"\n  tofqdns-enable-dns-compression: \"true\"\n  tofqdns-endpoint-max-ip-per-hostname: \"50\"\n  tofqdns-idle-connection-grace-period: \"0s\"\n  tofqdns-max-deferred-connection-deletes: \"10000\"\n  tofqdns-min-ttl: \"3600\"\n  tofqdns-proxy-response-max-delay: \"100ms\"\n  agent-not-ready-taint-key: \"node.cilium.io/agent-not-ready\"\n---\n# Source: cilium/templates/cilium-agent/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium\nrules:\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  - services\n  - pods\n  - endpoints\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - list\n  - watch\n  # This is used when validating policies in preflight. This will need to stay\n  # until we figure out how to avoid \"get\" inside the preflight, and then\n  # should be removed ideally.\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumbgploadbalancerippools\n  - ciliumbgppeeringpolicies\n  - ciliumclusterwideenvoyconfigs\n  - ciliumclusterwidenetworkpolicies\n  - ciliumegressgatewaypolicies\n  - ciliumegressnatpolicies\n  - ciliumendpoints\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  - ciliumidentities\n  - ciliumlocalredirectpolicies\n  - ciliumnetworkpolicies\n  - ciliumnodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  - ciliumendpoints\n  - ciliumnodes\n  verbs:\n  - create\n- apiGroups:\n  - cilium.io\n  # To synchronize garbage collection of such resources\n  resources:\n  - ciliumidentities\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  verbs:\n  - delete\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  - ciliumnodes/status\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  - ciliumendpoints/status\n  - ciliumendpoints\n  verbs:\n  - patch\n---\n# Source: cilium/templates/cilium-operator/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium-operator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n  - list\n  - watch\n  # to automatically delete [core|kube]dns pods so that are starting to being\n  # managed by Cilium\n  - delete\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # To remove node taints\n  - nodes\n  # To set NetworkUnavailable false on startup\n  - nodes/status\n  verbs:\n  - patch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform LB IP allocation for BGP\n  - services/status\n  verbs:\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  # to check apiserver connectivity\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform the translation of a CNP that contains `ToGroup` to its endpoints\n  - services\n  - endpoints\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies\n  - ciliumclusterwidenetworkpolicies\n  verbs:\n  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'\n  - create\n  - update\n  - deletecollection\n  # To update the status of the CNPs and CCNPs\n  - patch\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  verbs:\n  # Update the auto-generated CNPs and CCNPs status.\n  - patch\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  - ciliumidentities\n  verbs:\n  # To perform garbage collection of such resources\n  - delete\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  verbs:\n  # To synchronize garbage collection of such resources\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n    # To perform CiliumNode garbage collector\n  - delete\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes/status\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n  - delete\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - create\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - update\n  resourceNames:\n  - ciliumbgploadbalancerippools.cilium.io\n  - ciliumbgppeeringpolicies.cilium.io\n  - ciliumclusterwideenvoyconfigs.cilium.io\n  - ciliumclusterwidenetworkpolicies.cilium.io\n  - ciliumegressgatewaypolicies.cilium.io\n  - ciliumegressnatpolicies.cilium.io\n  - ciliumendpoints.cilium.io\n  - ciliumendpointslices.cilium.io\n  - ciliumenvoyconfigs.cilium.io\n  - ciliumexternalworkloads.cilium.io\n  - ciliumidentities.cilium.io\n  - ciliumlocalredirectpolicies.cilium.io\n  - ciliumnetworkpolicies.cilium.io\n  - ciliumnodes.cilium.io\n# For cilium-operator running in HA mode.\n#\n# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election\n# between multiple running instances.\n# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less\n# common and fewer objects in the cluster watch \"all Leases\".\n- apiGroups:\n  - coordination.k8s.io\n  resources:\n  - leases\n  verbs:\n  - create\n  - get\n  - update\n---\n# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium\"\n  namespace: cilium\n---\n# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium-operator\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium-operator\"\n  namespace: cilium\n---\n# Source: cilium/templates/cilium-agent/daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cilium\n  namespace: cilium\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    matchLabels:\n      k8s-app: cilium\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 2\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # ensure pods roll when configmap updates\n        cilium.io/cilium-configmap-checksum: \"6c98d8758cfe34ef9d87af67f906ebfe25cab084f3f4068ebb9330ac71bff2ac\"\n      labels:\n        k8s-app: cilium\n    spec:\n      containers:\n      - name: cilium-agent\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-agent\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        startupProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          failureThreshold: 105\n          periodSeconds: 2\n          successThreshold: 1\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 3\n          timeoutSeconds: 5\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_CLUSTERMESH_CONFIG\n          value: /var/lib/cilium/clustermesh/\n        - name: CILIUM_CNI_CHAINING_MODE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: cni-chaining-mode\n              optional: true\n        - name: CILIUM_CUSTOM_CNI_CONF\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: custom-cni-conf\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        lifecycle:\n          postStart:\n            exec:\n              command:\n              - \"/cni-install.sh\"\n              - \"--enable-debug=false\"\n              - \"--cni-exclusive=true\"\n              - \"--log-file=/var/run/cilium/cilium-cni.log\"\n          preStop:\n            exec:\n              command:\n              - /cni-uninstall.sh\n        securityContext:\n          privileged: true\n        terminationMessagePolicy: FallbackToLogsOnError\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          mountPropagation: Bidirectional\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        - name: cni-path\n          mountPath: /host/opt/cni/bin\n        - name: etc-cni-netd\n          mountPath: /host/etc/cni/net.d\n        - name: clustermesh-secrets\n          mountPath: /var/lib/cilium/clustermesh\n          readOnly: true\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n          # Needed to be able to load kernel modules\n        - name: lib-modules\n          mountPath: /lib/modules\n          readOnly: true\n        - name: xtables-lock\n          mountPath: /run/xtables.lock\n      initContainers:\n      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.\n      # We use nsenter command with host's cgroup and mount namespaces enabled.\n      - name: mount-cgroup\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: CGROUP_ROOT\n          value: /run/cilium/cgroupv2\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh and mount that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-mount /hostbin/cilium-mount;\n          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt \"${BIN_PATH}/cilium-mount\" $CGROUP_ROOT;\n          rm /hostbin/cilium-mount\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n      - name: apply-sysctl-overwrites\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;\n          nsenter --mount=/hostproc/1/ns/mnt \"${BIN_PATH}/cilium-sysctlfix\";\n          rm /hostbin/cilium-sysctlfix\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n      - name: clean-cilium-state\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - /init-container.sh\n        env:\n        - name: CILIUM_ALL_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-state\n              optional: true\n        - name: CILIUM_BPF_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-bpf-state\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Required to mount cgroup filesystem from the host to cilium agent pod\n        - name: cilium-cgroup\n          mountPath: /run/cilium/cgroupv2\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi # wait-for-kube-proxy\n      restartPolicy: Always\n      priorityClassName: system-node-critical\n      serviceAccount: \"cilium\"\n      serviceAccountName: \"cilium\"\n      terminationGracePeriodSeconds: 1\n      hostNetwork: true\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                k8s-app: cilium\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To keep state between restarts / upgrades\n      - name: cilium-run\n        hostPath:\n          path: /var/run/cilium\n          type: DirectoryOrCreate\n        # To keep state between restarts / upgrades for bpf maps\n      - name: bpf-maps\n        hostPath:\n          path: /sys/fs/bpf\n          type: DirectoryOrCreate\n      # To mount cgroup2 filesystem on the host\n      - name: hostproc\n        hostPath:\n          path: /proc\n          type: Directory\n      # To keep state between restarts / upgrades for cgroup2 filesystem\n      - name: cilium-cgroup\n        hostPath:\n          path: /run/cilium/cgroupv2\n          type: DirectoryOrCreate\n      # To install cilium cni plugin in the host\n      - name: cni-path\n        hostPath:\n          path:  /opt/cni/bin\n          type: DirectoryOrCreate\n        # To install cilium cni configuration in the host\n      - name: etc-cni-netd\n        hostPath:\n          path: /etc/cni/net.d\n          type: DirectoryOrCreate\n        # To be able to load kernel modules\n      - name: lib-modules\n        hostPath:\n          path: /lib/modules\n        # To access iptables concurrently with other processes (e.g. kube-proxy)\n      - name: xtables-lock\n        hostPath:\n          path: /run/xtables.lock\n          type: FileOrCreate\n        # To read the clustermesh configuration\n      - name: clustermesh-secrets\n        secret:\n          secretName: cilium-clustermesh\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          optional: true\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n---\n# Source: cilium/templates/cilium-operator/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cilium-operator\n  namespace: cilium\n  labels:\n    io.cilium/app: operator\n    name: cilium-operator\nspec:\n  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go\n  # for more details.\n  replicas: 2\n  selector:\n    matchLabels:\n      io.cilium/app: operator\n      name: cilium-operator\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # ensure pods roll when configmap updates\n        cilium.io/cilium-configmap-checksum: \"6c98d8758cfe34ef9d87af67f906ebfe25cab084f3f4068ebb9330ac71bff2ac\"\n      labels:\n        io.cilium/app: operator\n        name: cilium-operator\n    spec:\n      containers:\n      - name: cilium-operator\n        image: \"quay.io/cilium/operator-generic:v1.12.4@sha256:071089ec5bca1f556afb8e541d9972a0dfb09d1e25504ae642ced021ecbedbd1\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-operator-generic\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        - --debug=$(CILIUM_DEBUG)\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              key: debug\n              name: cilium-config\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9234\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          timeoutSeconds: 3\n        volumeMounts:\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n        terminationMessagePolicy: FallbackToLogsOnError\n      hostNetwork: true\n      restartPolicy: Always\n      priorityClassName: system-cluster-critical\n      serviceAccount: \"cilium-operator\"\n      serviceAccountName: \"cilium-operator\"\n      # In HA mode, cilium-operator pods must not be scheduled on the same\n      # node as they will clash with each other.\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                io.cilium/app: operator\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n",
            "template": "---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: cilium\n  labels:\n    pod-security.kubernetes.io/enforce: privileged\n\n---\n# Source: cilium/templates/cilium-agent/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium\"\n  namespace: cilium\n---\n# Source: cilium/templates/cilium-operator/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium-operator\"\n  namespace: cilium\n---\n# Source: cilium/templates/cilium-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cilium-config\n  namespace: cilium\ndata:\n\n  # Identity allocation mode selects how identities are shared between cilium\n  # nodes by setting how they are stored. The options are \"crd\" or \"kvstore\".\n  # - \"crd\" stores identities in kubernetes as CRDs (custom resource definition).\n  #   These can be queried with:\n  #     kubectl get ciliumid\n  # - \"kvstore\" stores identities in an etcd kvstore, that is\n  #   configured below. Cilium versions before 1.6 supported only the kvstore\n  #   backend. Upgrades from these older cilium versions should continue using\n  #   the kvstore by commenting out the identity-allocation-mode below, or\n  #   setting it to \"kvstore\".\n  identity-allocation-mode: crd\n  cilium-endpoint-gc-interval: \"5m0s\"\n  nodes-gc-interval: \"5m0s\"\n  # Disable the usage of CiliumEndpoint CRD\n  disable-endpoint-crd: \"false\"\n\n  # If you want to run cilium in debug mode change this value to true\n  debug: \"false\"\n  # The agent can be put into the following three policy enforcement modes\n  # default, always and never.\n  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes\n  enable-policy: \"default\"\n\n  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4\n  # address.\n  enable-ipv4: \"true\"\n\n  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6\n  # address.\n  enable-ipv6: \"false\"\n  # Users who wish to specify their own custom CNI configuration file must set\n  # custom-cni-conf to \"true\", otherwise Cilium may overwrite the configuration.\n  custom-cni-conf: \"false\"\n  enable-bpf-clock-probe: \"true\"\n  # If you want cilium monitor to aggregate tracing for packets, set this level\n  # to \"low\", \"medium\", or \"maximum\". The higher the level, the less packets\n  # that will be seen in monitor output.\n  monitor-aggregation: medium\n\n  # The monitor aggregation interval governs the typical time between monitor\n  # notification events for each allowed connection.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-interval: 5s\n\n  # The monitor aggregation flags determine which TCP flags which, upon the\n  # first observation, cause monitor notifications to be generated.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-flags: all\n  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic\n  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.\n  bpf-map-dynamic-size-ratio: \"0.0025\"\n  # bpf-policy-map-max specifies the maximum number of entries in endpoint\n  # policy map (per endpoint)\n  bpf-policy-map-max: \"16384\"\n  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,\n  # backend and affinity maps.\n  bpf-lb-map-max: \"65536\"\n  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass\n  # optimization for nodeport reverse NAT handling.\n  bpf-lb-external-clusterip: \"false\"\n\n  # Pre-allocation of map entries allows per-packet latency to be reduced, at\n  # the expense of up-front memory allocation for the entries in the maps. The\n  # default value below will minimize memory usage in the default installation;\n  # users who are sensitive to latency may consider setting this to \"true\".\n  #\n  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore\n  # this option and behave as though it is set to \"true\".\n  #\n  # If this value is modified, then during the next Cilium startup the restore\n  # of existing endpoints and tracking of ongoing connections may be disrupted.\n  # As a result, reply packets may be dropped and the load-balancing decisions\n  # for established connections may change.\n  #\n  # If this option is set to \"false\" during an upgrade from 1.3 or earlier to\n  # 1.4 or later, then it may cause one-time disruptions during the upgrade.\n  preallocate-bpf-maps: \"false\"\n\n  # Regular expression matching compatible Istio sidecar istio-proxy\n  # container image names\n  sidecar-istio-proxy-image: \"cilium/istio_proxy\"\n\n  # Name of the cluster. Only relevant when building a mesh of clusters.\n  cluster-name: ${cluster_name}\n  # Unique ID of the cluster. Must be unique across all conneted clusters and\n  # in the range of 1 and 255. Only relevant when building a mesh of clusters.\n  cluster-id: \"1\"\n\n  # Encapsulation mode for communication between nodes\n  # Possible values:\n  #   - disabled\n  #   - vxlan (default)\n  #   - geneve\n  tunnel: \"disabled\"\n  # Enables L7 proxy for L7 policy enforcement and visibility\n  enable-l7-proxy: \"true\"\n\n  enable-ipv4-masquerade: \"true\"\n  enable-ipv6-masquerade: \"true\"\n\n  enable-xt-socket-fallback: \"true\"\n  install-iptables-rules: \"true\"\n  install-no-conntrack-iptables-rules: \"false\"\n\n  auto-direct-node-routes: \"true\"\n  enable-local-redirect-policy: \"true\"\n  ipv4-native-routing-cidr: 10.244.0.0/16\n\n  kube-proxy-replacement: \"strict\"\n  kube-proxy-replacement-healthz-bind-address: \"0.0.0.0:10256\"\n  bpf-lb-sock: \"false\"\n  enable-health-check-nodeport: \"true\"\n  node-port-bind-protection: \"true\"\n  enable-auto-protect-node-port-range: \"true\"\n  bpf-lb-mode: \"dsr\"\n  bpf-lb-algorithm: \"maglev\"\n  enable-svc-source-range-check: \"true\"\n  enable-l2-neigh-discovery: \"true\"\n  arping-refresh-period: \"30s\"\n  enable-endpoint-routes: \"true\"\n  enable-endpoint-health-checking: \"true\"\n  enable-health-checking: \"true\"\n  enable-well-known-identities: \"false\"\n  enable-remote-node-identity: \"true\"\n  synchronize-k8s-nodes: \"true\"\n  operator-api-serve-addr: \"127.0.0.1:9234\"\n  ipam: \"kubernetes\"\n  disable-cnp-status-updates: \"true\"\n  enable-vtep: \"false\"\n  vtep-endpoint: \"\"\n  vtep-cidr: \"\"\n  vtep-mask: \"\"\n  vtep-mac: \"\"\n  enable-bgp-control-plane: \"false\"\n  bpf-root: \"/sys/fs/bpf\"\n  cgroup-root: \"/run/cilium/cgroupv2\"\n  enable-k8s-terminating-endpoint: \"true\"\n  remove-cilium-node-taints: \"true\"\n  set-cilium-is-up-condition: \"true\"\n  unmanaged-pod-watcher-interval: \"15\"\n  tofqdns-dns-reject-response-code: \"refused\"\n  tofqdns-enable-dns-compression: \"true\"\n  tofqdns-endpoint-max-ip-per-hostname: \"50\"\n  tofqdns-idle-connection-grace-period: \"0s\"\n  tofqdns-max-deferred-connection-deletes: \"10000\"\n  tofqdns-min-ttl: \"3600\"\n  tofqdns-proxy-response-max-delay: \"100ms\"\n  agent-not-ready-taint-key: \"node.cilium.io/agent-not-ready\"\n---\n# Source: cilium/templates/cilium-agent/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium\nrules:\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  - services\n  - pods\n  - endpoints\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - list\n  - watch\n  # This is used when validating policies in preflight. This will need to stay\n  # until we figure out how to avoid \"get\" inside the preflight, and then\n  # should be removed ideally.\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumbgploadbalancerippools\n  - ciliumbgppeeringpolicies\n  - ciliumclusterwideenvoyconfigs\n  - ciliumclusterwidenetworkpolicies\n  - ciliumegressgatewaypolicies\n  - ciliumegressnatpolicies\n  - ciliumendpoints\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  - ciliumidentities\n  - ciliumlocalredirectpolicies\n  - ciliumnetworkpolicies\n  - ciliumnodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  - ciliumendpoints\n  - ciliumnodes\n  verbs:\n  - create\n- apiGroups:\n  - cilium.io\n  # To synchronize garbage collection of such resources\n  resources:\n  - ciliumidentities\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  verbs:\n  - delete\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  - ciliumnodes/status\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  - ciliumendpoints/status\n  - ciliumendpoints\n  verbs:\n  - patch\n---\n# Source: cilium/templates/cilium-operator/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium-operator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n  - list\n  - watch\n  # to automatically delete [core|kube]dns pods so that are starting to being\n  # managed by Cilium\n  - delete\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # To remove node taints\n  - nodes\n  # To set NetworkUnavailable false on startup\n  - nodes/status\n  verbs:\n  - patch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform LB IP allocation for BGP\n  - services/status\n  verbs:\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  # to check apiserver connectivity\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform the translation of a CNP that contains `ToGroup` to its endpoints\n  - services\n  - endpoints\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies\n  - ciliumclusterwidenetworkpolicies\n  verbs:\n  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'\n  - create\n  - update\n  - deletecollection\n  # To update the status of the CNPs and CCNPs\n  - patch\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  verbs:\n  # Update the auto-generated CNPs and CCNPs status.\n  - patch\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  - ciliumidentities\n  verbs:\n  # To perform garbage collection of such resources\n  - delete\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  verbs:\n  # To synchronize garbage collection of such resources\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n    # To perform CiliumNode garbage collector\n  - delete\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes/status\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n  - delete\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - create\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - update\n  resourceNames:\n  - ciliumbgploadbalancerippools.cilium.io\n  - ciliumbgppeeringpolicies.cilium.io\n  - ciliumclusterwideenvoyconfigs.cilium.io\n  - ciliumclusterwidenetworkpolicies.cilium.io\n  - ciliumegressgatewaypolicies.cilium.io\n  - ciliumegressnatpolicies.cilium.io\n  - ciliumendpoints.cilium.io\n  - ciliumendpointslices.cilium.io\n  - ciliumenvoyconfigs.cilium.io\n  - ciliumexternalworkloads.cilium.io\n  - ciliumidentities.cilium.io\n  - ciliumlocalredirectpolicies.cilium.io\n  - ciliumnetworkpolicies.cilium.io\n  - ciliumnodes.cilium.io\n# For cilium-operator running in HA mode.\n#\n# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election\n# between multiple running instances.\n# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less\n# common and fewer objects in the cluster watch \"all Leases\".\n- apiGroups:\n  - coordination.k8s.io\n  resources:\n  - leases\n  verbs:\n  - create\n  - get\n  - update\n---\n# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium\"\n  namespace: cilium\n---\n# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium-operator\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium-operator\"\n  namespace: cilium\n---\n# Source: cilium/templates/cilium-agent/daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cilium\n  namespace: cilium\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    matchLabels:\n      k8s-app: cilium\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 2\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # ensure pods roll when configmap updates\n        cilium.io/cilium-configmap-checksum: \"6c98d8758cfe34ef9d87af67f906ebfe25cab084f3f4068ebb9330ac71bff2ac\"\n      labels:\n        k8s-app: cilium\n    spec:\n      containers:\n      - name: cilium-agent\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-agent\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        startupProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          failureThreshold: 105\n          periodSeconds: 2\n          successThreshold: 1\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 3\n          timeoutSeconds: 5\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_CLUSTERMESH_CONFIG\n          value: /var/lib/cilium/clustermesh/\n        - name: CILIUM_CNI_CHAINING_MODE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: cni-chaining-mode\n              optional: true\n        - name: CILIUM_CUSTOM_CNI_CONF\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: custom-cni-conf\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        lifecycle:\n          postStart:\n            exec:\n              command:\n              - \"/cni-install.sh\"\n              - \"--enable-debug=false\"\n              - \"--cni-exclusive=true\"\n              - \"--log-file=/var/run/cilium/cilium-cni.log\"\n          preStop:\n            exec:\n              command:\n              - /cni-uninstall.sh\n        securityContext:\n          privileged: true\n        terminationMessagePolicy: FallbackToLogsOnError\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          mountPropagation: Bidirectional\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        - name: cni-path\n          mountPath: /host/opt/cni/bin\n        - name: etc-cni-netd\n          mountPath: /host/etc/cni/net.d\n        - name: clustermesh-secrets\n          mountPath: /var/lib/cilium/clustermesh\n          readOnly: true\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n          # Needed to be able to load kernel modules\n        - name: lib-modules\n          mountPath: /lib/modules\n          readOnly: true\n        - name: xtables-lock\n          mountPath: /run/xtables.lock\n      initContainers:\n      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.\n      # We use nsenter command with host's cgroup and mount namespaces enabled.\n      - name: mount-cgroup\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: CGROUP_ROOT\n          value: /run/cilium/cgroupv2\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh and mount that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-mount /hostbin/cilium-mount;\n          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt \"$${BIN_PATH}/cilium-mount\" $CGROUP_ROOT;\n          rm /hostbin/cilium-mount\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n      - name: apply-sysctl-overwrites\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;\n          nsenter --mount=/hostproc/1/ns/mnt \"$${BIN_PATH}/cilium-sysctlfix\";\n          rm /hostbin/cilium-sysctlfix\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n      - name: clean-cilium-state\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - /init-container.sh\n        env:\n        - name: CILIUM_ALL_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-state\n              optional: true\n        - name: CILIUM_BPF_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-bpf-state\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Required to mount cgroup filesystem from the host to cilium agent pod\n        - name: cilium-cgroup\n          mountPath: /run/cilium/cgroupv2\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi # wait-for-kube-proxy\n      restartPolicy: Always\n      priorityClassName: system-node-critical\n      serviceAccount: \"cilium\"\n      serviceAccountName: \"cilium\"\n      terminationGracePeriodSeconds: 1\n      hostNetwork: true\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                k8s-app: cilium\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To keep state between restarts / upgrades\n      - name: cilium-run\n        hostPath:\n          path: /var/run/cilium\n          type: DirectoryOrCreate\n        # To keep state between restarts / upgrades for bpf maps\n      - name: bpf-maps\n        hostPath:\n          path: /sys/fs/bpf\n          type: DirectoryOrCreate\n      # To mount cgroup2 filesystem on the host\n      - name: hostproc\n        hostPath:\n          path: /proc\n          type: Directory\n      # To keep state between restarts / upgrades for cgroup2 filesystem\n      - name: cilium-cgroup\n        hostPath:\n          path: /run/cilium/cgroupv2\n          type: DirectoryOrCreate\n      # To install cilium cni plugin in the host\n      - name: cni-path\n        hostPath:\n          path:  /opt/cni/bin\n          type: DirectoryOrCreate\n        # To install cilium cni configuration in the host\n      - name: etc-cni-netd\n        hostPath:\n          path: /etc/cni/net.d\n          type: DirectoryOrCreate\n        # To be able to load kernel modules\n      - name: lib-modules\n        hostPath:\n          path: /lib/modules\n        # To access iptables concurrently with other processes (e.g. kube-proxy)\n      - name: xtables-lock\n        hostPath:\n          path: /run/xtables.lock\n          type: FileOrCreate\n        # To read the clustermesh configuration\n      - name: clustermesh-secrets\n        secret:\n          secretName: cilium-clustermesh\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          optional: true\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n---\n# Source: cilium/templates/cilium-operator/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cilium-operator\n  namespace: cilium\n  labels:\n    io.cilium/app: operator\n    name: cilium-operator\nspec:\n  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go\n  # for more details.\n  replicas: 2\n  selector:\n    matchLabels:\n      io.cilium/app: operator\n      name: cilium-operator\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # ensure pods roll when configmap updates\n        cilium.io/cilium-configmap-checksum: \"6c98d8758cfe34ef9d87af67f906ebfe25cab084f3f4068ebb9330ac71bff2ac\"\n      labels:\n        io.cilium/app: operator\n        name: cilium-operator\n    spec:\n      containers:\n      - name: cilium-operator\n        image: \"quay.io/cilium/operator-generic:v1.12.4@sha256:071089ec5bca1f556afb8e541d9972a0dfb09d1e25504ae642ced021ecbedbd1\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-operator-generic\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        - --debug=$(CILIUM_DEBUG)\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              key: debug\n              name: cilium-config\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9234\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          timeoutSeconds: 3\n        volumeMounts:\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n        terminationMessagePolicy: FallbackToLogsOnError\n      hostNetwork: true\n      restartPolicy: Always\n      priorityClassName: system-cluster-critical\n      serviceAccount: \"cilium-operator\"\n      serviceAccountName: \"cilium-operator\"\n      # In HA mode, cilium-operator pods must not be scheduled on the same\n      # node as they will clash with each other.\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                io.cilium/app: operator\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "cluster_name": "chongus"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "k3s-config",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "2eb4f53e577f70797239eb77e30fd08b667a9a4a3fdfa50b321d8e1a283b1a62",
            "rendered": "---\ntls-san:\n  - api.cho.rtrox.com\n  - 172.18.2.252\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
            "template": "---\ntls-san:\n  - ${api_fqdn}\n  - ${api_vip}\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
            "vars": {
              "api_fqdn": "api.cho.rtrox.com",
              "api_vip": "172.18.2.252"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "kube-vip",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "6fdbc47757c0a393b64bfd9aac675610afaba5ae27ecd237154ab5e3a65251c9",
            "rendered": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: eno1\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: 172.18.2.1\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: 172.18.2.252\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}",
            "template": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: ${api_vip_iface}\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: ${router_id}\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: ${api_vip}\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}",
            "vars": {
              "api_vip": "172.18.2.252",
              "api_vip_iface": "eno1",
              "cluster_domain": "cho.rtrox.com",
              "router_id": "172.18.2.1"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "3f33125fc2f94b28e5d71a840ce04cf0aec1d979226c85069f2ccdd66fc803bd",
            "rendered": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: eno1\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: 172.18.2.2\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: 172.18.2.252\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}",
            "template": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: ${api_vip_iface}\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: ${router_id}\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: ${api_vip}\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}",
            "vars": {
              "api_vip": "172.18.2.252",
              "api_vip_iface": "eno1",
              "cluster_domain": "cho.rtrox.com",
              "router_id": "172.18.2.2"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "d5323026c15ca9f5f0663c2ec3947eecd87a7ec66e710e5497ce9203a566d7dc",
            "rendered": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: eno1\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: 172.18.2.3\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: 172.18.2.252\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}",
            "template": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: ${api_vip_iface}\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: ${router_id}\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: ${api_vip}\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}",
            "vars": {
              "api_vip": "172.18.2.252",
              "api_vip_iface": "eno1",
              "cluster_domain": "cho.rtrox.com",
              "router_id": "172.18.2.3"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_group",
      "name": "flatcar-install",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node01",
            "metadata": {},
            "name": "flatcar-install-node01",
            "profile": "flatcar-install-node01",
            "selector": {
              "mac": "44:a8:42:3e:b9:27"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node02",
            "metadata": {},
            "name": "flatcar-install-node02",
            "profile": "flatcar-install-node02",
            "selector": {
              "mac": "b0:83:fe:cf:91:f7"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node03",
            "metadata": {},
            "name": "flatcar-install-node03",
            "profile": "flatcar-install-node03",
            "selector": {
              "mac": "b0:83:fe:cf:d7:ee"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_group",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node01",
            "metadata": {},
            "name": "worker-node01",
            "profile": "worker-node01",
            "selector": {
              "node": "node01",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node02",
            "metadata": {},
            "name": "worker-node02",
            "profile": "worker-node02",
            "selector": {
              "node": "node02",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node03",
            "metadata": {},
            "name": "worker-node03",
            "profile": "worker-node03",
            "selector": {
              "node": "node03",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_profile",
      "name": "flatcar-install",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node01",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node01",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLMYrDMBCF4V6nmPXCdpLsdsHkImkkzSRWkDRBMzb27UNI0qR58OD7f398zM3HIAtY2k1aewFrO2k/YBphWFTv/97XoGmJvDvJ6Lp23l3i6vO1Zc3cTixzbqKhFMK/xkjzc8ZpAMvwUe4m3MylBE2h27eHswGwCB5p84Lh9fNXtCJtASsIqRYycohSTVqgU2RW8wgAAP//FWpKkcgAAAA=\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node01-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node02",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node02",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vS9SgUX8RLkhltJMlIZlratxdRL14++OD3//3xMTcfg8xgaTNp6QWs7aR9h/8Rhln1fvS+Bk1z5M1JRte18+YSV5+vLWvmdmKZchMNpRD+NUaanjMeBrAMH+Vuws1cStAUun17OBsAi+CRVi8YXj9/RQvSGrCCkGohI7so1aQFOkVmNY8AAAD//1sM4inIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node02-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node03",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node03",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vSxZtQfBEvSWa0kSQjmWlp315EvXj54IPf//fHx9x8DDKDpc2kpRewtpP2Hf5HGGbV+9H7GjTNkTcnGV3XzptLXH2+tqyZ24llyk00lEL41xhpes54GMAyfJS7CTdzKUFT6Pbt4WwALIJHWr1geP38FS1Ia8AKQqqFjOyiVJMW6BSZ1TwCAAD//14sVffIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node03-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_profile",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node01",
            "initrd": null,
            "kernel": null,
            "name": "worker-node01",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node01.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgY29udGFpbmVyczoKICAtIGFyZ3M6CiAgICAtIG1hbmFnZXIKICAgIGVudjoKICAgIC0gbmFtZTogdmlwX2FycAogICAgICB2YWx1ZTogImZhbHNlIgogICAgLSBuYW1lOiBwb3J0CiAgICAgIHZhbHVlOiAiNjQ0MyIKICAgIC0gbmFtZTogdmlwX2ludGVyZmFjZQogICAgICB2YWx1ZTogZW5vMQogICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICB2YWx1ZTogIjMyIgogICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBjcF9uYW1lc3BhY2UKICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IGJncF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBiZ3Bfcm91dGVyaWQKICAgICAgdmFsdWU6IDE3Mi4xOC4yLjEKICAgIC0gbmFtZTogYmdwX2FzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVyYWRkcmVzcwogICAgLSBuYW1lOiBiZ3BfcGVlcnBhc3MKICAgIC0gbmFtZTogYmdwX3BlZXJhcwogICAgICB2YWx1ZTogIjY0NTEyIgogICAgLSBuYW1lOiBiZ3BfcGVlcnMKICAgICAgdmFsdWU6IDE3Mi4xNi4yNTQuMTo2NDUxMjo6ZmFsc2UKICAgIC0gbmFtZTogYWRkcmVzcwogICAgICB2YWx1ZTogMTcyLjE4LjIuMjUyCiAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgIHZhbHVlOiA6MjExMgogICAgaW1hZ2U6IGdoY3IuaW8va3ViZS12aXAva3ViZS12aXA6djAuNS43CiAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgbmFtZToga3ViZS12aXAKICAgIHJlc291cmNlczoge30KICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgIGFkZDoKICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgIC0gTkVUX1JBVwogICAgdm9sdW1lTW91bnRzOgogICAgLSBtb3VudFBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICAgIG5hbWU6IGt1YmVjb25maWcKICBob3N0QWxpYXNlczoKICAtIGhvc3RuYW1lczoKICAgIC0ga3ViZXJuZXRlcwogICAgaXA6IDEyNy4wLjAuMQogIGhvc3ROZXR3b3JrOiB0cnVlCiAgdm9sdW1lczoKICAtIGhvc3RQYXRoOgogICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMvYWRtaW4uY29uZgogICAgbmFtZToga3ViZWNvbmZpZwpzdGF0dXM6IHt9\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC=--cluster-init\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=\\\"/usr/bin/rm\\\" \\\"-rf\\\" \\\"/var/lib/rancher/k3s/server/manifests/runonce/*\\\"\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=5min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node02",
            "initrd": null,
            "kernel": null,
            "name": "worker-node02",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node02.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgY29udGFpbmVyczoKICAtIGFyZ3M6CiAgICAtIG1hbmFnZXIKICAgIGVudjoKICAgIC0gbmFtZTogdmlwX2FycAogICAgICB2YWx1ZTogImZhbHNlIgogICAgLSBuYW1lOiBwb3J0CiAgICAgIHZhbHVlOiAiNjQ0MyIKICAgIC0gbmFtZTogdmlwX2ludGVyZmFjZQogICAgICB2YWx1ZTogZW5vMQogICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICB2YWx1ZTogIjMyIgogICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBjcF9uYW1lc3BhY2UKICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IGJncF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBiZ3Bfcm91dGVyaWQKICAgICAgdmFsdWU6IDE3Mi4xOC4yLjIKICAgIC0gbmFtZTogYmdwX2FzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVyYWRkcmVzcwogICAgLSBuYW1lOiBiZ3BfcGVlcnBhc3MKICAgIC0gbmFtZTogYmdwX3BlZXJhcwogICAgICB2YWx1ZTogIjY0NTEyIgogICAgLSBuYW1lOiBiZ3BfcGVlcnMKICAgICAgdmFsdWU6IDE3Mi4xNi4yNTQuMTo2NDUxMjo6ZmFsc2UKICAgIC0gbmFtZTogYWRkcmVzcwogICAgICB2YWx1ZTogMTcyLjE4LjIuMjUyCiAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgIHZhbHVlOiA6MjExMgogICAgaW1hZ2U6IGdoY3IuaW8va3ViZS12aXAva3ViZS12aXA6djAuNS43CiAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgbmFtZToga3ViZS12aXAKICAgIHJlc291cmNlczoge30KICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgIGFkZDoKICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgIC0gTkVUX1JBVwogICAgdm9sdW1lTW91bnRzOgogICAgLSBtb3VudFBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICAgIG5hbWU6IGt1YmVjb25maWcKICBob3N0QWxpYXNlczoKICAtIGhvc3RuYW1lczoKICAgIC0ga3ViZXJuZXRlcwogICAgaXA6IDEyNy4wLjAuMQogIGhvc3ROZXR3b3JrOiB0cnVlCiAgdm9sdW1lczoKICAtIGhvc3RQYXRoOgogICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMvYWRtaW4uY29uZgogICAgbmFtZToga3ViZWNvbmZpZwpzdGF0dXM6IHt9\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=\\\"/usr/bin/rm\\\" \\\"-rf\\\" \\\"/var/lib/rancher/k3s/server/manifests/runonce/*\\\"\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=5min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node03",
            "initrd": null,
            "kernel": null,
            "name": "worker-node03",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node03.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgY29udGFpbmVyczoKICAtIGFyZ3M6CiAgICAtIG1hbmFnZXIKICAgIGVudjoKICAgIC0gbmFtZTogdmlwX2FycAogICAgICB2YWx1ZTogImZhbHNlIgogICAgLSBuYW1lOiBwb3J0CiAgICAgIHZhbHVlOiAiNjQ0MyIKICAgIC0gbmFtZTogdmlwX2ludGVyZmFjZQogICAgICB2YWx1ZTogZW5vMQogICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICB2YWx1ZTogIjMyIgogICAgLSBuYW1lOiBjcF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBjcF9uYW1lc3BhY2UKICAgICAgdmFsdWU6IGt1YmUtc3lzdGVtCiAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IGJncF9lbmFibGUKICAgICAgdmFsdWU6ICJ0cnVlIgogICAgLSBuYW1lOiBiZ3Bfcm91dGVyaWQKICAgICAgdmFsdWU6IDE3Mi4xOC4yLjMKICAgIC0gbmFtZTogYmdwX2FzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVyYWRkcmVzcwogICAgLSBuYW1lOiBiZ3BfcGVlcnBhc3MKICAgIC0gbmFtZTogYmdwX3BlZXJhcwogICAgICB2YWx1ZTogIjY0NTEyIgogICAgLSBuYW1lOiBiZ3BfcGVlcnMKICAgICAgdmFsdWU6IDE3Mi4xNi4yNTQuMTo2NDUxMjo6ZmFsc2UKICAgIC0gbmFtZTogYWRkcmVzcwogICAgICB2YWx1ZTogMTcyLjE4LjIuMjUyCiAgICAtIG5hbWU6IHByb21ldGhldXNfc2VydmVyCiAgICAgIHZhbHVlOiA6MjExMgogICAgaW1hZ2U6IGdoY3IuaW8va3ViZS12aXAva3ViZS12aXA6djAuNS43CiAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgbmFtZToga3ViZS12aXAKICAgIHJlc291cmNlczoge30KICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgIGFkZDoKICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgIC0gTkVUX1JBVwogICAgdm9sdW1lTW91bnRzOgogICAgLSBtb3VudFBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICAgIG5hbWU6IGt1YmVjb25maWcKICBob3N0QWxpYXNlczoKICAtIGhvc3RuYW1lczoKICAgIC0ga3ViZXJuZXRlcwogICAgaXA6IDEyNy4wLjAuMQogIGhvc3ROZXR3b3JrOiB0cnVlCiAgdm9sdW1lczoKICAtIGhvc3RQYXRoOgogICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMvYWRtaW4uY29uZgogICAgbmFtZToga3ViZWNvbmZpZwpzdGF0dXM6IHt9\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=\\\"/usr/bin/rm\\\" \\\"-rf\\\" \\\"/var/lib/rancher/k3s/server/manifests/runonce/*\\\"\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=5min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
