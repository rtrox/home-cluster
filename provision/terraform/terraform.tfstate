{
  "version": 4,
  "terraform_version": "1.3.6",
  "serial": 197,
  "lineage": "010f88ba-7585-17bd-e205-abfa42200d0b",
  "outputs": {
    "k3s-api-fqdn": {
      "value": "api.cho.rtrox.com",
      "type": "string"
    },
    "k3s-api-vip": {
      "value": "172.18.2.252",
      "type": "string"
    },
    "k3s-config": {
      "value": "---\ntls-san:\n  - api.cho.rtrox.com\n  - 172.18.2.252\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
      "type": "string"
    }
  },
  "resources": [
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "ct_config",
      "name": "install",
      "provider": "provider[\"registry.terraform.io/poseidon/ct\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node01\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node01-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "908637654",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLMYrDMBCF4V6nmPXCdpLsdsHkImkkzSRWkDRBMzb27UNI0qR58OD7f398zM3HIAtY2k1aewFrO2k/YBphWFTv/97XoGmJvDvJ6Lp23l3i6vO1Zc3cTixzbqKhFMK/xkjzc8ZpAMvwUe4m3MylBE2h27eHswGwCB5p84Lh9fNXtCJtASsIqRYycohSTVqgU2RW8wgAAP//FWpKkcgAAAA=\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node01-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node02\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node02-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "2515247730",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vS9SgUX8RLkhltJMlIZlratxdRL14++OD3//3xMTcfg8xgaTNp6QWs7aR9h/8Rhln1fvS+Bk1z5M1JRte18+YSV5+vLWvmdmKZchMNpRD+NUaanjMeBrAMH+Vuws1cStAUun17OBsAi+CRVi8YXj9/RQvSGrCCkGohI7so1aQFOkVmNY8AAAD//1sM4inIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node02-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node03\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node03-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "843122694",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vSxZtQfBEvSWa0kSQjmWlp315EvXj54IPf//fHx9x8DDKDpc2kpRewtpP2Hf5HGGbV+9H7GjTNkTcnGV3XzptLXH2+tqyZ24llyk00lEL41xhpes54GMAyfJS7CTdzKUFT6Pbt4WwALIJHWr1geP38FS1Ia8AKQqqFjOyiVJMW6BSZ1TwCAAD//14sVffIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node03-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "ct_config",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/ct\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node01.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAtMAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMQogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC=--cluster-init\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=10min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "3278587954",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node01.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAtMAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMQogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC=--cluster-init\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node02.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAtMQogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMgogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=10min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "2418146062",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node02.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAtMQogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMgogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node03.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1hZ2VudC9zZXJ2aWNlYWNjb3VudC55YW1sCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6ICJjaWxpdW0iCiAgbmFtZXNwYWNlOiBmbHV4LXN5c3RlbQpsYWJsZQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLW9wZXJhdG9yL3NlcnZpY2VhY2NvdW50LnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogImNpbGl1bS1vcGVyYXRvciIKICBuYW1lc3BhY2U6IGZsdXgtc3lzdGVtCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tY2Etc2VjcmV0LnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bS1jYQogIG5hbWVzcGFjZTogZmx1eC1zeXN0ZW0KZGF0YToKICBjYS5jcnQ6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJGZWtORFFXWjFaMEYzU1VKQlowbFJTU3QwWTFWSmJXUkVXVWxsUzNOVU0ycDFOME5rUkVGT1FtZHJjV2hyYVVjNWR6QkNRVkZ6UmtGRVFWVUtUVkpKZDBWQldVUldVVkZFUlhkc1JHRlhlSEJrVnpCblVUQkZkMGhvWTA1TmFrbDRUV3BCTWsxcVRURk9SRUV6VjJoalRrMXFWWGhOYWtFeFRXcE5NUXBPUkVFelYycEJWVTFTU1hkRlFWbEVWbEZSUkVWM2JFUmhWM2h3WkZjd1oxRXdSWGRuWjBWcFRVRXdSME5UY1VkVFNXSXpSRkZGUWtGUlZVRkJORWxDQ2tSM1FYZG5aMFZMUVc5SlFrRlJRM2h3ZUhSMldYbFRZVnBVVDBKbU5XVmtaVkpZYUZWa1VEaHlkVzEyWXpZdmVXSk5aVUpGWm1kd2FGTXZORTFHYWpNS1RtOXliVVZ0VFRRcmNEQmhUVzgyY2xVMVNFbFFRMlJ3U0UxS1JESXJUekpwT0VOV1VYZHFkME41YW5OSE1tNUJRMVEzYTFWdlZtZ3lSVUZCYW01UlVnbzNVeXR2YkZwME1UY3ZiWFkyVDJwME1Ga3pObkJ5U21SVU9HNHhka1ZFUVZSeFpHbzRXVkp6ZWsxWVRUTnFRazVVUnpOUVduaHRUMFp1WVhselpsSkpDa3BCYzFKdFduZDNWM2R0YWpZMFVrWnlSbE0yVUVOWmRFeE1UREV5Wm1veVNFdFZjalpXVjFweGVsTm1hRWxETmxCNVNIUTVZVlJxVjFOWFdDOVBVUzhLUVhaeFRXWXlVV2swTlZKdWNHd3dOazFFTHpoRU1XNTNWaXRYUkRGdVZYTnVUR1YyVlhwM1VYSklVRFV4WlcxVlVYaGtPVmhuUVZGbFZWSlZhazlTZHdvdk0xVTNZelp2V0hGVVVsTk1OVkJLZGxOemFIZzNOamRxZWxKWVQzQjRWbmRZT1hCQlowMUNRVUZIYWxsVVFtWk5RVFJIUVRGVlpFUjNSVUl2ZDFGRkNrRjNTVU53UkVGa1FtZE9Wa2hUVlVWR2FrRlZRbWRuY2tKblJVWkNVV05FUVZGWlNVdDNXVUpDVVZWSVFYZEpkMFIzV1VSV1VqQlVRVkZJTDBKQlZYY0tRWGRGUWk5NlFXUkNaMDVXU0ZFMFJVWm5VVlZUSzJaNGNWQXZNVzV5Y1hjNWRFVk1kMXBSVEdoblltMVhZVTEzUkZGWlNrdHZXa2xvZG1OT1FWRkZUQXBDVVVGRVoyZEZRa0ZLTjNNMVRGUkNNRUYyVEdWS1RqZFBPRkYyUzNCQ1RraHJjMVZxVFUweGFWYzNNRGxoVFVoWVpXNUdVa3hXZVVoSmNHaFdhVlJEQ2poWlRWRXpTM001SzBwUlltRnBMMVZhYnk5Qkt6RnBiWGcwYUhCU0syaHdkREE0ZFdwcFUyRkVaRFppUlhNck5GWm1WRWRvVjJSV05qVTFRblF2TVRZS1YzQjNObGR0UkhVMEwwOTFjVTFLWXpGakx6TlBSV0oxWmpaV2MwMVRNMWxETkZWek9VNXVjVnBvSzB0Rk1YVnNNbk51V1VGck4zQlpkMjVKTURWNU9RcElSVXRIUW5GV1VGUkpjR0ZJTHpCMlRtb3diR2gxV21scVVHaFJRa2c1VWpaeVozSmpUa05KWkZaUmFFOTRVVGRNTTFKb1RXUXhTU3NyUVROU1JtcDJDalZQYjJwb1oydEhPV0UwTjFFeFVVTXhVRkJKTTJWS09VUlZXVGxHUWxjNGRucFpjMjQ0ZUZwSE16VlhXVEp0TUU5SVQxbEJkbHBqUTBsbEsySTFORWtLTjNaUU9EVlBiREpYYm1OblVHTTVNWGdyY20xbmVHbElUVWhGUVRVcll6MEtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICBjYS5rZXk6IExTMHRMUzFDUlVkSlRpQlNVMEVnVUZKSlZrRlVSU0JMUlZrdExTMHRMUXBOU1VsRmNFRkpRa0ZCUzBOQlVVVkJjMkZqWW1JeVRXdHRiVlY2WjFncldHNVlhMVkwVmtoVUwwczNjSEl6VDNZNGJYcElaMUpJTkV0WlZYWXJSRUpaQ2psNllVczFhRXBxVDFCeFpFZHFTMDl4TVU5U2VVUjNibUZTZWtOUk9YWnFkRzkyUVd4VlRVazRRWE52TjBKMGNIZEJheXMxUmt0R1dXUm9RVUZKTlRBS1JXVXdkbkZLVjJKa1pTODFjaXRxYnpka1IwNHJjV0Y1V0ZVdlNqbGllRUYzUlRadVdTOUhSV0pOZWtaNlRqUjNWRlY0ZEhveVkxcHFhRm95YzNKSU1BcFRRMUZNUlZwdFkwMUdjMHB2SzNWRlVtRjRWWFZxZDIxTVUzbDVPV1J1TkRsb2VXeExLMnhXYldGek1HNDBVMEYxYWpob04yWlhhelF4YTJ4c0wzcHJDbEIzVERacVNEbHJTWFZQVlZvMldtUlBha0V2TDBFNVdqaEdabXhuT1ZveFRFcDVNM0l4VFRoRlMzaDZLMlJZY0d4RlRWaG1WalJCUlVoc1JWWkplbXNLWTFBNU1VOHpUM0ZHTm1zd1ZXa3JWSGxpTUhKSlkyVXJkVFE0TUZaNmNXTldZMFl2WVZGSlJFRlJRVUpCYjBsQ1FWRkRTall2UzJkNE5XWnFVbWsxTWdwdE1XaGhTMWRsVkZKeVVVNTFURFF3VDA1NVoyMVdUa3RKVjJ4Sk1IUTBja1ZXTkVGcU5XWkhhSGRCUW1aSkx6ZG9jMU00ZG0xVGRqQkJVRWt4TUhJMkNqUXZkMnd2VG01SVEwRlJiMWRKUjNONlNuVk9UelpDV1VseWFuRXZZbWw1ZEdWWWJrSlFNamRLUjNST1drMUhNR3RHTlVkU1EzRXlUR3BVVEhaUFdrOEtiMXBwYW5SSGVrRmhkMFZyWkhSWldqa3lXVWx1VVRKcWREWmtabG93VWlzekwySktTSGhZVTFOR1JpdFRNRUUxTW1WRlpVZEZaalJZVEhjMkwxVnZRZ3BFWlcxQ1ZUVnJPVVp4ZVhVd2MxQlZVa05NVldSNVRYaGlhemh6UTNkNWFFSkNNR296TTBoQmF6Vk9UbTkxT1dSM09YQkpiaTlWUjJwU1ZtMTNSRzFaQ2sxcmN6aG5kVWxWZDNCQmNWVXpTR1kxT0hoaWJFc3lNazV5TkdaSGVDOVlTME0xYjJObVNHODJPVkZuZVRGc2NXbExRV3RYT0hOU2QwSlFWRWhTYVVZS2RXUmxOVGQyYzBKQmIwZENRVTFGZEUxemIweHVaekZsUkU5d1Ewc3pVbFJwU2psUlJHTkpSMnBRWjFCTloxZGxSM0EzVm0xT00wY3djMHh2YnpSQllRcEZTamhUYkhvMWIwc3ZaVTVYTmxCMEwwcDBjMmszZUN0b00yRXlSMkpTVkdGcGFFUXpOM1ZUV0RGdFYzVk1OMEpTYWsxV1RHOXVTMjF1TkZkU04yOTRDbWxUVVdGUU5FVkpPWEp2Y0V4T1VYWkZTMk5zVWl0Q2FtOHlSM1prT0hWQmIzZzBOWEUzT0hwVVoxWk1UR3BuWmtZNVdVZEVOMGczUVc5SFFrRlBkSFFLWlM4NGVuVkNSemxaVmpKSWNFTnFSa3BWUlZsaWFGSnFieTlsVkROc1EyTnBZVGhRZVU5REx5dG5ZVmR2VEhCNFkzRk9hQ3RIT0ZOaE1VMUxURE5UVUFveFdHUlJSVmREY25Wc1MzaEhjbU4xUkRONU1WUkJWbGx1UkdaTlNtcDJhakZRTWxjMFJtSTVLMlY2UlVoaU1qRXdUMVpYZGpWcGJtRTBVMWRDYWpabkNrbGlibFYxTVVGbFoySnZSR3RTVDBwUWVEbGlOME5pUzNKUk5uTXZhbkpYU25SQlNXWjJjbkpCYjBkQlZXTlJjalV4UjJKcFRsUjVZVzlYZG14M1JqQUtjSFJ3Wm5WSGVrWmFiMjl2UW1wRGVESXJSbFpZZVc4eFRUaE1PREJrUVRKclRqVjRibXA2UW5ZemNsb3JlakZWTW5kVVN6aFFTWFJ5U2xoUWN6UkNUQXBSZEdaWU56ZEZOVWwwWVd4U1JHcFRNbVpTZUZOdGJYcHJkMDFxVVZSRFQyUXZWMVZSTmpOcWIxWkRhMXBRZFRJNVRXcFhOelpsT1VaRVFVNWhUbTRyQ2sxWFJDOTZWMHRPT1RkbGJYcExTamh0UmpkblltUnJRMmRaUlVGNlJFSnpUVVEyYVUxcWFXNHpkVUZNVVVKVmJFbzFNVkowUkhSeVpHZHdORGhxSzJrS2NIZFJkM1pOVjJ0NU9YZFBNRlZaWlVsS2FWUlRXSEZZVUZSSFJGVlVlVU0zTTFkNFlrd3Zhek5XTW1kQ2VYQmhOR3hYTXpsd1kxRXZkRUZCYUZWamJ3cGllakZTYmtGSGVIQXliVGxTWkVsUmRWTnBVa052ZVVOcmVqaDJZMVpsWm1sTVdqWk5OVmxTS3poNWJVbHRVMU5MT1dWc1RGVjJlRFYwTW1oeWJGRlpDakkyZGxOMmFuTkRaMWxDY3pKa2FGWkZaMlpWYTJsMVptbHlPRGMyTWxGVmVrMWlZM2RHVkRsa1lsWkZTRkpXVmxFeVlWZEJVRVJpVmpsTVUwaDZTRGdLV0dsSlN5c3ZTVEl6Tmtjd2JIQlBkblpSTDFoa0x6SnZZMk5uY0c5WVpFaFNOVWRuY2poalFtTnFOalJvYUhaVmIzbGlORk5IWVdsT1MwczNOM2xDVGdwaVRVMXJUa1Z4WWxod2RXMW9aSEJ4ZWtZNGNHazFla0ZoTUhacVN6aGlaRzFJVG1RM1RHTnhlalppUVhSaWFFTjVhMUJhZUZFOVBRb3RMUzB0TFVWT1JDQlNVMEVnVUZKSlZrRlVSU0JMUlZrdExTMHRMUW89Ci0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9odWJibGUvdGxzLWhlbG0vc2VydmVyLXNlY3JldC55YW1sCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lOiBodWJibGUtc2VydmVyLWNlcnRzCiAgbmFtZXNwYWNlOiBmbHV4LXN5c3RlbQp0eXBlOiBrdWJlcm5ldGVzLmlvL3RscwpkYXRhOgogIGNhLmNydDogIExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJGZWtORFFXWjFaMEYzU1VKQlowbFJTU3QwWTFWSmJXUkVXVWxsUzNOVU0ycDFOME5rUkVGT1FtZHJjV2hyYVVjNWR6QkNRVkZ6UmtGRVFWVUtUVkpKZDBWQldVUldVVkZFUlhkc1JHRlhlSEJrVnpCblVUQkZkMGhvWTA1TmFrbDRUV3BCTWsxcVRURk9SRUV6VjJoalRrMXFWWGhOYWtFeFRXcE5NUXBPUkVFelYycEJWVTFTU1hkRlFWbEVWbEZSUkVWM2JFUmhWM2h3WkZjd1oxRXdSWGRuWjBWcFRVRXdSME5UY1VkVFNXSXpSRkZGUWtGUlZVRkJORWxDQ2tSM1FYZG5aMFZMUVc5SlFrRlJRM2h3ZUhSMldYbFRZVnBVVDBKbU5XVmtaVkpZYUZWa1VEaHlkVzEyWXpZdmVXSk5aVUpGWm1kd2FGTXZORTFHYWpNS1RtOXliVVZ0VFRRcmNEQmhUVzgyY2xVMVNFbFFRMlJ3U0UxS1JESXJUekpwT0VOV1VYZHFkME41YW5OSE1tNUJRMVEzYTFWdlZtZ3lSVUZCYW01UlVnbzNVeXR2YkZwME1UY3ZiWFkyVDJwME1Ga3pObkJ5U21SVU9HNHhka1ZFUVZSeFpHbzRXVkp6ZWsxWVRUTnFRazVVUnpOUVduaHRUMFp1WVhselpsSkpDa3BCYzFKdFduZDNWM2R0YWpZMFVrWnlSbE0yVUVOWmRFeE1UREV5Wm1veVNFdFZjalpXVjFweGVsTm1hRWxETmxCNVNIUTVZVlJxVjFOWFdDOVBVUzhLUVhaeFRXWXlVV2swTlZKdWNHd3dOazFFTHpoRU1XNTNWaXRYUkRGdVZYTnVUR1YyVlhwM1VYSklVRFV4WlcxVlVYaGtPVmhuUVZGbFZWSlZhazlTZHdvdk0xVTNZelp2V0hGVVVsTk1OVkJLZGxOemFIZzNOamRxZWxKWVQzQjRWbmRZT1hCQlowMUNRVUZIYWxsVVFtWk5RVFJIUVRGVlpFUjNSVUl2ZDFGRkNrRjNTVU53UkVGa1FtZE9Wa2hUVlVWR2FrRlZRbWRuY2tKblJVWkNVV05FUVZGWlNVdDNXVUpDVVZWSVFYZEpkMFIzV1VSV1VqQlVRVkZJTDBKQlZYY0tRWGRGUWk5NlFXUkNaMDVXU0ZFMFJVWm5VVlZUSzJaNGNWQXZNVzV5Y1hjNWRFVk1kMXBSVEdoblltMVhZVTEzUkZGWlNrdHZXa2xvZG1OT1FWRkZUQXBDVVVGRVoyZEZRa0ZLTjNNMVRGUkNNRUYyVEdWS1RqZFBPRkYyUzNCQ1RraHJjMVZxVFUweGFWYzNNRGxoVFVoWVpXNUdVa3hXZVVoSmNHaFdhVlJEQ2poWlRWRXpTM001SzBwUlltRnBMMVZhYnk5Qkt6RnBiWGcwYUhCU0syaHdkREE0ZFdwcFUyRkVaRFppUlhNck5GWm1WRWRvVjJSV05qVTFRblF2TVRZS1YzQjNObGR0UkhVMEwwOTFjVTFLWXpGakx6TlBSV0oxWmpaV2MwMVRNMWxETkZWek9VNXVjVnBvSzB0Rk1YVnNNbk51V1VGck4zQlpkMjVKTURWNU9RcElSVXRIUW5GV1VGUkpjR0ZJTHpCMlRtb3diR2gxV21scVVHaFJRa2c1VWpaeVozSmpUa05KWkZaUmFFOTRVVGRNTTFKb1RXUXhTU3NyUVROU1JtcDJDalZQYjJwb1oydEhPV0UwTjFFeFVVTXhVRkJKTTJWS09VUlZXVGxHUWxjNGRucFpjMjQ0ZUZwSE16VlhXVEp0TUU5SVQxbEJkbHBqUTBsbEsySTFORWtLTjNaUU9EVlBiREpYYm1OblVHTTVNWGdyY20xbmVHbElUVWhGUVRVcll6MEtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICB0bHMuY3J0OiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSV2VrTkRRV29yWjBGM1NVSkJaMGxTUVZCdmRUbDBWVFkzYTNFelVtSkhNVFkzTldkcE5EaDNSRkZaU2t0dldrbG9kbU5PUVZGRlRFSlJRWGNLUmtSRlUwMUNRVWRCTVZWRlFYaE5TbEV5YkhOaFdGWjBTVVZPUWsxQ05GaEVWRWw1VFZSSmQwNXFTWHBPVkZGM1RqRnZXRVJVU1RGTlZFbDNUbFJKZWdwT1ZGRjNUakZ2ZDB0cVJXOU5RMWxIUVRGVlJVRjNkMlpMYVRWcVlVYzVkVm96Vm5wTWJXZ3hXVzFLYzFwVE1XNWpia0pxVEcxT2NHSkhiREZpVXpWd0NtSjZRME5CVTBsM1JGRlpTa3R2V2tsb2RtTk9RVkZGUWtKUlFVUm5aMFZRUVVSRFEwRlJiME5uWjBWQ1FVMUVWWEpGWVhZd1VtTktZVGxUYWxrMFRYa0tiV0ZGV1hJMFpFRmlkWGRzY1dKdWVqSlFSR0ZGVFhSS1EzaEpPV1JDYW5nemNtaFdURk41WmxRMU9HWmpkMnhZWWpNdk5uVjFkRmRzWkhZclExbzRaZ280ZHk5M2FHSmtMMUZ6ZVZsV1pXd3pabGxPVUZGRU4zcFRNeXQ2WjAwd1dGaE9PVzlwYjJkbVRIaFhhMVV6TW5nelNGYzNiRGhyWW1KNk1tZEJVbTQyQ2poVlNVb3pUME5XWWtsRlNXVTFWRXdyVlZkMGNrTlRTVlpYV21jeGJrNW9ZbFpVYVdWS2JqWlRjR1kyTkM5eFZVUkdVQzlxUkZGYU0zTkZXVkYyYlZRS1lVUXphRnB4TjNOTVZURTJPRkJvV2xKbVNWbG1hMGMwWmpCMWRXaEZTbFZIVUdSRWJqZDNWVkZ4VERoVU9XSkRMMFYxUWtwRllXSlBjbmxuTlZSVU9RcExXV2g1YTNsMVExZEZLMDA0UlZKNWIySkJTakF2UlVkRVdrSmlZblZsY1RZNGJERndPSHB3VUc0Mk1rVXlUemRTVVdKTFJESXdRUzhyYkRkMksybzFDalJ0WTBOQmQwVkJRV0ZQUW1wVVEwSnBha0ZQUW1kT1ZraFJPRUpCWmpoRlFrRk5RMEpoUVhkSVVWbEVWbEl3YkVKQ1dYZEdRVmxKUzNkWlFrSlJWVWdLUVhkRlIwTkRjMGRCVVZWR1FuZE5RMDFCZDBkQk1WVmtSWGRGUWk5M1VVTk5RVUYzU0hkWlJGWlNNR3BDUW1kM1JtOUJWVk1yWm5oeFVDOHhibkp4ZHdvNWRFVk1kMXBSVEdoblltMVhZVTEzUzJkWlJGWlNNRkpDUTAxM1NWbEpaa3RwTldwaFJ6bDFXak5XZWt4dGFERlpiVXB6V2xNeGJtTnVRbXBNYlU1d0NtSkhiREZpVXpWd1lucEJUa0puYTNGb2EybEhPWGN3UWtGUmMwWkJRVTlEUVZGRlFVRndSR0Z3ZHpGaFpIY3hTalIyZVhCeloxcFJVbFpCTUdwUE1rMEtiMHhPVVdRd01EUktkbWxrU21GMlRrTnFhaTl1TkZOeE9XdFNkbUpUS3pZek1rRnRVVTQ0VEdrelEzWm5TRmhMYzA4cmNpczNNMUIwY0hSaldGa3JZd29yYUZaT1QwRXlaa3R3YnpWWGVIbzJkVTlEVVZWaE9FaFFZa0pvWW00ME5reHNUMUpPT0ZnemIwOUdiUzl2TW10d1ZsTmFiQzlyVWxsTk4wOWFOMXBYQ21obFNIWjJaV1JhYldKNGFXZzBSSEZ6WjJaQ1VHUlRkbTVWWVROM2IwTkpSVEJaVGxONWJWbHBTRUZoZVdoSFZsUXlWMGhTUm05V2FIaFhabGhMV2pBS1pUa3JVRkZTU2tWemMzUTBLM1JYY0RObmJYaG5LMnhDYzI1MU5IQndUMFJCZG14V01rMTViVzVVUm05amQybGpTMUJEYUhnNGFuSnNTVWQzU3k5SFpBcERZa1ZMVDFGUFQwZG9USE00UjFCUGRYUXdSa0ZOZVZGMFJFbHBVR2R0Vm1aeU4wMTBNR05rVkdWTVpGQlZaRXd4VFZvM1RGZzJNRXBCUFQwS0xTMHRMUzFGVGtRZ1EwVlNWRWxHU1VOQlZFVXRMUzB0TFFvPQogIHRscy5rZXk6IExTMHRMUzFDUlVkSlRpQlNVMEVnVUZKSlZrRlVSU0JMUlZrdExTMHRMUXBOU1VsRmIzZEpRa0ZCUzBOQlVVVkJkMDVUYzFKeEwxSkdkMnh5TVV0T2FtZDZTMXB2VW1sMmFEQkNkVGREVjNCMVpsQlpPRTV2VVhrd2EweEZhakV3Q2tkUVNHVjFSbFYwVEVvNVVHNTRPWHBEVm1SMlppOXhOall4WVZZeUx6Uktibmd2ZWtRdlEwWjBNemxEZWtwb1ZqWllaRGxuTURsQlVIWk9UR1kzVDBFS2VsSmtZek15YVV0cFFqaDJSbUZTVkdaaVNHTmtZblZZZVZKMGRsQmhRVUpIWm5KNFVXZHVZelJLVm5OblVXZzNiRTEyTlZKaE1uTktTV2hXV20xRVZ3cGpNa1owVms5S05HMW1jRXRzTDNKcUszQlJUVlV2SzAxT1FtNWxkMUpvUXl0YVRtOVFaVVp0Y25WM2RGUlljbmNyUm14R09HaG9LMUZpYUM5VE5qWkZDbEZzVVZrNU1FOW1ka0pTUTI5MmVGQXhjMHc0VXpSRmExSndjeloyUzBSc1RsQXdjR2xJUzFSTE5FcFpWRFI2ZDFKSVMyaHpRVzVVT0ZGWlRtdEdkSFVLTlRaeWNubFlWMjU2VDJzclpuSlpWRmszZEVaQ2MyOVFZbEZFTHpaWWRTODJVRzVwV25kSlJFRlJRVUpCYjBsQ1FWRkROR1JRYUZSTFpUUkhZbTFIZVFvMU5WUlRkRXd5V0VJNGEyOTRVemhYVVVSVWNXZ3lUak5wWmtoVmRFRjFaVXREUkRsc05tdHZhRmh2VVVoR2EwczJkMlZqTkZGSWN6RTBhV3RvU2tGWkNrRkNkSFZHZURkdmJWaHJaaTlsUjBaWGVHVmlia1Y2TlVwbU9XSXJSbTAxVkRWdFprWnZSV3g1U21aNkwwaHBTelpGVm1oclNteEhSMlYyY0ZkYVFVRUtNRU5WWkcxQ2JtVjRVbG92TUhoQldFbHRhM012YVRFeVVrNXlUbTFrSzFwelRWcHhiVFUyWWpST1dVbEZOa3hITVZCVFNubzJla2wxY1VwT1dsSXlZZ3A1YzFFelQwVllPV2xyZFRJNVZsVjBNRFp2T0ZsMlZVSnNObVZqUzBad1JGSXhOVlJDTkhWdVJsaHJXVlJLWVM5RlUyNWpRa1YyV2t0cFRVVlNiRU5qQ2tKMVVYQTJUVVp2VkZBdlZYbFhPVEZCVVRZMU1uWkxNRVJRYlVSbFowOU1SVFJRTlc5R2JrOVJWVVZ6UjFCb2FFNTRlVVE0YnlzMmIycFdZa05wS3pZS2RTODBTamhrWkZwQmIwZENRVTR2WTFoak1Ya3hVRzFPVW10dlpsSnhORGxaY0ZGNlUxTlBVMUFyVVVaNFIyWkJhRko1Umk5NVJtSlBlVXBuTW1kMk9BcDNaQzlqY2pjd2MzcHplRnBUTlZsMGIyaGxSVEJMYmlzM1JDdHFhbVZOTWpKU0syZERXR2xEWlRWWWJGaExRMGRyWm5JeVJEUlpTbmM0Y0VWVVEyeDNDbFIyWWpGMGFXeDZVbHBrV2toUVNVWnhXR0Y2T1VkRE1uTjRZaXQyWTNkelV6TnFXbEI1YVZkaGNtcG9OR0ZtWWtoalRucEtPREpNUVc5SFFrRk9lVVFLTWxOdFRUUm1NRzU2Y3pneVF5OWFaMnhTTjNrelprNUdUSFZwUlZOVlNtRnJaWEU0S3pSd1JYSnRMMWwwVFdFeGIzSkdiRGxuZFhKa1VHVmhTbEF4Y3dwRlpESmhXa1EyZFVSS09HOXNha0ZwS3pCaE56QkhkRFJXZFRKQkswNDFZa0pxY1VaUWFWUmlVV3BOU0RKaFRXbzNUQzl2T0hCamFrdDRVSFZyTjNGM0NsQjZkMUo2Vm5OeGQycFdjRWd4V2tWakt6VTFUVTVrUkdGTVZ6QmlaSEpOWWtkdlNHcDBTVlpCYjBkQlVuSmhNM04wVWxwVWJFNUJTblF6YlZZNVpuY0tUV1I0V21WRVJWVnRXbFIzZVRneFYzWjNTR00yT0RaRWVWbEtTMjV2Y2tSUE1VaGpLMkZqVkRGQ01VazRWRWRPUTBaNlpVSlVWVkJ5TjB0alpWY3JlZ29yYm1ReFVtMXZRbGhCU2s0eGFUbHpTVnBvYTI5MlUyMXpiR2ROY25aS1drZ3dNMU56ZUd4RmJrZENOemhxSzNwdWJHMVBSWEJpYW5vMWJUaHVjV2hJQ2xaMU9WcE5hSE5DY2pGRk4wWlBhakJhS3poVFdHRXdRMmRaUVUwcldGUTVhazU0TDBkTGFVTmhTblZ5YXpKTmVYWjJaSGRMVGtod2RrWTNWRWRMUldRS1VIRkdUMDFXZUZOSFJqUkxhM2RXVUdselFTOVVOR1JEVTJvclF6WmhhbXBqVVVsVk4yZHBkMFpMVGtKcll6RllSRUpZYmxCT01XZG1RVmx2YW5oS0t3cDJkbWMxUlhVeVEwMTVVVXhDVlVsWmVVbDJPV1ZKVWtGV0wyczFUWE5YUm5Nd1duZzFjMGx0WjJ4cWJIRnZSbTUwY0cwMVJVczFTV2R4VlRCRGJrMVhDbWxtZEU1UlVVdENaMEpOTDBGb1kxZFBNVE51VDFWbk5VeDZibGRKYUhWb1psbzBOMVIzYUZKR1QxUndaV1J4WlRsV1VHVnljWEJ1U0RSTGJtVktSMGtLUmxaYVVEbENNRTAzSzNWNVFXZ3pObWRqWVhsMU5tUkNiblpzUWswdldrYzFaSG8xUzFSd2RXcDRZamRPTHpjeVNEVlVXbU0zTmxSM09XNVFUWFZOY1FwRFNHWkZka3h5V0ZSYVdIcHhiM1p1Y0VkUldtbEhNVUZKUm5kM1RXeHFTRVkwYWxkNFVUWmlRV2x3UTJKNFNGTjZNbTVGQ2kwdExTMHRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzB0TFMwdENnPT0KLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1jb25maWdtYXAueWFtbAphcGlWZXJzaW9uOiB2MQpraW5kOiBDb25maWdNYXAKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtLWNvbmZpZwogIG5hbWVzcGFjZTogZmx1eC1zeXN0ZW0KZGF0YToKCiAgIyBJZGVudGl0eSBhbGxvY2F0aW9uIG1vZGUgc2VsZWN0cyBob3cgaWRlbnRpdGllcyBhcmUgc2hhcmVkIGJldHdlZW4gY2lsaXVtCiAgIyBub2RlcyBieSBzZXR0aW5nIGhvdyB0aGV5IGFyZSBzdG9yZWQuIFRoZSBvcHRpb25zIGFyZSAiY3JkIiBvciAia3ZzdG9yZSIuCiAgIyAtICJjcmQiIHN0b3JlcyBpZGVudGl0aWVzIGluIGt1YmVybmV0ZXMgYXMgQ1JEcyAoY3VzdG9tIHJlc291cmNlIGRlZmluaXRpb24pLgogICMgICBUaGVzZSBjYW4gYmUgcXVlcmllZCB3aXRoOgogICMgICAgIGt1YmVjdGwgZ2V0IGNpbGl1bWlkCiAgIyAtICJrdnN0b3JlIiBzdG9yZXMgaWRlbnRpdGllcyBpbiBhbiBldGNkIGt2c3RvcmUsIHRoYXQgaXMKICAjICAgY29uZmlndXJlZCBiZWxvdy4gQ2lsaXVtIHZlcnNpb25zIGJlZm9yZSAxLjYgc3VwcG9ydGVkIG9ubHkgdGhlIGt2c3RvcmUKICAjICAgYmFja2VuZC4gVXBncmFkZXMgZnJvbSB0aGVzZSBvbGRlciBjaWxpdW0gdmVyc2lvbnMgc2hvdWxkIGNvbnRpbnVlIHVzaW5nCiAgIyAgIHRoZSBrdnN0b3JlIGJ5IGNvbW1lbnRpbmcgb3V0IHRoZSBpZGVudGl0eS1hbGxvY2F0aW9uLW1vZGUgYmVsb3csIG9yCiAgIyAgIHNldHRpbmcgaXQgdG8gImt2c3RvcmUiLgogIGlkZW50aXR5LWFsbG9jYXRpb24tbW9kZTogY3JkCiAgY2lsaXVtLWVuZHBvaW50LWdjLWludGVydmFsOiAiNW0wcyIKICBub2Rlcy1nYy1pbnRlcnZhbDogIjVtMHMiCiAgIyBEaXNhYmxlIHRoZSB1c2FnZSBvZiBDaWxpdW1FbmRwb2ludCBDUkQKICBkaXNhYmxlLWVuZHBvaW50LWNyZDogImZhbHNlIgoKICAjIElmIHlvdSB3YW50IHRvIHJ1biBjaWxpdW0gaW4gZGVidWcgbW9kZSBjaGFuZ2UgdGhpcyB2YWx1ZSB0byB0cnVlCiAgZGVidWc6ICJmYWxzZSIKICAjIFRoZSBhZ2VudCBjYW4gYmUgcHV0IGludG8gdGhlIGZvbGxvd2luZyB0aHJlZSBwb2xpY3kgZW5mb3JjZW1lbnQgbW9kZXMKICAjIGRlZmF1bHQsIGFsd2F5cyBhbmQgbmV2ZXIuCiAgIyBodHRwczovL2RvY3MuY2lsaXVtLmlvL2VuL2xhdGVzdC9wb2xpY3kvaW50cm8vI3BvbGljeS1lbmZvcmNlbWVudC1tb2RlcwogIGVuYWJsZS1wb2xpY3k6ICJkZWZhdWx0IgoKICAjIEVuYWJsZSBJUHY0IGFkZHJlc3NpbmcuIElmIGVuYWJsZWQsIGFsbCBlbmRwb2ludHMgYXJlIGFsbG9jYXRlZCBhbiBJUHY0CiAgIyBhZGRyZXNzLgogIGVuYWJsZS1pcHY0OiAidHJ1ZSIKCiAgIyBFbmFibGUgSVB2NiBhZGRyZXNzaW5nLiBJZiBlbmFibGVkLCBhbGwgZW5kcG9pbnRzIGFyZSBhbGxvY2F0ZWQgYW4gSVB2NgogICMgYWRkcmVzcy4KICBlbmFibGUtaXB2NjogImZhbHNlIgogICMgVXNlcnMgd2hvIHdpc2ggdG8gc3BlY2lmeSB0aGVpciBvd24gY3VzdG9tIENOSSBjb25maWd1cmF0aW9uIGZpbGUgbXVzdCBzZXQKICAjIGN1c3RvbS1jbmktY29uZiB0byAidHJ1ZSIsIG90aGVyd2lzZSBDaWxpdW0gbWF5IG92ZXJ3cml0ZSB0aGUgY29uZmlndXJhdGlvbi4KICBjdXN0b20tY25pLWNvbmY6ICJmYWxzZSIKICBlbmFibGUtYnBmLWNsb2NrLXByb2JlOiAidHJ1ZSIKICAjIElmIHlvdSB3YW50IGNpbGl1bSBtb25pdG9yIHRvIGFnZ3JlZ2F0ZSB0cmFjaW5nIGZvciBwYWNrZXRzLCBzZXQgdGhpcyBsZXZlbAogICMgdG8gImxvdyIsICJtZWRpdW0iLCBvciAibWF4aW11bSIuIFRoZSBoaWdoZXIgdGhlIGxldmVsLCB0aGUgbGVzcyBwYWNrZXRzCiAgIyB0aGF0IHdpbGwgYmUgc2VlbiBpbiBtb25pdG9yIG91dHB1dC4KICBtb25pdG9yLWFnZ3JlZ2F0aW9uOiBtZWRpdW0KCiAgIyBUaGUgbW9uaXRvciBhZ2dyZWdhdGlvbiBpbnRlcnZhbCBnb3Zlcm5zIHRoZSB0eXBpY2FsIHRpbWUgYmV0d2VlbiBtb25pdG9yCiAgIyBub3RpZmljYXRpb24gZXZlbnRzIGZvciBlYWNoIGFsbG93ZWQgY29ubmVjdGlvbi4KICAjCiAgIyBPbmx5IGVmZmVjdGl2ZSB3aGVuIG1vbml0b3IgYWdncmVnYXRpb24gaXMgc2V0IHRvICJtZWRpdW0iIG9yIGhpZ2hlci4KICBtb25pdG9yLWFnZ3JlZ2F0aW9uLWludGVydmFsOiA1cwoKICAjIFRoZSBtb25pdG9yIGFnZ3JlZ2F0aW9uIGZsYWdzIGRldGVybWluZSB3aGljaCBUQ1AgZmxhZ3Mgd2hpY2gsIHVwb24gdGhlCiAgIyBmaXJzdCBvYnNlcnZhdGlvbiwgY2F1c2UgbW9uaXRvciBub3RpZmljYXRpb25zIHRvIGJlIGdlbmVyYXRlZC4KICAjCiAgIyBPbmx5IGVmZmVjdGl2ZSB3aGVuIG1vbml0b3IgYWdncmVnYXRpb24gaXMgc2V0IHRvICJtZWRpdW0iIG9yIGhpZ2hlci4KICBtb25pdG9yLWFnZ3JlZ2F0aW9uLWZsYWdzOiBhbGwKICAjIFNwZWNpZmllcyB0aGUgcmF0aW8gKDAuMC0xLjApIG9mIHRvdGFsIHN5c3RlbSBtZW1vcnkgdG8gdXNlIGZvciBkeW5hbWljCiAgIyBzaXppbmcgb2YgdGhlIFRDUCBDVCwgbm9uLVRDUCBDVCwgTkFUIGFuZCBwb2xpY3kgQlBGIG1hcHMuCiAgYnBmLW1hcC1keW5hbWljLXNpemUtcmF0aW86ICIwLjAwMjUiCiAgIyBicGYtcG9saWN5LW1hcC1tYXggc3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBlbnRyaWVzIGluIGVuZHBvaW50CiAgIyBwb2xpY3kgbWFwIChwZXIgZW5kcG9pbnQpCiAgYnBmLXBvbGljeS1tYXAtbWF4OiAiMTYzODQiCiAgIyBicGYtbGItbWFwLW1heCBzcGVjaWZpZXMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGVudHJpZXMgaW4gYnBmIGxiIHNlcnZpY2UsCiAgIyBiYWNrZW5kIGFuZCBhZmZpbml0eSBtYXBzLgogIGJwZi1sYi1tYXAtbWF4OiAiNjU1MzYiCiAgIyBicGYtbGItYnlwYXNzLWZpYi1sb29rdXAgaW5zdHJ1Y3RzIENpbGl1bSB0byBlbmFibGUgdGhlIEZJQiBsb29rdXAgYnlwYXNzCiAgIyBvcHRpbWl6YXRpb24gZm9yIG5vZGVwb3J0IHJldmVyc2UgTkFUIGhhbmRsaW5nLgogIGJwZi1sYi1leHRlcm5hbC1jbHVzdGVyaXA6ICJmYWxzZSIKCiAgIyBQcmUtYWxsb2NhdGlvbiBvZiBtYXAgZW50cmllcyBhbGxvd3MgcGVyLXBhY2tldCBsYXRlbmN5IHRvIGJlIHJlZHVjZWQsIGF0CiAgIyB0aGUgZXhwZW5zZSBvZiB1cC1mcm9udCBtZW1vcnkgYWxsb2NhdGlvbiBmb3IgdGhlIGVudHJpZXMgaW4gdGhlIG1hcHMuIFRoZQogICMgZGVmYXVsdCB2YWx1ZSBiZWxvdyB3aWxsIG1pbmltaXplIG1lbW9yeSB1c2FnZSBpbiB0aGUgZGVmYXVsdCBpbnN0YWxsYXRpb247CiAgIyB1c2VycyB3aG8gYXJlIHNlbnNpdGl2ZSB0byBsYXRlbmN5IG1heSBjb25zaWRlciBzZXR0aW5nIHRoaXMgdG8gInRydWUiLgogICMKICAjIFRoaXMgb3B0aW9uIHdhcyBpbnRyb2R1Y2VkIGluIENpbGl1bSAxLjQuIENpbGl1bSAxLjMgYW5kIGVhcmxpZXIgaWdub3JlCiAgIyB0aGlzIG9wdGlvbiBhbmQgYmVoYXZlIGFzIHRob3VnaCBpdCBpcyBzZXQgdG8gInRydWUiLgogICMKICAjIElmIHRoaXMgdmFsdWUgaXMgbW9kaWZpZWQsIHRoZW4gZHVyaW5nIHRoZSBuZXh0IENpbGl1bSBzdGFydHVwIHRoZSByZXN0b3JlCiAgIyBvZiBleGlzdGluZyBlbmRwb2ludHMgYW5kIHRyYWNraW5nIG9mIG9uZ29pbmcgY29ubmVjdGlvbnMgbWF5IGJlIGRpc3J1cHRlZC4KICAjIEFzIGEgcmVzdWx0LCByZXBseSBwYWNrZXRzIG1heSBiZSBkcm9wcGVkIGFuZCB0aGUgbG9hZC1iYWxhbmNpbmcgZGVjaXNpb25zCiAgIyBmb3IgZXN0YWJsaXNoZWQgY29ubmVjdGlvbnMgbWF5IGNoYW5nZS4KICAjCiAgIyBJZiB0aGlzIG9wdGlvbiBpcyBzZXQgdG8gImZhbHNlIiBkdXJpbmcgYW4gdXBncmFkZSBmcm9tIDEuMyBvciBlYXJsaWVyIHRvCiAgIyAxLjQgb3IgbGF0ZXIsIHRoZW4gaXQgbWF5IGNhdXNlIG9uZS10aW1lIGRpc3J1cHRpb25zIGR1cmluZyB0aGUgdXBncmFkZS4KICBwcmVhbGxvY2F0ZS1icGYtbWFwczogImZhbHNlIgoKICAjIFJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaGluZyBjb21wYXRpYmxlIElzdGlvIHNpZGVjYXIgaXN0aW8tcHJveHkKICAjIGNvbnRhaW5lciBpbWFnZSBuYW1lcwogIHNpZGVjYXItaXN0aW8tcHJveHktaW1hZ2U6ICJjaWxpdW0vaXN0aW9fcHJveHkiCgogICMgTmFtZSBvZiB0aGUgY2x1c3Rlci4gT25seSByZWxldmFudCB3aGVuIGJ1aWxkaW5nIGEgbWVzaCBvZiBjbHVzdGVycy4KICBjbHVzdGVyLW5hbWU6IGNob25ndXMKICAjIFVuaXF1ZSBJRCBvZiB0aGUgY2x1c3Rlci4gTXVzdCBiZSB1bmlxdWUgYWNyb3NzIGFsbCBjb25uZXRlZCBjbHVzdGVycyBhbmQKICAjIGluIHRoZSByYW5nZSBvZiAxIGFuZCAyNTUuIE9ubHkgcmVsZXZhbnQgd2hlbiBidWlsZGluZyBhIG1lc2ggb2YgY2x1c3RlcnMuCiAgY2x1c3Rlci1pZDogIjAiCgogICMgRW5jYXBzdWxhdGlvbiBtb2RlIGZvciBjb21tdW5pY2F0aW9uIGJldHdlZW4gbm9kZXMKICAjIFBvc3NpYmxlIHZhbHVlczoKICAjICAgLSBkaXNhYmxlZAogICMgICAtIHZ4bGFuIChkZWZhdWx0KQogICMgICAtIGdlbmV2ZQogIHR1bm5lbDogInZ4bGFuIgogICMgRW5hYmxlcyBMNyBwcm94eSBmb3IgTDcgcG9saWN5IGVuZm9yY2VtZW50IGFuZCB2aXNpYmlsaXR5CiAgZW5hYmxlLWw3LXByb3h5OiAidHJ1ZSIKCiAgZW5hYmxlLWlwdjQtbWFzcXVlcmFkZTogInRydWUiCiAgZW5hYmxlLWlwdjYtbWFzcXVlcmFkZTogInRydWUiCgogIGVuYWJsZS14dC1zb2NrZXQtZmFsbGJhY2s6ICJ0cnVlIgogIGluc3RhbGwtaXB0YWJsZXMtcnVsZXM6ICJ0cnVlIgogIGluc3RhbGwtbm8tY29ubnRyYWNrLWlwdGFibGVzLXJ1bGVzOiAiZmFsc2UiCgogIGF1dG8tZGlyZWN0LW5vZGUtcm91dGVzOiAiZmFsc2UiCiAgZW5hYmxlLWxvY2FsLXJlZGlyZWN0LXBvbGljeTogImZhbHNlIgoKICBrdWJlLXByb3h5LXJlcGxhY2VtZW50OiAic3RyaWN0IgogIGt1YmUtcHJveHktcmVwbGFjZW1lbnQtaGVhbHRoei1iaW5kLWFkZHJlc3M6ICIiCiAgYnBmLWxiLXNvY2s6ICJmYWxzZSIKICBlbmFibGUtaGVhbHRoLWNoZWNrLW5vZGVwb3J0OiAidHJ1ZSIKICBub2RlLXBvcnQtYmluZC1wcm90ZWN0aW9uOiAidHJ1ZSIKICBlbmFibGUtYXV0by1wcm90ZWN0LW5vZGUtcG9ydC1yYW5nZTogInRydWUiCiAgZW5hYmxlLXN2Yy1zb3VyY2UtcmFuZ2UtY2hlY2s6ICJ0cnVlIgogIGVuYWJsZS1sMi1uZWlnaC1kaXNjb3Zlcnk6ICJ0cnVlIgogIGFycGluZy1yZWZyZXNoLXBlcmlvZDogIjMwcyIKICBlbmFibGUtZW5kcG9pbnQtaGVhbHRoLWNoZWNraW5nOiAidHJ1ZSIKICBlbmFibGUtaGVhbHRoLWNoZWNraW5nOiAidHJ1ZSIKICBlbmFibGUtd2VsbC1rbm93bi1pZGVudGl0aWVzOiAiZmFsc2UiCiAgZW5hYmxlLXJlbW90ZS1ub2RlLWlkZW50aXR5OiAidHJ1ZSIKICBzeW5jaHJvbml6ZS1rOHMtbm9kZXM6ICJ0cnVlIgogIG9wZXJhdG9yLWFwaS1zZXJ2ZS1hZGRyOiAiMTI3LjAuMC4xOjkyMzQiCiAgIyBFbmFibGUgSHViYmxlIGdSUEMgc2VydmljZS4KICBlbmFibGUtaHViYmxlOiAidHJ1ZSIKICAjIFVOSVggZG9tYWluIHNvY2tldCBmb3IgSHViYmxlIHNlcnZlciB0byBsaXN0ZW4gdG8uCiAgaHViYmxlLXNvY2tldC1wYXRoOiAiL3Zhci9ydW4vY2lsaXVtL2h1YmJsZS5zb2NrIgogICMgQW4gYWRkaXRpb25hbCBhZGRyZXNzIGZvciBIdWJibGUgc2VydmVyIHRvIGxpc3RlbiB0byAoZS5nLiAiOjQyNDQiKS4KICBodWJibGUtbGlzdGVuLWFkZHJlc3M6ICI6NDI0NCIKICBodWJibGUtZGlzYWJsZS10bHM6ICJmYWxzZSIKICBodWJibGUtdGxzLWNlcnQtZmlsZTogL3Zhci9saWIvY2lsaXVtL3Rscy9odWJibGUvc2VydmVyLmNydAogIGh1YmJsZS10bHMta2V5LWZpbGU6IC92YXIvbGliL2NpbGl1bS90bHMvaHViYmxlL3NlcnZlci5rZXkKICBodWJibGUtdGxzLWNsaWVudC1jYS1maWxlczogL3Zhci9saWIvY2lsaXVtL3Rscy9odWJibGUvY2xpZW50LWNhLmNydAogIGlwYW06ICJjbHVzdGVyLXBvb2wiCiAgY2x1c3Rlci1wb29sLWlwdjQtY2lkcjogIjEwLjAuMC4wLzgiCiAgY2x1c3Rlci1wb29sLWlwdjQtbWFzay1zaXplOiAiMjQiCiAgZGlzYWJsZS1jbnAtc3RhdHVzLXVwZGF0ZXM6ICJ0cnVlIgogIGVuYWJsZS12dGVwOiAiZmFsc2UiCiAgdnRlcC1lbmRwb2ludDogIiIKICB2dGVwLWNpZHI6ICIiCiAgdnRlcC1tYXNrOiAiIgogIHZ0ZXAtbWFjOiAiIgogIGVuYWJsZS1iZ3AtY29udHJvbC1wbGFuZTogImZhbHNlIgogIHByb2NmczogIi9ob3N0L3Byb2MiCiAgYnBmLXJvb3Q6ICIvc3lzL2ZzL2JwZiIKICBjZ3JvdXAtcm9vdDogIi9ydW4vY2lsaXVtL2Nncm91cHYyIgogIGVuYWJsZS1rOHMtdGVybWluYXRpbmctZW5kcG9pbnQ6ICJ0cnVlIgogIHJlbW92ZS1jaWxpdW0tbm9kZS10YWludHM6ICJ0cnVlIgogIHNldC1jaWxpdW0taXMtdXAtY29uZGl0aW9uOiAidHJ1ZSIKICB1bm1hbmFnZWQtcG9kLXdhdGNoZXItaW50ZXJ2YWw6ICIxNSIKICB0b2ZxZG5zLWRucy1yZWplY3QtcmVzcG9uc2UtY29kZTogInJlZnVzZWQiCiAgdG9mcWRucy1lbmFibGUtZG5zLWNvbXByZXNzaW9uOiAidHJ1ZSIKICB0b2ZxZG5zLWVuZHBvaW50LW1heC1pcC1wZXItaG9zdG5hbWU6ICI1MCIKICB0b2ZxZG5zLWlkbGUtY29ubmVjdGlvbi1ncmFjZS1wZXJpb2Q6ICIwcyIKICB0b2ZxZG5zLW1heC1kZWZlcnJlZC1jb25uZWN0aW9uLWRlbGV0ZXM6ICIxMDAwMCIKICB0b2ZxZG5zLW1pbi10dGw6ICIzNjAwIgogIHRvZnFkbnMtcHJveHktcmVzcG9uc2UtbWF4LWRlbGF5OiAiMTAwbXMiCiAgYWdlbnQtbm90LXJlYWR5LXRhaW50LWtleTogIm5vZGUuY2lsaXVtLmlvL2FnZW50LW5vdC1yZWFkeSIKLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1hZ2VudC9jbHVzdGVycm9sZS55YW1sCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtCnJ1bGVzOgotIGFwaUdyb3VwczoKICAtIG5ldHdvcmtpbmcuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gbmV0d29ya3BvbGljaWVzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gZGlzY292ZXJ5Lms4cy5pbwogIHJlc291cmNlczoKICAtIGVuZHBvaW50c2xpY2VzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgLSBuYW1lc3BhY2VzCiAgLSBzZXJ2aWNlcwogIC0gcG9kcwogIC0gZW5kcG9pbnRzCiAgLSBub2RlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGFwaWV4dGVuc2lvbnMuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAjIFRoaXMgaXMgdXNlZCB3aGVuIHZhbGlkYXRpbmcgcG9saWNpZXMgaW4gcHJlZmxpZ2h0LiBUaGlzIHdpbGwgbmVlZCB0byBzdGF5CiAgIyB1bnRpbCB3ZSBmaWd1cmUgb3V0IGhvdyB0byBhdm9pZCAiZ2V0IiBpbnNpZGUgdGhlIHByZWZsaWdodCwgYW5kIHRoZW4KICAjIHNob3VsZCBiZSByZW1vdmVkIGlkZWFsbHkuCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1iZ3Bsb2FkYmFsYW5jZXJpcHBvb2xzCiAgLSBjaWxpdW1iZ3BwZWVyaW5ncG9saWNpZXMKICAtIGNpbGl1bWNsdXN0ZXJ3aWRlZW52b3ljb25maWdzCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcwogIC0gY2lsaXVtZWdyZXNzZ2F0ZXdheXBvbGljaWVzCiAgLSBjaWxpdW1lZ3Jlc3NuYXRwb2xpY2llcwogIC0gY2lsaXVtZW5kcG9pbnRzCiAgLSBjaWxpdW1lbmRwb2ludHNsaWNlcwogIC0gY2lsaXVtZW52b3ljb25maWdzCiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgLSBjaWxpdW1sb2NhbHJlZGlyZWN0cG9saWNpZXMKICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcwogIC0gY2lsaXVtbm9kZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtaWRlbnRpdGllcwogIC0gY2lsaXVtZW5kcG9pbnRzCiAgLSBjaWxpdW1ub2RlcwogIHZlcmJzOgogIC0gY3JlYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgIyBUbyBzeW5jaHJvbml6ZSBnYXJiYWdlIGNvbGxlY3Rpb24gb2Ygc3VjaCByZXNvdXJjZXMKICByZXNvdXJjZXM6CiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgdmVyYnM6CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1lbmRwb2ludHMKICB2ZXJiczoKICAtIGRlbGV0ZQogIC0gZ2V0Ci0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbm9kZXMKICAtIGNpbGl1bW5vZGVzL3N0YXR1cwogIHZlcmJzOgogIC0gZ2V0CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1uZXR3b3JrcG9saWNpZXMvc3RhdHVzCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcy9zdGF0dXMKICAtIGNpbGl1bWVuZHBvaW50cy9zdGF0dXMKICAtIGNpbGl1bWVuZHBvaW50cwogIHZlcmJzOgogIC0gcGF0Y2gKLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1vcGVyYXRvci9jbHVzdGVycm9sZS55YW1sCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCnJ1bGVzOgotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gcG9kcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAogICMgdG8gYXV0b21hdGljYWxseSBkZWxldGUgW2NvcmV8a3ViZV1kbnMgcG9kcyBzbyB0aGF0IGFyZSBzdGFydGluZyB0byBiZWluZwogICMgbWFuYWdlZCBieSBDaWxpdW0KICAtIGRlbGV0ZQotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gbm9kZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgIyBUbyByZW1vdmUgbm9kZSB0YWludHMKICAtIG5vZGVzCiAgIyBUbyBzZXQgTmV0d29ya1VuYXZhaWxhYmxlIGZhbHNlIG9uIHN0YXJ0dXAKICAtIG5vZGVzL3N0YXR1cwogIHZlcmJzOgogIC0gcGF0Y2gKLSBhcGlHcm91cHM6CiAgLSBkaXNjb3ZlcnkuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gZW5kcG9pbnRzbGljZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAjIHRvIHBlcmZvcm0gTEIgSVAgYWxsb2NhdGlvbiBmb3IgQkdQCiAgLSBzZXJ2aWNlcy9zdGF0dXMKICB2ZXJiczoKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogICMgdG8gY2hlY2sgYXBpc2VydmVyIGNvbm5lY3Rpdml0eQogIC0gbmFtZXNwYWNlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogICMgdG8gcGVyZm9ybSB0aGUgdHJhbnNsYXRpb24gb2YgYSBDTlAgdGhhdCBjb250YWlucyBgVG9Hcm91cGAgdG8gaXRzIGVuZHBvaW50cwogIC0gc2VydmljZXMKICAtIGVuZHBvaW50cwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcwogIC0gY2lsaXVtY2x1c3RlcndpZGVuZXR3b3JrcG9saWNpZXMKICB2ZXJiczoKICAjIENyZWF0ZSBhdXRvLWdlbmVyYXRlZCBDTlBzIGFuZCBDQ05QcyBmcm9tIFBvbGljaWVzIHRoYXQgaGF2ZSAndG9Hcm91cHMnCiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZGVsZXRlY29sbGVjdGlvbgogICMgVG8gdXBkYXRlIHRoZSBzdGF0dXMgb2YgdGhlIENOUHMgYW5kIENDTlBzCiAgLSBwYXRjaAogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bW5ldHdvcmtwb2xpY2llcy9zdGF0dXMKICAtIGNpbGl1bWNsdXN0ZXJ3aWRlbmV0d29ya3BvbGljaWVzL3N0YXR1cwogIHZlcmJzOgogICMgVXBkYXRlIHRoZSBhdXRvLWdlbmVyYXRlZCBDTlBzIGFuZCBDQ05QcyBzdGF0dXMuCiAgLSBwYXRjaAogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtZW5kcG9pbnRzCiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgdmVyYnM6CiAgIyBUbyBwZXJmb3JtIGdhcmJhZ2UgY29sbGVjdGlvbiBvZiBzdWNoIHJlc291cmNlcwogIC0gZGVsZXRlCiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bWlkZW50aXRpZXMKICB2ZXJiczoKICAjIFRvIHN5bmNocm9uaXplIGdhcmJhZ2UgY29sbGVjdGlvbiBvZiBzdWNoIHJlc291cmNlcwogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbm9kZXMKICB2ZXJiczoKICAtIGNyZWF0ZQogIC0gdXBkYXRlCiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCiAgICAjIFRvIHBlcmZvcm0gQ2lsaXVtTm9kZSBnYXJiYWdlIGNvbGxlY3RvcgogIC0gZGVsZXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbm9kZXMvc3RhdHVzCiAgdmVyYnM6CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1lbmRwb2ludHNsaWNlcwogIC0gY2lsaXVtZW52b3ljb25maWdzCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZGVsZXRlCi0gYXBpR3JvdXBzOgogIC0gYXBpZXh0ZW5zaW9ucy5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBjdXN0b21yZXNvdXJjZWRlZmluaXRpb25zCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBhcGlleHRlbnNpb25zLms4cy5pbwogIHJlc291cmNlczoKICAtIGN1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMKICB2ZXJiczoKICAtIHVwZGF0ZQogIHJlc291cmNlTmFtZXM6CiAgLSBjaWxpdW1iZ3Bsb2FkYmFsYW5jZXJpcHBvb2xzLmNpbGl1bS5pbwogIC0gY2lsaXVtYmdwcGVlcmluZ3BvbGljaWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtY2x1c3RlcndpZGVlbnZveWNvbmZpZ3MuY2lsaXVtLmlvCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcy5jaWxpdW0uaW8KICAtIGNpbGl1bWVncmVzc2dhdGV3YXlwb2xpY2llcy5jaWxpdW0uaW8KICAtIGNpbGl1bWVncmVzc25hdHBvbGljaWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtZW5kcG9pbnRzLmNpbGl1bS5pbwogIC0gY2lsaXVtZW5kcG9pbnRzbGljZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1lbnZveWNvbmZpZ3MuY2lsaXVtLmlvCiAgLSBjaWxpdW1leHRlcm5hbHdvcmtsb2Fkcy5jaWxpdW0uaW8KICAtIGNpbGl1bWlkZW50aXRpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1sb2NhbHJlZGlyZWN0cG9saWNpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1uZXR3b3JrcG9saWNpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1ub2Rlcy5jaWxpdW0uaW8KIyBGb3IgY2lsaXVtLW9wZXJhdG9yIHJ1bm5pbmcgaW4gSEEgbW9kZS4KIwojIENpbGl1bSBvcGVyYXRvciBydW5uaW5nIGluIEhBIG1vZGUgcmVxdWlyZXMgdGhlIHVzZSBvZiBSZXNvdXJjZUxvY2sgZm9yIExlYWRlciBFbGVjdGlvbgojIGJldHdlZW4gbXVsdGlwbGUgcnVubmluZyBpbnN0YW5jZXMuCiMgVGhlIHByZWZlcnJlZCB3YXkgb2YgZG9pbmcgdGhpcyBpcyB0byB1c2UgTGVhc2VzUmVzb3VyY2VMb2NrIGFzIGVkaXRzIHRvIExlYXNlcyBhcmUgbGVzcwojIGNvbW1vbiBhbmQgZmV3ZXIgb2JqZWN0cyBpbiB0aGUgY2x1c3RlciB3YXRjaCAiYWxsIExlYXNlcyIuCi0gYXBpR3JvdXBzOgogIC0gY29vcmRpbmF0aW9uLms4cy5pbwogIHJlc291cmNlczoKICAtIGxlYXNlcwogIHZlcmJzOgogIC0gY3JlYXRlCiAgLSBnZXQKICAtIHVwZGF0ZQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLWFnZW50L2NsdXN0ZXJyb2xlYmluZGluZy55YW1sCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBjaWxpdW0Kc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiAiY2lsaXVtIgogIG5hbWVzcGFjZTogZmx1eC1zeXN0ZW0KLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1vcGVyYXRvci9jbHVzdGVycm9sZWJpbmRpbmcueWFtbAphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogImNpbGl1bS1vcGVyYXRvciIKICBuYW1lc3BhY2U6IGZsdXgtc3lzdGVtCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9odWJibGUvcGVlci1zZXJ2aWNlLnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBodWJibGUtcGVlcgogIG5hbWVzcGFjZTogZmx1eC1zeXN0ZW0KICBsYWJlbHM6CiAgICBrOHMtYXBwOiBjaWxpdW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIGs4cy1hcHA6IGNpbGl1bQogIHBvcnRzOgogIC0gbmFtZTogcGVlci1zZXJ2aWNlCiAgICBwb3J0OiA0NDMKICAgIHByb3RvY29sOiBUQ1AKICAgIHRhcmdldFBvcnQ6IDQyNDQKICBpbnRlcm5hbFRyYWZmaWNQb2xpY3k6IExvY2FsCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tYWdlbnQvZGFlbW9uc2V0LnlhbWwKYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtCiAgbmFtZXNwYWNlOiBmbHV4LXN5c3RlbQogIGxhYmVsczoKICAgIGs4cy1hcHA6IGNpbGl1bQpzcGVjOgogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGs4cy1hcHA6IGNpbGl1bQogIHVwZGF0ZVN0cmF0ZWd5OgogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4VW5hdmFpbGFibGU6IDIKICAgIHR5cGU6IFJvbGxpbmdVcGRhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBhbm5vdGF0aW9uczoKICAgICAgICAjIFNldCBhcHAgQXBwQXJtb3IncyBwcm9maWxlIHRvICJ1bmNvbmZpbmVkIi4gVGhlIHZhbHVlIG9mIHRoaXMgYW5ub3RhdGlvbgogICAgICAgICMgY2FuIGJlIG1vZGlmaWVkIGFzIGxvbmcgdXNlcnMga25vdyB3aGljaCBwcm9maWxlcyB0aGV5IGhhdmUgYXZhaWxhYmxlCiAgICAgICAgIyBpbiBBcHBBcm1vci4KICAgICAgICBjb250YWluZXIuYXBwYXJtb3Iuc2VjdXJpdHkuYmV0YS5rdWJlcm5ldGVzLmlvL2NpbGl1bS1hZ2VudDogInVuY29uZmluZWQiCiAgICAgICAgY29udGFpbmVyLmFwcGFybW9yLnNlY3VyaXR5LmJldGEua3ViZXJuZXRlcy5pby9jbGVhbi1jaWxpdW0tc3RhdGU6ICJ1bmNvbmZpbmVkIgogICAgICAgIGNvbnRhaW5lci5hcHBhcm1vci5zZWN1cml0eS5iZXRhLmt1YmVybmV0ZXMuaW8vbW91bnQtY2dyb3VwOiAidW5jb25maW5lZCIKICAgICAgICBjb250YWluZXIuYXBwYXJtb3Iuc2VjdXJpdHkuYmV0YS5rdWJlcm5ldGVzLmlvL2FwcGx5LXN5c2N0bC1vdmVyd3JpdGVzOiAidW5jb25maW5lZCIKICAgICAgbGFiZWxzOgogICAgICAgIGs4cy1hcHA6IGNpbGl1bQogICAgc3BlYzoKICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiBjaWxpdW0tYWdlbnQKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL2NpbGl1bTp2MS4xMi40QHNoYTI1Njo0YjA3NGZjZmJhOTMyNWMxOGU5NzU2OWVkMTk4ODQ2NDMwOWE1ZWJmNjRiYmM3OWJlYzZmM2Q1OGNhZmNiOGNmIgogICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIGNpbGl1bS1hZ2VudAogICAgICAgIGFyZ3M6CiAgICAgICAgLSAtLWNvbmZpZy1kaXI9L3RtcC9jaWxpdW0vY29uZmlnLW1hcAogICAgICAgIHN0YXJ0dXBQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIGhvc3Q6ICIxMjcuMC4wLjEiCiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDk4NzkKICAgICAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgICAgIGh0dHBIZWFkZXJzOgogICAgICAgICAgICAtIG5hbWU6ICJicmllZiIKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICBmYWlsdXJlVGhyZXNob2xkOiAxMDUKICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDIKICAgICAgICAgIHN1Y2Nlc3NUaHJlc2hvbGQ6IDEKICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgaG9zdDogIjEyNy4wLjAuMSIKICAgICAgICAgICAgcGF0aDogL2hlYWx0aHoKICAgICAgICAgICAgcG9ydDogOTg3OQogICAgICAgICAgICBzY2hlbWU6IEhUVFAKICAgICAgICAgICAgaHR0cEhlYWRlcnM6CiAgICAgICAgICAgIC0gbmFtZTogImJyaWVmIgogICAgICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDMwCiAgICAgICAgICBzdWNjZXNzVGhyZXNob2xkOiAxCiAgICAgICAgICBmYWlsdXJlVGhyZXNob2xkOiAxMAogICAgICAgICAgdGltZW91dFNlY29uZHM6IDUKICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIGhvc3Q6ICIxMjcuMC4wLjEiCiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDk4NzkKICAgICAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgICAgIGh0dHBIZWFkZXJzOgogICAgICAgICAgICAtIG5hbWU6ICJicmllZiIKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAzMAogICAgICAgICAgc3VjY2Vzc1RocmVzaG9sZDogMQogICAgICAgICAgZmFpbHVyZVRocmVzaG9sZDogMwogICAgICAgICAgdGltZW91dFNlY29uZHM6IDUKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBLOFNfTk9ERV9OQU1FCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgZmllbGRQYXRoOiBzcGVjLm5vZGVOYW1lCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fSzhTX05BTUVTUEFDRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZXNwYWNlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQ0xVU1RFUk1FU0hfQ09ORklHCiAgICAgICAgICB2YWx1ZTogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoLwogICAgICAgIC0gbmFtZTogQ0lMSVVNX0NOSV9DSEFJTklOR19NT0RFCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAga2V5OiBjbmktY2hhaW5pbmctbW9kZQogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQ1VTVE9NX0NOSV9DT05GCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAga2V5OiBjdXN0b20tY25pLWNvbmYKICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX0hPU1QKICAgICAgICAgIHZhbHVlOiAiMTcyLjE4LjIuMjUyIgogICAgICAgIC0gbmFtZTogS1VCRVJORVRFU19TRVJWSUNFX1BPUlQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICBsaWZlY3ljbGU6CiAgICAgICAgICBwb3N0U3RhcnQ6CiAgICAgICAgICAgIGV4ZWM6CiAgICAgICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgICAtICIvY25pLWluc3RhbGwuc2giCiAgICAgICAgICAgICAgLSAiLS1lbmFibGUtZGVidWc9ZmFsc2UiCiAgICAgICAgICAgICAgLSAiLS1jbmktZXhjbHVzaXZlPXRydWUiCiAgICAgICAgICAgICAgLSAiLS1sb2ctZmlsZT0vdmFyL3J1bi9jaWxpdW0vY2lsaXVtLWNuaS5sb2ciCiAgICAgICAgICBwcmVTdG9wOgogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgLSAvY25pLXVuaW5zdGFsbC5zaAogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIHNlTGludXhPcHRpb25zOgogICAgICAgICAgICBsZXZlbDogJ3MwJwogICAgICAgICAgICAjIFJ1bm5pbmcgd2l0aCBzcGNfdCBzaW5jZSB3ZSBoYXZlIHJlbW92ZWQgdGhlIHByaXZpbGVnZWQgbW9kZS4KICAgICAgICAgICAgIyBVc2VycyBjYW4gY2hhbmdlIGl0IHRvIGEgZGlmZmVyZW50IHR5cGUgYXMgbG9uZyBhcyB0aGV5IGhhdmUgdGhlCiAgICAgICAgICAgICMgdHlwZSBhdmFpbGFibGUgb24gdGhlIHN5c3RlbS4KICAgICAgICAgICAgdHlwZTogJ3NwY190JwogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgICAgIyBVc2UgdG8gc2V0IHNvY2tldCBwZXJtaXNzaW9uCiAgICAgICAgICAgICAgLSBDSE9XTgogICAgICAgICAgICAgICMgVXNlZCB0byB0ZXJtaW5hdGUgZW52b3kgY2hpbGQgcHJvY2VzcwogICAgICAgICAgICAgIC0gS0lMTAogICAgICAgICAgICAgICMgVXNlZCBzaW5jZSBjaWxpdW0gbW9kaWZpZXMgcm91dGluZyB0YWJsZXMsIGV0Yy4uLgogICAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgICAgIyBVc2VkIHNpbmNlIGNpbGl1bSBjcmVhdGVzIHJhdyBzb2NrZXRzLCBldGMuLi4KICAgICAgICAgICAgICAtIE5FVF9SQVcKICAgICAgICAgICAgICAjIFVzZWQgc2luY2UgY2lsaXVtIG1vbml0b3IgdXNlcyBtbWFwCiAgICAgICAgICAgICAgLSBJUENfTE9DSwogICAgICAgICAgICAgICMgVXNlZCBpbiBpcHRhYmxlcy4gQ29uc2lkZXIgcmVtb3Zpbmcgb25jZSB3ZSBhcmUgaXB0YWJsZXMtZnJlZQogICAgICAgICAgICAgIC0gU1lTX01PRFVMRQogICAgICAgICAgICAgICMgV2UgbmVlZCBpdCBmb3Igbm93IGJ1dCBtaWdodCBub3QgbmVlZCBpdCBmb3IgPj0gNS4xMSBzcGVjaWFsbHkKICAgICAgICAgICAgICAjIGZvciB0aGUgJ1NZU19SRVNPVVJDRScuCiAgICAgICAgICAgICAgIyBJbiA+PSA1LjggdGhlcmUncyBhbHJlYWR5IEJQRiBhbmQgUEVSTU9OIGNhcGFiaWxpdGllcwogICAgICAgICAgICAgIC0gU1lTX0FETUlOCiAgICAgICAgICAgICAgIyBDb3VsZCBiZSBhbiBhbHRlcm5hdGl2ZSBmb3IgdGhlIFNZU19BRE1JTiBmb3IgdGhlIFJMSU1JVF9OUFJPQwogICAgICAgICAgICAgIC0gU1lTX1JFU09VUkNFCiAgICAgICAgICAgICAgIyBCb3RoIFBFUkZNT04gYW5kIEJQRiByZXF1aXJlcyBrZXJuZWwgNS44LCBjb250YWluZXIgcnVudGltZQogICAgICAgICAgICAgICMgY3JpLW8gPj0gdjEuMjIuMCBvciBjb250YWluZXJkID49IHYxLjUuMC4KICAgICAgICAgICAgICAjIElmIGF2YWlsYWJsZSwgU1lTX0FETUlOIGNhbiBiZSByZW1vdmVkLgogICAgICAgICAgICAgICMtIFBFUkZNT04KICAgICAgICAgICAgICAjLSBCUEYKICAgICAgICAgICAgICAtIERBQ19PVkVSUklERQogICAgICAgICAgICAgIC0gRk9XTkVSCiAgICAgICAgICAgICAgLSBTRVRHSUQKICAgICAgICAgICAgICAtIFNFVFVJRAogICAgICAgICAgICBkcm9wOgogICAgICAgICAgICAgIC0gQUxMCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgIyBVbnByaXZpbGVnZWQgY29udGFpbmVycyBuZWVkIHRvIG1vdW50IC9wcm9jL3N5cy9uZXQgZnJvbSB0aGUgaG9zdAogICAgICAgICMgdG8gaGF2ZSB3cml0ZSBhY2Nlc3MKICAgICAgICAtIG1vdW50UGF0aDogL2hvc3QvcHJvYy9zeXMvbmV0CiAgICAgICAgICBuYW1lOiBob3N0LXByb2Mtc3lzLW5ldAogICAgICAgICMgVW5wcml2aWxlZ2VkIGNvbnRhaW5lcnMgbmVlZCB0byBtb3VudCAvcHJvYy9zeXMva2VybmVsIGZyb20gdGhlIGhvc3QKICAgICAgICAjIHRvIGhhdmUgd3JpdGUgYWNjZXNzCiAgICAgICAgLSBtb3VudFBhdGg6IC9ob3N0L3Byb2Mvc3lzL2tlcm5lbAogICAgICAgICAgbmFtZTogaG9zdC1wcm9jLXN5cy1rZXJuZWwKICAgICAgICAtIG5hbWU6IGJwZi1tYXBzCiAgICAgICAgICBtb3VudFBhdGg6IC9zeXMvZnMvYnBmCiAgICAgICAgICAjIFVucHJpdmlsZWdlZCBjb250YWluZXJzIGNhbid0IHNldCBtb3VudCBwcm9wYWdhdGlvbiB0byBiaWRpcmVjdGlvbmFsCiAgICAgICAgICAjIGluIHRoaXMgY2FzZSB3ZSB3aWxsIG1vdW50IHRoZSBicGYgZnMgZnJvbSBhbiBpbml0IGNvbnRhaW5lciB0aGF0CiAgICAgICAgICAjIGlzIHByaXZpbGVnZWQgYW5kIHNldCB0aGUgbW91bnQgcHJvcGFnYXRpb24gZnJvbSBob3N0IHRvIGNvbnRhaW5lcgogICAgICAgICAgIyBpbiBDaWxpdW0uCiAgICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBIb3N0VG9Db250YWluZXIKICAgICAgICAtIG5hbWU6IGNpbGl1bS1ydW4KICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9ydW4vY2lsaXVtCiAgICAgICAgLSBuYW1lOiBjbmktcGF0aAogICAgICAgICAgbW91bnRQYXRoOiAvaG9zdC9vcHQvY25pL2JpbgogICAgICAgIC0gbmFtZTogZXRjLWNuaS1uZXRkCiAgICAgICAgICBtb3VudFBhdGg6IC9ob3N0L2V0Yy9jbmkvbmV0LmQKICAgICAgICAtIG5hbWU6IGNsdXN0ZXJtZXNoLXNlY3JldHMKICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoCiAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgIC0gbmFtZTogY2lsaXVtLWNvbmZpZy1wYXRoCiAgICAgICAgICBtb3VudFBhdGg6IC90bXAvY2lsaXVtL2NvbmZpZy1tYXAKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgICAjIE5lZWRlZCB0byBiZSBhYmxlIHRvIGxvYWQga2VybmVsIG1vZHVsZXMKICAgICAgICAtIG5hbWU6IGxpYi1tb2R1bGVzCiAgICAgICAgICBtb3VudFBhdGg6IC9saWIvbW9kdWxlcwogICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgICAtIG5hbWU6IHh0YWJsZXMtbG9jawogICAgICAgICAgbW91bnRQYXRoOiAvcnVuL3h0YWJsZXMubG9jawogICAgICAgIC0gbmFtZTogaHViYmxlLXRscwogICAgICAgICAgbW91bnRQYXRoOiAvdmFyL2xpYi9jaWxpdW0vdGxzL2h1YmJsZQogICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgaW5pdENvbnRhaW5lcnM6CiAgICAgICMgUmVxdWlyZWQgdG8gbW91bnQgY2dyb3VwMiBmaWxlc3lzdGVtIG9uIHRoZSB1bmRlcmx5aW5nIEt1YmVybmV0ZXMgbm9kZS4KICAgICAgIyBXZSB1c2UgbnNlbnRlciBjb21tYW5kIHdpdGggaG9zdCdzIGNncm91cCBhbmQgbW91bnQgbmFtZXNwYWNlcyBlbmFibGVkLgogICAgICAtIG5hbWU6IG1vdW50LWNncm91cAogICAgICAgIGltYWdlOiAicXVheS5pby9jaWxpdW0vY2lsaXVtOnYxLjEyLjRAc2hhMjU2OjRiMDc0ZmNmYmE5MzI1YzE4ZTk3NTY5ZWQxOTg4NDY0MzA5YTVlYmY2NGJiYzc5YmVjNmYzZDU4Y2FmY2I4Y2YiCiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBDR1JPVVBfUk9PVAogICAgICAgICAgdmFsdWU6IC9ydW4vY2lsaXVtL2Nncm91cHYyCiAgICAgICAgLSBuYW1lOiBCSU5fUEFUSAogICAgICAgICAgdmFsdWU6IC9vcHQvY25pL2JpbgogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSBzaAogICAgICAgIC0gLWVjCiAgICAgICAgIyBUaGUgc3RhdGljYWxseSBsaW5rZWQgR28gcHJvZ3JhbSBiaW5hcnkgaXMgaW52b2tlZCB0byBhdm9pZCBhbnkKICAgICAgICAjIGRlcGVuZGVuY3kgb24gdXRpbGl0aWVzIGxpa2Ugc2ggYW5kIG1vdW50IHRoYXQgY2FuIGJlIG1pc3Npbmcgb24gY2VydGFpbgogICAgICAgICMgZGlzdHJvcyBpbnN0YWxsZWQgb24gdGhlIHVuZGVybHlpbmcgaG9zdC4gQ29weSB0aGUgYmluYXJ5IHRvIHRoZQogICAgICAgICMgc2FtZSBkaXJlY3Rvcnkgd2hlcmUgd2UgaW5zdGFsbCBjaWxpdW0gY25pIHBsdWdpbiBzbyB0aGF0IGV4ZWMgcGVybWlzc2lvbnMKICAgICAgICAjIGFyZSBhdmFpbGFibGUuCiAgICAgICAgLSB8CiAgICAgICAgICBjcCAvdXNyL2Jpbi9jaWxpdW0tbW91bnQgL2hvc3RiaW4vY2lsaXVtLW1vdW50OwogICAgICAgICAgbnNlbnRlciAtLWNncm91cD0vaG9zdHByb2MvMS9ucy9jZ3JvdXAgLS1tb3VudD0vaG9zdHByb2MvMS9ucy9tbnQgIiR7QklOX1BBVEh9L2NpbGl1bS1tb3VudCIgJENHUk9VUF9ST09UOwogICAgICAgICAgcm0gL2hvc3RiaW4vY2lsaXVtLW1vdW50CiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogaG9zdHByb2MKICAgICAgICAgIG1vdW50UGF0aDogL2hvc3Rwcm9jCiAgICAgICAgLSBuYW1lOiBjbmktcGF0aAogICAgICAgICAgbW91bnRQYXRoOiAvaG9zdGJpbgogICAgICAgIHRlcm1pbmF0aW9uTWVzc2FnZVBvbGljeTogRmFsbGJhY2tUb0xvZ3NPbkVycm9yCiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgc2VMaW51eE9wdGlvbnM6CiAgICAgICAgICAgIGxldmVsOiAnczAnCiAgICAgICAgICAgICMgUnVubmluZyB3aXRoIHNwY190IHNpbmNlIHdlIGhhdmUgcmVtb3ZlZCB0aGUgcHJpdmlsZWdlZCBtb2RlLgogICAgICAgICAgICAjIFVzZXJzIGNhbiBjaGFuZ2UgaXQgdG8gYSBkaWZmZXJlbnQgdHlwZSBhcyBsb25nIGFzIHRoZXkgaGF2ZSB0aGUKICAgICAgICAgICAgIyB0eXBlIGF2YWlsYWJsZSBvbiB0aGUgc3lzdGVtLgogICAgICAgICAgICB0eXBlOiAnc3BjX3QnCiAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgIGRyb3A6CiAgICAgICAgICAgICAgLSBBTEwKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICMgT25seSB1c2VkIGZvciAnbW91bnQnIGNncm91cAogICAgICAgICAgICAgIC0gU1lTX0FETUlOCiAgICAgICAgICAgICAgIyBVc2VkIGZvciBuc2VudGVyCiAgICAgICAgICAgICAgLSBTWVNfQ0hST09UCiAgICAgICAgICAgICAgLSBTWVNfUFRSQUNFCiAgICAgIC0gbmFtZTogYXBwbHktc3lzY3RsLW92ZXJ3cml0ZXMKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL2NpbGl1bTp2MS4xMi40QHNoYTI1Njo0YjA3NGZjZmJhOTMyNWMxOGU5NzU2OWVkMTk4ODQ2NDMwOWE1ZWJmNjRiYmM3OWJlYzZmM2Q1OGNhZmNiOGNmIgogICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogQklOX1BBVEgKICAgICAgICAgIHZhbHVlOiAvb3B0L2NuaS9iaW4KICAgICAgICBjb21tYW5kOgogICAgICAgIC0gc2gKICAgICAgICAtIC1lYwogICAgICAgICMgVGhlIHN0YXRpY2FsbHkgbGlua2VkIEdvIHByb2dyYW0gYmluYXJ5IGlzIGludm9rZWQgdG8gYXZvaWQgYW55CiAgICAgICAgIyBkZXBlbmRlbmN5IG9uIHV0aWxpdGllcyBsaWtlIHNoIHRoYXQgY2FuIGJlIG1pc3Npbmcgb24gY2VydGFpbgogICAgICAgICMgZGlzdHJvcyBpbnN0YWxsZWQgb24gdGhlIHVuZGVybHlpbmcgaG9zdC4gQ29weSB0aGUgYmluYXJ5IHRvIHRoZQogICAgICAgICMgc2FtZSBkaXJlY3Rvcnkgd2hlcmUgd2UgaW5zdGFsbCBjaWxpdW0gY25pIHBsdWdpbiBzbyB0aGF0IGV4ZWMgcGVybWlzc2lvbnMKICAgICAgICAjIGFyZSBhdmFpbGFibGUuCiAgICAgICAgLSB8CiAgICAgICAgICBjcCAvdXNyL2Jpbi9jaWxpdW0tc3lzY3RsZml4IC9ob3N0YmluL2NpbGl1bS1zeXNjdGxmaXg7CiAgICAgICAgICBuc2VudGVyIC0tbW91bnQ9L2hvc3Rwcm9jLzEvbnMvbW50ICIke0JJTl9QQVRIfS9jaWxpdW0tc3lzY3RsZml4IjsKICAgICAgICAgIHJtIC9ob3N0YmluL2NpbGl1bS1zeXNjdGxmaXgKICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgLSBuYW1lOiBob3N0cHJvYwogICAgICAgICAgbW91bnRQYXRoOiAvaG9zdHByb2MKICAgICAgICAtIG5hbWU6IGNuaS1wYXRoCiAgICAgICAgICBtb3VudFBhdGg6IC9ob3N0YmluCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBzZUxpbnV4T3B0aW9uczoKICAgICAgICAgICAgbGV2ZWw6ICdzMCcKICAgICAgICAgICAgIyBSdW5uaW5nIHdpdGggc3BjX3Qgc2luY2Ugd2UgaGF2ZSByZW1vdmVkIHRoZSBwcml2aWxlZ2VkIG1vZGUuCiAgICAgICAgICAgICMgVXNlcnMgY2FuIGNoYW5nZSBpdCB0byBhIGRpZmZlcmVudCB0eXBlIGFzIGxvbmcgYXMgdGhleSBoYXZlIHRoZQogICAgICAgICAgICAjIHR5cGUgYXZhaWxhYmxlIG9uIHRoZSBzeXN0ZW0uCiAgICAgICAgICAgIHR5cGU6ICdzcGNfdCcKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgZHJvcDoKICAgICAgICAgICAgICAtIEFMTAogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgICAgIyBSZXF1aXJlZCBpbiBvcmRlciB0byBhY2Nlc3MgaG9zdCdzIC9ldGMvc3lzY3RsLmQgZGlyCiAgICAgICAgICAgICAgLSBTWVNfQURNSU4KICAgICAgICAgICAgICAjIFVzZWQgZm9yIG5zZW50ZXIKICAgICAgICAgICAgICAtIFNZU19DSFJPT1QKICAgICAgICAgICAgICAtIFNZU19QVFJBQ0UKICAgICAgIyBNb3VudCB0aGUgYnBmIGZzIGlmIGl0IGlzIG5vdCBtb3VudGVkLiBXZSB3aWxsIHBlcmZvcm0gdGhpcyB0YXNrCiAgICAgICMgZnJvbSBhIHByaXZpbGVnZWQgY29udGFpbmVyIGJlY2F1c2UgdGhlIG1vdW50IHByb3BhZ2F0aW9uIGJpZGlyZWN0aW9uYWwKICAgICAgIyBvbmx5IHdvcmtzIGZyb20gcHJpdmlsZWdlZCBjb250YWluZXJzLgogICAgICAtIG5hbWU6IG1vdW50LWJwZi1mcwogICAgICAgIGltYWdlOiAicXVheS5pby9jaWxpdW0vY2lsaXVtOnYxLjEyLjRAc2hhMjU2OjRiMDc0ZmNmYmE5MzI1YzE4ZTk3NTY5ZWQxOTg4NDY0MzA5YTVlYmY2NGJiYzc5YmVjNmYzZDU4Y2FmY2I4Y2YiCiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBhcmdzOgogICAgICAgIC0gJ21vdW50IHwgZ3JlcCAiL3N5cy9mcy9icGYgdHlwZSBicGYiIHx8IG1vdW50IC10IGJwZiBicGYgL3N5cy9mcy9icGYnCiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIC9iaW4vYmFzaAogICAgICAgIC0gLWMKICAgICAgICAtIC0tCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogYnBmLW1hcHMKICAgICAgICAgIG1vdW50UGF0aDogL3N5cy9mcy9icGYKICAgICAgICAgIG1vdW50UHJvcGFnYXRpb246IEJpZGlyZWN0aW9uYWwKICAgICAgLSBuYW1lOiBjbGVhbi1jaWxpdW0tc3RhdGUKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL2NpbGl1bTp2MS4xMi40QHNoYTI1Njo0YjA3NGZjZmJhOTMyNWMxOGU5NzU2OWVkMTk4ODQ2NDMwOWE1ZWJmNjRiYmM3OWJlYzZmM2Q1OGNhZmNiOGNmIgogICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIC9pbml0LWNvbnRhaW5lci5zaAogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IENJTElVTV9BTExfU1RBVEUKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgIG5hbWU6IGNpbGl1bS1jb25maWcKICAgICAgICAgICAgICBrZXk6IGNsZWFuLWNpbGl1bS1zdGF0ZQogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgLSBuYW1lOiBDSUxJVU1fQlBGX1NUQVRFCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAga2V5OiBjbGVhbi1jaWxpdW0tYnBmLXN0YXRlCiAgICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9IT1NUCiAgICAgICAgICB2YWx1ZTogIjE3Mi4xOC4yLjI1MiIKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBzZUxpbnV4T3B0aW9uczoKICAgICAgICAgICAgbGV2ZWw6ICdzMCcKICAgICAgICAgICAgIyBSdW5uaW5nIHdpdGggc3BjX3Qgc2luY2Ugd2UgaGF2ZSByZW1vdmVkIHRoZSBwcml2aWxlZ2VkIG1vZGUuCiAgICAgICAgICAgICMgVXNlcnMgY2FuIGNoYW5nZSBpdCB0byBhIGRpZmZlcmVudCB0eXBlIGFzIGxvbmcgYXMgdGhleSBoYXZlIHRoZQogICAgICAgICAgICAjIHR5cGUgYXZhaWxhYmxlIG9uIHRoZSBzeXN0ZW0uCiAgICAgICAgICAgIHR5cGU6ICdzcGNfdCcKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgIyBNb3N0IG9mIHRoZSBjYXBhYmlsaXRpZXMgaGVyZSBhcmUgdGhlIHNhbWUgb25lcyB1c2VkIGluIHRoZQogICAgICAgICAgICAjIGNpbGl1bS1hZ2VudCdzIGNvbnRhaW5lciBiZWNhdXNlIHRoaXMgY29udGFpbmVyIGNhbiBiZSB1c2VkIHRvCiAgICAgICAgICAgICMgdW5pbnN0YWxsIGFsbCBDaWxpdW0gcmVzb3VyY2VzLCBhbmQgdGhlcmVmb3JlIGl0IGlzIGxpa2VseSB0aGF0CiAgICAgICAgICAgICMgd2lsbCBuZWVkIHRoZSBzYW1lIGNhcGFiaWxpdGllcy4KICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICMgVXNlZCBzaW5jZSBjaWxpdW0gbW9kaWZpZXMgcm91dGluZyB0YWJsZXMsIGV0Yy4uLgogICAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgICAgIyBVc2VkIGluIGlwdGFibGVzLiBDb25zaWRlciByZW1vdmluZyBvbmNlIHdlIGFyZSBpcHRhYmxlcy1mcmVlCiAgICAgICAgICAgICAgLSBTWVNfTU9EVUxFCiAgICAgICAgICAgICAgIyBXZSBuZWVkIGl0IGZvciBub3cgYnV0IG1pZ2h0IG5vdCBuZWVkIGl0IGZvciA+PSA1LjExIHNwZWNpYWxseQogICAgICAgICAgICAgICMgZm9yIHRoZSAnU1lTX1JFU09VUkNFJy4KICAgICAgICAgICAgICAjIEluID49IDUuOCB0aGVyZSdzIGFscmVhZHkgQlBGIGFuZCBQRVJNT04gY2FwYWJpbGl0aWVzCiAgICAgICAgICAgICAgLSBTWVNfQURNSU4KICAgICAgICAgICAgICAjIENvdWxkIGJlIGFuIGFsdGVybmF0aXZlIGZvciB0aGUgU1lTX0FETUlOIGZvciB0aGUgUkxJTUlUX05QUk9DCiAgICAgICAgICAgICAgLSBTWVNfUkVTT1VSQ0UKICAgICAgICAgICAgICAjIEJvdGggUEVSRk1PTiBhbmQgQlBGIHJlcXVpcmVzIGtlcm5lbCA1LjgsIGNvbnRhaW5lciBydW50aW1lCiAgICAgICAgICAgICAgIyBjcmktbyA+PSB2MS4yMi4wIG9yIGNvbnRhaW5lcmQgPj0gdjEuNS4wLgogICAgICAgICAgICAgICMgSWYgYXZhaWxhYmxlLCBTWVNfQURNSU4gY2FuIGJlIHJlbW92ZWQuCiAgICAgICAgICAgICAgIy0gUEVSRk1PTgogICAgICAgICAgICAgICMtIEJQRgogICAgICAgICAgICBkcm9wOgogICAgICAgICAgICAgIC0gQUxMCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogYnBmLW1hcHMKICAgICAgICAgIG1vdW50UGF0aDogL3N5cy9mcy9icGYKICAgICAgICAgICMgUmVxdWlyZWQgdG8gbW91bnQgY2dyb3VwIGZpbGVzeXN0ZW0gZnJvbSB0aGUgaG9zdCB0byBjaWxpdW0gYWdlbnQgcG9kCiAgICAgICAgLSBuYW1lOiBjaWxpdW0tY2dyb3VwCiAgICAgICAgICBtb3VudFBhdGg6IC9ydW4vY2lsaXVtL2Nncm91cHYyCiAgICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBIb3N0VG9Db250YWluZXIKICAgICAgICAtIG5hbWU6IGNpbGl1bS1ydW4KICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9ydW4vY2lsaXVtCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgcmVxdWVzdHM6CiAgICAgICAgICAgIGNwdTogMTAwbQogICAgICAgICAgICBtZW1vcnk6IDEwME1pICMgd2FpdC1mb3Ita3ViZS1wcm94eQogICAgICByZXN0YXJ0UG9saWN5OiBBbHdheXMKICAgICAgcHJpb3JpdHlDbGFzc05hbWU6IHN5c3RlbS1ub2RlLWNyaXRpY2FsCiAgICAgIHNlcnZpY2VBY2NvdW50OiAiY2lsaXVtIgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6ICJjaWxpdW0iCiAgICAgIHRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzOiAxCiAgICAgIGhvc3ROZXR3b3JrOiB0cnVlCiAgICAgIGFmZmluaXR5OgogICAgICAgIHBvZEFudGlBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAtIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICAgICAgbWF0Y2hMYWJlbHM6CiAgICAgICAgICAgICAgICBrOHMtYXBwOiBjaWxpdW0KICAgICAgICAgICAgdG9wb2xvZ3lLZXk6IGt1YmVybmV0ZXMuaW8vaG9zdG5hbWUKICAgICAgbm9kZVNlbGVjdG9yOgogICAgICAgIGt1YmVybmV0ZXMuaW8vb3M6IGxpbnV4CiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0gb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAgICMgVG8ga2VlcCBzdGF0ZSBiZXR3ZWVuIHJlc3RhcnRzIC8gdXBncmFkZXMKICAgICAgLSBuYW1lOiBjaWxpdW0tcnVuCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvdmFyL3J1bi9jaWxpdW0KICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICAgIyBUbyBrZWVwIHN0YXRlIGJldHdlZW4gcmVzdGFydHMgLyB1cGdyYWRlcyBmb3IgYnBmIG1hcHMKICAgICAgLSBuYW1lOiBicGYtbWFwcwogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL3N5cy9mcy9icGYKICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICMgVG8gbW91bnQgY2dyb3VwMiBmaWxlc3lzdGVtIG9uIHRoZSBob3N0CiAgICAgIC0gbmFtZTogaG9zdHByb2MKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9wcm9jCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnkKICAgICAgIyBUbyBrZWVwIHN0YXRlIGJldHdlZW4gcmVzdGFydHMgLyB1cGdyYWRlcyBmb3IgY2dyb3VwMiBmaWxlc3lzdGVtCiAgICAgIC0gbmFtZTogY2lsaXVtLWNncm91cAogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL3J1bi9jaWxpdW0vY2dyb3VwdjIKICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICMgVG8gaW5zdGFsbCBjaWxpdW0gY25pIHBsdWdpbiBpbiB0aGUgaG9zdAogICAgICAtIG5hbWU6IGNuaS1wYXRoCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAgL29wdC9jbmkvYmluCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnlPckNyZWF0ZQogICAgICAgICMgVG8gaW5zdGFsbCBjaWxpdW0gY25pIGNvbmZpZ3VyYXRpb24gaW4gdGhlIGhvc3QKICAgICAgLSBuYW1lOiBldGMtY25pLW5ldGQKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9ldGMvY25pL25ldC5kCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnlPckNyZWF0ZQogICAgICAgICMgVG8gYmUgYWJsZSB0byBsb2FkIGtlcm5lbCBtb2R1bGVzCiAgICAgIC0gbmFtZTogbGliLW1vZHVsZXMKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9saWIvbW9kdWxlcwogICAgICAgICMgVG8gYWNjZXNzIGlwdGFibGVzIGNvbmN1cnJlbnRseSB3aXRoIG90aGVyIHByb2Nlc3NlcyAoZS5nLiBrdWJlLXByb3h5KQogICAgICAtIG5hbWU6IHh0YWJsZXMtbG9jawogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL3J1bi94dGFibGVzLmxvY2sKICAgICAgICAgIHR5cGU6IEZpbGVPckNyZWF0ZQogICAgICAgICMgVG8gcmVhZCB0aGUgY2x1c3Rlcm1lc2ggY29uZmlndXJhdGlvbgogICAgICAtIG5hbWU6IGNsdXN0ZXJtZXNoLXNlY3JldHMKICAgICAgICBzZWNyZXQ6CiAgICAgICAgICBzZWNyZXROYW1lOiBjaWxpdW0tY2x1c3Rlcm1lc2gKICAgICAgICAgICMgbm90ZTogdGhlIGxlYWRpbmcgemVybyBtZWFucyB0aGlzIG51bWJlciBpcyBpbiBvY3RhbCByZXByZXNlbnRhdGlvbjogZG8gbm90IHJlbW92ZSBpdAogICAgICAgICAgZGVmYXVsdE1vZGU6IDA0MDAKICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgIyBUbyByZWFkIHRoZSBjb25maWd1cmF0aW9uIGZyb20gdGhlIGNvbmZpZyBtYXAKICAgICAgLSBuYW1lOiBjaWxpdW0tY29uZmlnLXBhdGgKICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgIC0gbmFtZTogaG9zdC1wcm9jLXN5cy1uZXQKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9wcm9jL3N5cy9uZXQKICAgICAgICAgIHR5cGU6IERpcmVjdG9yeQogICAgICAtIG5hbWU6IGhvc3QtcHJvYy1zeXMta2VybmVsCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvcHJvYy9zeXMva2VybmVsCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnkKICAgICAgLSBuYW1lOiBodWJibGUtdGxzCiAgICAgICAgcHJvamVjdGVkOgogICAgICAgICAgIyBub3RlOiB0aGUgbGVhZGluZyB6ZXJvIG1lYW5zIHRoaXMgbnVtYmVyIGlzIGluIG9jdGFsIHJlcHJlc2VudGF0aW9uOiBkbyBub3QgcmVtb3ZlIGl0CiAgICAgICAgICBkZWZhdWx0TW9kZTogMDQwMAogICAgICAgICAgc291cmNlczoKICAgICAgICAgIC0gc2VjcmV0OgogICAgICAgICAgICAgIG5hbWU6IGh1YmJsZS1zZXJ2ZXItY2VydHMKICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgIC0ga2V5OiBjYS5jcnQKICAgICAgICAgICAgICAgIHBhdGg6IGNsaWVudC1jYS5jcnQKICAgICAgICAgICAgICAtIGtleTogdGxzLmNydAogICAgICAgICAgICAgICAgcGF0aDogc2VydmVyLmNydAogICAgICAgICAgICAgIC0ga2V5OiB0bHMua2V5CiAgICAgICAgICAgICAgICBwYXRoOiBzZXJ2ZXIua2V5Ci0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tb3BlcmF0b3IvZGVwbG95bWVudC55YW1sCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKICBuYW1lc3BhY2U6IGZsdXgtc3lzdGVtCiAgbGFiZWxzOgogICAgaW8uY2lsaXVtL2FwcDogb3BlcmF0b3IKICAgIG5hbWU6IGNpbGl1bS1vcGVyYXRvcgpzcGVjOgogICMgU2VlIGRvY3Mgb24gU2VydmVyQ2FwYWJpbGl0aWVzLkxlYXNlc1Jlc291cmNlTG9jayBpbiBmaWxlIHBrZy9rOHMvdmVyc2lvbi92ZXJzaW9uLmdvCiAgIyBmb3IgbW9yZSBkZXRhaWxzLgogIHJlcGxpY2FzOiAxCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgaW8uY2lsaXVtL2FwcDogb3BlcmF0b3IKICAgICAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCiAgc3RyYXRlZ3k6CiAgICByb2xsaW5nVXBkYXRlOgogICAgICBtYXhTdXJnZTogMQogICAgICBtYXhVbmF2YWlsYWJsZTogMQogICAgdHlwZTogUm9sbGluZ1VwZGF0ZQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGFubm90YXRpb25zOgogICAgICBsYWJlbHM6CiAgICAgICAgaW8uY2lsaXVtL2FwcDogb3BlcmF0b3IKICAgICAgICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKICAgIHNwZWM6CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogY2lsaXVtLW9wZXJhdG9yCiAgICAgICAgaW1hZ2U6ICJxdWF5LmlvL2NpbGl1bS9vcGVyYXRvci1nZW5lcmljOnYxLjEyLjRAc2hhMjU2OjA3MTA4OWVjNWJjYTFmNTU2YWZiOGU1NDFkOTk3MmEwZGZiMDlkMWUyNTUwNGFlNjQyY2VkMDIxZWNiZWRiZDEiCiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBjb21tYW5kOgogICAgICAgIC0gY2lsaXVtLW9wZXJhdG9yLWdlbmVyaWMKICAgICAgICBhcmdzOgogICAgICAgIC0gLS1jb25maWctZGlyPS90bXAvY2lsaXVtL2NvbmZpZy1tYXAKICAgICAgICAtIC0tZGVidWc9JChDSUxJVU1fREVCVUcpCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogSzhTX05PREVfTkFNRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgIGZpZWxkUGF0aDogc3BlYy5ub2RlTmFtZQogICAgICAgIC0gbmFtZTogQ0lMSVVNX0s4U19OQU1FU1BBQ0UKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgYXBpVmVyc2lvbjogdjEKICAgICAgICAgICAgICBmaWVsZFBhdGg6IG1ldGFkYXRhLm5hbWVzcGFjZQogICAgICAgIC0gbmFtZTogQ0lMSVVNX0RFQlVHCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBrZXk6IGRlYnVnCiAgICAgICAgICAgICAgbmFtZTogY2lsaXVtLWNvbmZpZwogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX1NFUlZJQ0VfSE9TVAogICAgICAgICAgdmFsdWU6ICIxNzIuMTguMi4yNTIiCiAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX1NFUlZJQ0VfUE9SVAogICAgICAgICAgdmFsdWU6ICI2NDQzIgogICAgICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICBob3N0OiAiMTI3LjAuMC4xIgogICAgICAgICAgICBwYXRoOiAvaGVhbHRoegogICAgICAgICAgICBwb3J0OiA5MjM0CiAgICAgICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogNjAKICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDEwCiAgICAgICAgICB0aW1lb3V0U2Vjb25kczogMwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGNpbGl1bS1jb25maWctcGF0aAogICAgICAgICAgbW91bnRQYXRoOiAvdG1wL2NpbGl1bS9jb25maWctbWFwCiAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgIHRlcm1pbmF0aW9uTWVzc2FnZVBvbGljeTogRmFsbGJhY2tUb0xvZ3NPbkVycm9yCiAgICAgIGhvc3ROZXR3b3JrOiB0cnVlCiAgICAgIHJlc3RhcnRQb2xpY3k6IEFsd2F5cwogICAgICBwcmlvcml0eUNsYXNzTmFtZTogc3lzdGVtLWNsdXN0ZXItY3JpdGljYWwKICAgICAgc2VydmljZUFjY291bnQ6ICJjaWxpdW0tb3BlcmF0b3IiCiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogImNpbGl1bS1vcGVyYXRvciIKICAgICAgIyBJbiBIQSBtb2RlLCBjaWxpdW0tb3BlcmF0b3IgcG9kcyBtdXN0IG5vdCBiZSBzY2hlZHVsZWQgb24gdGhlIHNhbWUKICAgICAgIyBub2RlIGFzIHRoZXkgd2lsbCBjbGFzaCB3aXRoIGVhY2ggb3RoZXIuCiAgICAgIGFmZmluaXR5OgogICAgICAgIHBvZEFudGlBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAtIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICAgICAgbWF0Y2hMYWJlbHM6CiAgICAgICAgICAgICAgICBpby5jaWxpdW0vYXBwOiBvcGVyYXRvcgogICAgICAgICAgICB0b3BvbG9neUtleToga3ViZXJuZXRlcy5pby9ob3N0bmFtZQogICAgICBub2RlU2VsZWN0b3I6CiAgICAgICAga3ViZXJuZXRlcy5pby9vczogbGludXgKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgICAgLSBvcGVyYXRvcjogRXhpc3RzCiAgICAgIHZvbHVtZXM6CiAgICAgICAgIyBUbyByZWFkIHRoZSBjb25maWd1cmF0aW9uIGZyb20gdGhlIGNvbmZpZyBtYXAKICAgICAgLSBuYW1lOiBjaWxpdW0tY29uZmlnLXBhdGgKICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAtMgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMwogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=10min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "2635838707",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node03.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAtMgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMwogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "cilium-install",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "148eeb160e8250d3b8a4d9be827552d958e16915d7c097c95451c14c1aea5932",
            "rendered": "---\n# Source: cilium/templates/cilium-agent/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium\"\n  namespace: flux-system\nlable\n---\n# Source: cilium/templates/cilium-operator/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium-operator\"\n  namespace: flux-system\n---\n# Source: cilium/templates/cilium-ca-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cilium-ca\n  namespace: flux-system\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSSt0Y1VJbWREWUllS3NUM2p1N0NkREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qTTFOREEzV2hjTk1qVXhNakExTWpNMQpOREEzV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ3hweHR2WXlTYVpUT0JmNWVkZVJYaFVkUDhydW12YzYveWJNZUJFZmdwaFMvNE1GajMKTm9ybUVtTTQrcDBhTW82clU1SElQQ2RwSE1KRDIrTzJpOENWUXdqd0N5anNHMm5BQ1Q3a1VvVmgyRUFBam5RUgo3UytvbFp0MTcvbXY2T2p0MFkzNnBySmRUOG4xdkVEQVRxZGo4WVJzek1YTTNqQk5URzNQWnhtT0ZuYXlzZlJJCkpBc1JtWnd3V3dtajY0UkZyRlM2UENZdExMTDEyZmoySEtVcjZWV1pxelNmaElDNlB5SHQ5YVRqV1NXWC9PUS8KQXZxTWYyUWk0NVJucGwwNk1ELzhEMW53VitXRDFuVXNuTGV2VXp3UXJIUDUxZW1VUXhkOVhnQVFlVVJVak9SdwovM1U3YzZvWHFUUlNMNVBKdlNzaHg3NjdqelJYT3B4VndYOXBBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVTK2Z4cVAvMW5ycXc5dEVMd1pRTGhnYm1XYU13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKN3M1TFRCMEF2TGVKTjdPOFF2S3BCTkhrc1VqTU0xaVc3MDlhTUhYZW5GUkxWeUhJcGhWaVRDCjhZTVEzS3M5K0pRYmFpL1Vaby9BKzFpbXg0aHBSK2hwdDA4dWppU2FEZDZiRXMrNFZmVEdoV2RWNjU1QnQvMTYKV3B3NldtRHU0L091cU1KYzFjLzNPRWJ1ZjZWc01TM1lDNFVzOU5ucVpoK0tFMXVsMnNuWUFrN3BZd25JMDV5OQpIRUtHQnFWUFRJcGFILzB2TmowbGh1WmlqUGhRQkg5UjZyZ3JjTkNJZFZRaE94UTdMM1JoTWQxSSsrQTNSRmp2CjVPb2poZ2tHOWE0N1ExUUMxUFBJM2VKOURVWTlGQlc4dnpZc244eFpHMzVXWTJtME9IT1lBdlpjQ0llK2I1NEkKN3ZQODVPbDJXbmNnUGM5MXgrcm1neGlITUhFQTUrYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc2FjYmIyTWttbVV6Z1grWG5Ya1Y0VkhUL0s3cHIzT3Y4bXpIZ1JINEtZVXYrREJZCjl6YUs1aEpqT1BxZEdqS09xMU9SeUR3bmFSekNROXZqdG92QWxVTUk4QXNvN0J0cHdBays1RktGWWRoQUFJNTAKRWUwdnFKV2JkZS81citqbzdkR04rcWF5WFUvSjlieEF3RTZuWS9HRWJNekZ6TjR3VFV4dHoyY1pqaFoyc3JIMApTQ1FMRVptY01Gc0pvK3VFUmF4VXVqd21MU3l5OWRuNDloeWxLK2xWbWFzMG40U0F1ajhoN2ZXazQxa2xsL3prClB3TDZqSDlrSXVPVVo2WmRPakEvL0E5WjhGZmxnOVoxTEp5M3IxTThFS3h6K2RYcGxFTVhmVjRBRUhsRVZJemsKY1A5MU8zT3FGNmswVWkrVHliMHJJY2UrdTQ4MFZ6cWNWY0YvYVFJREFRQUJBb0lCQVFDSjYvS2d4NWZqUmk1MgptMWhhS1dlVFJyUU51TDQwT055Z21WTktJV2xJMHQ0ckVWNEFqNWZHaHdBQmZJLzdoc1M4dm1TdjBBUEkxMHI2CjQvd2wvTm5IQ0FRb1dJR3N6SnVOTzZCWUlyanEvYml5dGVYbkJQMjdKR3ROWk1HMGtGNUdSQ3EyTGpUTHZPWk8Kb1ppanRHekFhd0VrZHRZWjkyWUluUTJqdDZkZlowUiszL2JKSHhYU1NGRitTMEE1MmVFZUdFZjRYTHc2L1VvQgpEZW1CVTVrOUZxeXUwc1BVUkNMVWR5TXhiazhzQ3d5aEJCMGozM0hBazVOTm91OWR3OXBJbi9VR2pSVm13RG1ZCk1rczhndUlVd3BBcVUzSGY1OHhibEsyMk5yNGZHeC9YS0M1b2NmSG82OVFneTFscWlLQWtXOHNSd0JQVEhSaUYKdWRlNTd2c0JBb0dCQU1FdE1zb0xuZzFlRE9wQ0szUlRpSjlRRGNJR2pQZ1BNZ1dlR3A3Vm1OM0cwc0xvbzRBYQpFSjhTbHo1b0svZU5XNlB0L0p0c2k3eCtoM2EyR2JSVGFpaEQzN3VTWDFtV3VMN0JSak1WTG9uS21uNFdSN294CmlTUWFQNEVJOXJvcExOUXZFS2NsUitCam8yR3ZkOHVBb3g0NXE3OHpUZ1ZMTGpnZkY5WUdEN0g3QW9HQkFPdHQKZS84enVCRzlZVjJIcENqRkpVRVliaFJqby9lVDNsQ2NpYThQeU9DLytnYVdvTHB4Y3FOaCtHOFNhMU1LTDNTUAoxWGRRRVdDcnVsS3hHcmN1RDN5MVRBVlluRGZNSmp2ajFQMlc0RmI5K2V6RUhiMjEwT1ZXdjVpbmE0U1dCajZnCkliblV1MUFlZ2JvRGtST0pQeDliN0NiS3JRNnMvanJXSnRBSWZ2cnJBb0dBVWNRcjUxR2JpTlR5YW9Xdmx3RjAKcHRwZnVHekZab29vQmpDeDIrRlZYeW8xTThMODBkQTJrTjV4bmp6QnYzclorejFVMndUSzhQSXRySlhQczRCTApRdGZYNzdFNUl0YWxSRGpTMmZSeFNtbXprd01qUVRDT2QvV1VRNjNqb1ZDa1pQdTI5TWpXNzZlOUZEQU5hTm4rCk1XRC96V0tOOTdlbXpLSjhtRjdnYmRrQ2dZRUF6REJzTUQ2aU1qaW4zdUFMUUJVbEo1MVJ0RHRyZGdwNDhqK2kKcHdRd3ZNV2t5OXdPMFVZZUlKaVRTWHFYUFRHRFVUeUM3M1d4YkwvazNWMmdCeXBhNGxXMzlwY1EvdEFBaFVjbwpiejFSbkFHeHAybTlSZElRdVNpUkNveUNrejh2Y1ZlZmlMWjZNNVlSKzh5bUltU1NLOWVsTFV2eDV0MmhybFFZCjI2dlN2anNDZ1lCczJkaFZFZ2ZVa2l1ZmlyODc2MlFVek1iY3dGVDlkYlZFSFJWVlEyYVdBUERiVjlMU0h6SDgKWGlJSysvSTIzNkcwbHBPdnZRL1hkLzJvY2NncG9YZEhSNUdncjhjQmNqNjRoaHZVb3liNFNHYWlOS0s3N3lCTgpiTU1rTkVxYlhwdW1oZHBxekY4cGk1ekFhMHZqSzhiZG1ITmQ3TGNxejZiQXRiaEN5a1BaeFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\n---\n# Source: cilium/templates/hubble/tls-helm/server-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: hubble-server-certs\n  namespace: flux-system\ntype: kubernetes.io/tls\ndata:\n  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSSt0Y1VJbWREWUllS3NUM2p1N0NkREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qTTFOREEzV2hjTk1qVXhNakExTWpNMQpOREEzV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ3hweHR2WXlTYVpUT0JmNWVkZVJYaFVkUDhydW12YzYveWJNZUJFZmdwaFMvNE1GajMKTm9ybUVtTTQrcDBhTW82clU1SElQQ2RwSE1KRDIrTzJpOENWUXdqd0N5anNHMm5BQ1Q3a1VvVmgyRUFBam5RUgo3UytvbFp0MTcvbXY2T2p0MFkzNnBySmRUOG4xdkVEQVRxZGo4WVJzek1YTTNqQk5URzNQWnhtT0ZuYXlzZlJJCkpBc1JtWnd3V3dtajY0UkZyRlM2UENZdExMTDEyZmoySEtVcjZWV1pxelNmaElDNlB5SHQ5YVRqV1NXWC9PUS8KQXZxTWYyUWk0NVJucGwwNk1ELzhEMW53VitXRDFuVXNuTGV2VXp3UXJIUDUxZW1VUXhkOVhnQVFlVVJVak9SdwovM1U3YzZvWHFUUlNMNVBKdlNzaHg3NjdqelJYT3B4VndYOXBBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVTK2Z4cVAvMW5ycXc5dEVMd1pRTGhnYm1XYU13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKN3M1TFRCMEF2TGVKTjdPOFF2S3BCTkhrc1VqTU0xaVc3MDlhTUhYZW5GUkxWeUhJcGhWaVRDCjhZTVEzS3M5K0pRYmFpL1Vaby9BKzFpbXg0aHBSK2hwdDA4dWppU2FEZDZiRXMrNFZmVEdoV2RWNjU1QnQvMTYKV3B3NldtRHU0L091cU1KYzFjLzNPRWJ1ZjZWc01TM1lDNFVzOU5ucVpoK0tFMXVsMnNuWUFrN3BZd25JMDV5OQpIRUtHQnFWUFRJcGFILzB2TmowbGh1WmlqUGhRQkg5UjZyZ3JjTkNJZFZRaE94UTdMM1JoTWQxSSsrQTNSRmp2CjVPb2poZ2tHOWE0N1ExUUMxUFBJM2VKOURVWTlGQlc4dnpZc244eFpHMzVXWTJtME9IT1lBdlpjQ0llK2I1NEkKN3ZQODVPbDJXbmNnUGM5MXgrcm1neGlITUhFQTUrYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURWekNDQWorZ0F3SUJBZ0lSQVBvdTl0VTY3a3EzUmJHMTY3NWdpNDh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl5TVRJd05qSXpOVFF3TjFvWERUSTFNVEl3TlRJegpOVFF3TjFvd0tqRW9NQ1lHQTFVRUF3d2ZLaTVqYUc5dVozVnpMbWgxWW1Kc1pTMW5jbkJqTG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1EVXJFYXYwUmNKYTlTalk0TXkKbWFFWXI0ZEFidXdscWJuejJQRGFFTXRKQ3hJOWRCangzcmhWTFN5ZlQ1OGZjd2xYYjMvNnV1dFdsZHYrQ1o4Zgo4dy93aGJkL1FzeVlWZWwzZllOUFFEN3pTMyt6Z00wWFhOOW9pb2dmTHhXa1UzMngzSFc3bDhrYmJ6MmdBUm42CjhVSUozT0NWYklFSWU1VEwrVVd0ckNTSVZXWmcxbk5oYlZUaWVKbjZTcGY2NC9xVURGUC9qRFFaM3NFWVF2bVQKYUQzaFpxN3NMVTE2OFBoWlJmSVlma0c0ZjB1dWhFSlVHUGREbjd3VVFxTDhUOWJDL0V1QkpFYWJPcnlnNVRUOQpLWWh5a3l1Q1dFK004RVJ5b2JBSjAvRUdEWkJiYnVlcTY4bDFwOHpwUG42MkUyTzdSUWJLRDIwQS8rbDd2K2o1CjRtY0NBd0VBQWFPQmpUQ0JpakFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVVMrZnhxUC8xbnJxdwo5dEVMd1pRTGhnYm1XYU13S2dZRFZSMFJCQ013SVlJZktpNWphRzl1WjNWekxtaDFZbUpzWlMxbmNuQmpMbU5wCmJHbDFiUzVwYnpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUFwRGFwdzFhZHcxSjR2eXBzZ1pRUlZBMGpPMk0Kb0xOUWQwMDRKdmlkSmF2TkNqai9uNFNxOWtSdmJTKzYzMkFtUU44TGkzQ3ZnSFhLc08rcis3M1B0cHRjWFkrYworaFZOT0EyZktwbzVXeHo2dU9DUVVhOEhQYkJoYm40NkxsT1JOOFgzb09GbS9vMmtwVlNabC9rUllNN09aN1pXCmhlSHZ2ZWRabWJ4aWg0RHFzZ2ZCUGRTdm5VYTN3b0NJRTBZTlN5bVlpSEFheWhHVlQyV0hSRm9WaHhXZlhLWjAKZTkrUFFSSkVzc3Q0K3RXcDNnbXhnK2xCc251NHBwT0RBdmxWMk15bW5URm9jd2ljS1BDaHg4anJsSUd3Sy9HZApDYkVLT1FPT0doTHM4R1BPdXQwRkFNeVF0RElpUGdtVmZyN010MGNkVGVMZFBVZEwxTVo3TFg2MEpBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd05Tc1JxL1JGd2xyMUtOamd6S1pvUml2aDBCdTdDV3B1ZlBZOE5vUXkwa0xFajEwCkdQSGV1RlV0TEo5UG54OXpDVmR2Zi9xNjYxYVYyLzRKbngvekQvQ0Z0MzlDekpoVjZYZDlnMDlBUHZOTGY3T0EKelJkYzMyaUtpQjh2RmFSVGZiSGNkYnVYeVJ0dlBhQUJHZnJ4UWduYzRKVnNnUWg3bE12NVJhMnNKSWhWWm1EVwpjMkZ0Vk9KNG1mcEtsL3JqK3BRTVUvK01OQm5ld1JoQytaTm9QZUZtcnV3dFRYcncrRmxGOGhoK1FiaC9TNjZFClFsUVk5ME9mdkJSQ292eFAxc0w4UzRFa1JwczZ2S0RsTlAwcGlIS1RLNEpZVDR6d1JIS2hzQW5UOFFZTmtGdHUKNTZycnlYV256T2srZnJZVFk3dEZCc29QYlFELzZYdS82UG5pWndJREFRQUJBb0lCQVFDNGRQaFRLZTRHYm1HeQo1NVRTdEwyWEI4a294UzhXUURUcWgyTjNpZkhVdEF1ZUtDRDlsNmtvaFhvUUhGa0s2d2VjNFFIczE0aWtoSkFZCkFCdHVGeDdvbVhrZi9lR0ZXeGVibkV6NUpmOWIrRm01VDVtZkZvRWx5SmZ6L0hpSzZFVmhrSmxHR2V2cFdaQUEKMENVZG1CbmV4UlovMHhBWElta3MvaTEyUk5yTm1kK1pzTVpxbTU2YjROWUlFNkxHMVBTSno2ekl1cUpOWlIyYgp5c1EzT0VYOWlrdTI5VlV0MDZvOFl2VUJsNmVjS0ZwRFIxNVRCNHVuRlhrWVRKYS9FU25jQkV2WktpTUVSbENjCkJ1UXA2TUZvVFAvVXlXOTFBUTY1MnZLMERQbURlZ09MRTRQNW9Gbk9RVUVzR1BoaE54eUQ4bys2b2pWYkNpKzYKdS80SjhkZFpBb0dCQU4vY1hjMXkxUG1OUmtvZlJxNDlZcFF6U1NPU1ArUUZ4R2ZBaFJ5Ri95RmJPeUpnMmd2OAp3ZC9jcjcwc3pzeFpTNVl0b2hlRTBLbis3RCtqamVNMjJSK2dDWGlDZTVYbFhLQ0drZnIyRDRZSnc4cEVUQ2x3ClR2YjF0aWx6UlpkWkhQSUZxWGF6OUdDMnN4Yit2Y3dzUzNqWlB5aVdhcmpoNGFmYkhjTnpKODJMQW9HQkFOeUQKMlNtTTRmMG56czgyQy9aZ2xSN3kzZk5GTHVpRVNVSmFrZXE4KzRwRXJtL1l0TWExb3JGbDlndXJkUGVhSlAxcwpFZDJhWkQ2dURKOG9sakFpKzBhNzBHdDRWdTJBK041YkJqcUZQaVRiUWpNSDJhTWo3TC9vOHBjakt4UHVrN3F3ClB6d1J6VnNxd2pWcEgxWkVjKzU1TU5kRGFMVzBiZHJNYkdvSGp0SVZBb0dBUnJhM3N0UlpUbE5BSnQzbVY5ZncKTWR4WmVERVVtWlR3eTgxV3Z3SGM2ODZEeVlKS25vckRPMUhjK2FjVDFCMUk4VEdOQ0Z6ZUJUVVByN0tjZVcregorbmQxUm1vQlhBSk4xaTlzSVpoa292U21zbGdNcnZKWkgwM1NzeGxFbkdCNzhqK3pubG1PRXBiano1bThucWhIClZ1OVpNaHNCcjFFN0ZPajBaKzhTWGEwQ2dZQU0rWFQ5ak54L0dLaUNhSnVyazJNeXZ2ZHdLTkhwdkY3VEdLRWQKUHFGT01WeFNHRjRLa3dWUGlzQS9UNGRDU2orQzZhampjUUlVN2dpd0ZLTkJrYzFYREJYblBOMWdmQVlvanhKKwp2dmc1RXUyQ015UUxCVUlZeUl2OWVJUkFWL2s1TXNXRnMwWng1c0ltZ2xqbHFvRm50cG01RUs1SWdxVTBDbk1XCmlmdE5RUUtCZ0JNL0FoY1dPMTNuT1VnNUx6bldJaHVoZlo0N1R3aFJGT1RwZWRxZTlWUGVycXBuSDRLbmVKR0kKRlZaUDlCME03K3V5QWgzNmdjYXl1NmRCbnZsQk0vWkc1ZHo1S1RwdWp4YjdOLzcySDVUWmM3NlR3OW5QTXVNcQpDSGZFdkxyWFRaWHpxb3ZucEdRWmlHMUFJRnd3TWxqSEY0ald4UTZiQWlwQ2J4SFN6Mm5FCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n---\n# Source: cilium/templates/cilium-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cilium-config\n  namespace: flux-system\ndata:\n\n  # Identity allocation mode selects how identities are shared between cilium\n  # nodes by setting how they are stored. The options are \"crd\" or \"kvstore\".\n  # - \"crd\" stores identities in kubernetes as CRDs (custom resource definition).\n  #   These can be queried with:\n  #     kubectl get ciliumid\n  # - \"kvstore\" stores identities in an etcd kvstore, that is\n  #   configured below. Cilium versions before 1.6 supported only the kvstore\n  #   backend. Upgrades from these older cilium versions should continue using\n  #   the kvstore by commenting out the identity-allocation-mode below, or\n  #   setting it to \"kvstore\".\n  identity-allocation-mode: crd\n  cilium-endpoint-gc-interval: \"5m0s\"\n  nodes-gc-interval: \"5m0s\"\n  # Disable the usage of CiliumEndpoint CRD\n  disable-endpoint-crd: \"false\"\n\n  # If you want to run cilium in debug mode change this value to true\n  debug: \"false\"\n  # The agent can be put into the following three policy enforcement modes\n  # default, always and never.\n  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes\n  enable-policy: \"default\"\n\n  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4\n  # address.\n  enable-ipv4: \"true\"\n\n  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6\n  # address.\n  enable-ipv6: \"false\"\n  # Users who wish to specify their own custom CNI configuration file must set\n  # custom-cni-conf to \"true\", otherwise Cilium may overwrite the configuration.\n  custom-cni-conf: \"false\"\n  enable-bpf-clock-probe: \"true\"\n  # If you want cilium monitor to aggregate tracing for packets, set this level\n  # to \"low\", \"medium\", or \"maximum\". The higher the level, the less packets\n  # that will be seen in monitor output.\n  monitor-aggregation: medium\n\n  # The monitor aggregation interval governs the typical time between monitor\n  # notification events for each allowed connection.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-interval: 5s\n\n  # The monitor aggregation flags determine which TCP flags which, upon the\n  # first observation, cause monitor notifications to be generated.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-flags: all\n  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic\n  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.\n  bpf-map-dynamic-size-ratio: \"0.0025\"\n  # bpf-policy-map-max specifies the maximum number of entries in endpoint\n  # policy map (per endpoint)\n  bpf-policy-map-max: \"16384\"\n  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,\n  # backend and affinity maps.\n  bpf-lb-map-max: \"65536\"\n  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass\n  # optimization for nodeport reverse NAT handling.\n  bpf-lb-external-clusterip: \"false\"\n\n  # Pre-allocation of map entries allows per-packet latency to be reduced, at\n  # the expense of up-front memory allocation for the entries in the maps. The\n  # default value below will minimize memory usage in the default installation;\n  # users who are sensitive to latency may consider setting this to \"true\".\n  #\n  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore\n  # this option and behave as though it is set to \"true\".\n  #\n  # If this value is modified, then during the next Cilium startup the restore\n  # of existing endpoints and tracking of ongoing connections may be disrupted.\n  # As a result, reply packets may be dropped and the load-balancing decisions\n  # for established connections may change.\n  #\n  # If this option is set to \"false\" during an upgrade from 1.3 or earlier to\n  # 1.4 or later, then it may cause one-time disruptions during the upgrade.\n  preallocate-bpf-maps: \"false\"\n\n  # Regular expression matching compatible Istio sidecar istio-proxy\n  # container image names\n  sidecar-istio-proxy-image: \"cilium/istio_proxy\"\n\n  # Name of the cluster. Only relevant when building a mesh of clusters.\n  cluster-name: chongus\n  # Unique ID of the cluster. Must be unique across all conneted clusters and\n  # in the range of 1 and 255. Only relevant when building a mesh of clusters.\n  cluster-id: \"0\"\n\n  # Encapsulation mode for communication between nodes\n  # Possible values:\n  #   - disabled\n  #   - vxlan (default)\n  #   - geneve\n  tunnel: \"vxlan\"\n  # Enables L7 proxy for L7 policy enforcement and visibility\n  enable-l7-proxy: \"true\"\n\n  enable-ipv4-masquerade: \"true\"\n  enable-ipv6-masquerade: \"true\"\n\n  enable-xt-socket-fallback: \"true\"\n  install-iptables-rules: \"true\"\n  install-no-conntrack-iptables-rules: \"false\"\n\n  auto-direct-node-routes: \"false\"\n  enable-local-redirect-policy: \"false\"\n\n  kube-proxy-replacement: \"strict\"\n  kube-proxy-replacement-healthz-bind-address: \"\"\n  bpf-lb-sock: \"false\"\n  enable-health-check-nodeport: \"true\"\n  node-port-bind-protection: \"true\"\n  enable-auto-protect-node-port-range: \"true\"\n  enable-svc-source-range-check: \"true\"\n  enable-l2-neigh-discovery: \"true\"\n  arping-refresh-period: \"30s\"\n  enable-endpoint-health-checking: \"true\"\n  enable-health-checking: \"true\"\n  enable-well-known-identities: \"false\"\n  enable-remote-node-identity: \"true\"\n  synchronize-k8s-nodes: \"true\"\n  operator-api-serve-addr: \"127.0.0.1:9234\"\n  # Enable Hubble gRPC service.\n  enable-hubble: \"true\"\n  # UNIX domain socket for Hubble server to listen to.\n  hubble-socket-path: \"/var/run/cilium/hubble.sock\"\n  # An additional address for Hubble server to listen to (e.g. \":4244\").\n  hubble-listen-address: \":4244\"\n  hubble-disable-tls: \"false\"\n  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt\n  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key\n  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt\n  ipam: \"cluster-pool\"\n  cluster-pool-ipv4-cidr: \"10.0.0.0/8\"\n  cluster-pool-ipv4-mask-size: \"24\"\n  disable-cnp-status-updates: \"true\"\n  enable-vtep: \"false\"\n  vtep-endpoint: \"\"\n  vtep-cidr: \"\"\n  vtep-mask: \"\"\n  vtep-mac: \"\"\n  enable-bgp-control-plane: \"false\"\n  procfs: \"/host/proc\"\n  bpf-root: \"/sys/fs/bpf\"\n  cgroup-root: \"/run/cilium/cgroupv2\"\n  enable-k8s-terminating-endpoint: \"true\"\n  remove-cilium-node-taints: \"true\"\n  set-cilium-is-up-condition: \"true\"\n  unmanaged-pod-watcher-interval: \"15\"\n  tofqdns-dns-reject-response-code: \"refused\"\n  tofqdns-enable-dns-compression: \"true\"\n  tofqdns-endpoint-max-ip-per-hostname: \"50\"\n  tofqdns-idle-connection-grace-period: \"0s\"\n  tofqdns-max-deferred-connection-deletes: \"10000\"\n  tofqdns-min-ttl: \"3600\"\n  tofqdns-proxy-response-max-delay: \"100ms\"\n  agent-not-ready-taint-key: \"node.cilium.io/agent-not-ready\"\n---\n# Source: cilium/templates/cilium-agent/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium\nrules:\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  - services\n  - pods\n  - endpoints\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - list\n  - watch\n  # This is used when validating policies in preflight. This will need to stay\n  # until we figure out how to avoid \"get\" inside the preflight, and then\n  # should be removed ideally.\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumbgploadbalancerippools\n  - ciliumbgppeeringpolicies\n  - ciliumclusterwideenvoyconfigs\n  - ciliumclusterwidenetworkpolicies\n  - ciliumegressgatewaypolicies\n  - ciliumegressnatpolicies\n  - ciliumendpoints\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  - ciliumidentities\n  - ciliumlocalredirectpolicies\n  - ciliumnetworkpolicies\n  - ciliumnodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  - ciliumendpoints\n  - ciliumnodes\n  verbs:\n  - create\n- apiGroups:\n  - cilium.io\n  # To synchronize garbage collection of such resources\n  resources:\n  - ciliumidentities\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  verbs:\n  - delete\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  - ciliumnodes/status\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  - ciliumendpoints/status\n  - ciliumendpoints\n  verbs:\n  - patch\n---\n# Source: cilium/templates/cilium-operator/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium-operator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n  - list\n  - watch\n  # to automatically delete [core|kube]dns pods so that are starting to being\n  # managed by Cilium\n  - delete\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # To remove node taints\n  - nodes\n  # To set NetworkUnavailable false on startup\n  - nodes/status\n  verbs:\n  - patch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform LB IP allocation for BGP\n  - services/status\n  verbs:\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  # to check apiserver connectivity\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform the translation of a CNP that contains `ToGroup` to its endpoints\n  - services\n  - endpoints\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies\n  - ciliumclusterwidenetworkpolicies\n  verbs:\n  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'\n  - create\n  - update\n  - deletecollection\n  # To update the status of the CNPs and CCNPs\n  - patch\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  verbs:\n  # Update the auto-generated CNPs and CCNPs status.\n  - patch\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  - ciliumidentities\n  verbs:\n  # To perform garbage collection of such resources\n  - delete\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  verbs:\n  # To synchronize garbage collection of such resources\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n    # To perform CiliumNode garbage collector\n  - delete\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes/status\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n  - delete\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - create\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - update\n  resourceNames:\n  - ciliumbgploadbalancerippools.cilium.io\n  - ciliumbgppeeringpolicies.cilium.io\n  - ciliumclusterwideenvoyconfigs.cilium.io\n  - ciliumclusterwidenetworkpolicies.cilium.io\n  - ciliumegressgatewaypolicies.cilium.io\n  - ciliumegressnatpolicies.cilium.io\n  - ciliumendpoints.cilium.io\n  - ciliumendpointslices.cilium.io\n  - ciliumenvoyconfigs.cilium.io\n  - ciliumexternalworkloads.cilium.io\n  - ciliumidentities.cilium.io\n  - ciliumlocalredirectpolicies.cilium.io\n  - ciliumnetworkpolicies.cilium.io\n  - ciliumnodes.cilium.io\n# For cilium-operator running in HA mode.\n#\n# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election\n# between multiple running instances.\n# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less\n# common and fewer objects in the cluster watch \"all Leases\".\n- apiGroups:\n  - coordination.k8s.io\n  resources:\n  - leases\n  verbs:\n  - create\n  - get\n  - update\n---\n# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium\"\n  namespace: flux-system\n---\n# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium-operator\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium-operator\"\n  namespace: flux-system\n---\n# Source: cilium/templates/hubble/peer-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: hubble-peer\n  namespace: flux-system\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    k8s-app: cilium\n  ports:\n  - name: peer-service\n    port: 443\n    protocol: TCP\n    targetPort: 4244\n  internalTrafficPolicy: Local\n---\n# Source: cilium/templates/cilium-agent/daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cilium\n  namespace: flux-system\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    matchLabels:\n      k8s-app: cilium\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 2\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # Set app AppArmor's profile to \"unconfined\". The value of this annotation\n        # can be modified as long users know which profiles they have available\n        # in AppArmor.\n        container.apparmor.security.beta.kubernetes.io/cilium-agent: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/mount-cgroup: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: \"unconfined\"\n      labels:\n        k8s-app: cilium\n    spec:\n      containers:\n      - name: cilium-agent\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-agent\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        startupProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          failureThreshold: 105\n          periodSeconds: 2\n          successThreshold: 1\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 3\n          timeoutSeconds: 5\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_CLUSTERMESH_CONFIG\n          value: /var/lib/cilium/clustermesh/\n        - name: CILIUM_CNI_CHAINING_MODE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: cni-chaining-mode\n              optional: true\n        - name: CILIUM_CUSTOM_CNI_CONF\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: custom-cni-conf\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        lifecycle:\n          postStart:\n            exec:\n              command:\n              - \"/cni-install.sh\"\n              - \"--enable-debug=false\"\n              - \"--cni-exclusive=true\"\n              - \"--log-file=/var/run/cilium/cilium-cni.log\"\n          preStop:\n            exec:\n              command:\n              - /cni-uninstall.sh\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            add:\n              # Use to set socket permission\n              - CHOWN\n              # Used to terminate envoy child process\n              - KILL\n              # Used since cilium modifies routing tables, etc...\n              - NET_ADMIN\n              # Used since cilium creates raw sockets, etc...\n              - NET_RAW\n              # Used since cilium monitor uses mmap\n              - IPC_LOCK\n              # Used in iptables. Consider removing once we are iptables-free\n              - SYS_MODULE\n              # We need it for now but might not need it for \u003e= 5.11 specially\n              # for the 'SYS_RESOURCE'.\n              # In \u003e= 5.8 there's already BPF and PERMON capabilities\n              - SYS_ADMIN\n              # Could be an alternative for the SYS_ADMIN for the RLIMIT_NPROC\n              - SYS_RESOURCE\n              # Both PERFMON and BPF requires kernel 5.8, container runtime\n              # cri-o \u003e= v1.22.0 or containerd \u003e= v1.5.0.\n              # If available, SYS_ADMIN can be removed.\n              #- PERFMON\n              #- BPF\n              - DAC_OVERRIDE\n              - FOWNER\n              - SETGID\n              - SETUID\n            drop:\n              - ALL\n        terminationMessagePolicy: FallbackToLogsOnError\n        volumeMounts:\n        # Unprivileged containers need to mount /proc/sys/net from the host\n        # to have write access\n        - mountPath: /host/proc/sys/net\n          name: host-proc-sys-net\n        # Unprivileged containers need to mount /proc/sys/kernel from the host\n        # to have write access\n        - mountPath: /host/proc/sys/kernel\n          name: host-proc-sys-kernel\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Unprivileged containers can't set mount propagation to bidirectional\n          # in this case we will mount the bpf fs from an init container that\n          # is privileged and set the mount propagation from host to container\n          # in Cilium.\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        - name: cni-path\n          mountPath: /host/opt/cni/bin\n        - name: etc-cni-netd\n          mountPath: /host/etc/cni/net.d\n        - name: clustermesh-secrets\n          mountPath: /var/lib/cilium/clustermesh\n          readOnly: true\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n          # Needed to be able to load kernel modules\n        - name: lib-modules\n          mountPath: /lib/modules\n          readOnly: true\n        - name: xtables-lock\n          mountPath: /run/xtables.lock\n        - name: hubble-tls\n          mountPath: /var/lib/cilium/tls/hubble\n          readOnly: true\n      initContainers:\n      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.\n      # We use nsenter command with host's cgroup and mount namespaces enabled.\n      - name: mount-cgroup\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: CGROUP_ROOT\n          value: /run/cilium/cgroupv2\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh and mount that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-mount /hostbin/cilium-mount;\n          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt \"${BIN_PATH}/cilium-mount\" $CGROUP_ROOT;\n          rm /hostbin/cilium-mount\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            drop:\n              - ALL\n            add:\n              # Only used for 'mount' cgroup\n              - SYS_ADMIN\n              # Used for nsenter\n              - SYS_CHROOT\n              - SYS_PTRACE\n      - name: apply-sysctl-overwrites\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;\n          nsenter --mount=/hostproc/1/ns/mnt \"${BIN_PATH}/cilium-sysctlfix\";\n          rm /hostbin/cilium-sysctlfix\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            drop:\n              - ALL\n            add:\n              # Required in order to access host's /etc/sysctl.d dir\n              - SYS_ADMIN\n              # Used for nsenter\n              - SYS_CHROOT\n              - SYS_PTRACE\n      # Mount the bpf fs if it is not mounted. We will perform this task\n      # from a privileged container because the mount propagation bidirectional\n      # only works from privileged containers.\n      - name: mount-bpf-fs\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        args:\n        - 'mount | grep \"/sys/fs/bpf type bpf\" || mount -t bpf bpf /sys/fs/bpf'\n        command:\n        - /bin/bash\n        - -c\n        - --\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          mountPropagation: Bidirectional\n      - name: clean-cilium-state\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - /init-container.sh\n        env:\n        - name: CILIUM_ALL_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-state\n              optional: true\n        - name: CILIUM_BPF_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-bpf-state\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            # Most of the capabilities here are the same ones used in the\n            # cilium-agent's container because this container can be used to\n            # uninstall all Cilium resources, and therefore it is likely that\n            # will need the same capabilities.\n            add:\n              # Used since cilium modifies routing tables, etc...\n              - NET_ADMIN\n              # Used in iptables. Consider removing once we are iptables-free\n              - SYS_MODULE\n              # We need it for now but might not need it for \u003e= 5.11 specially\n              # for the 'SYS_RESOURCE'.\n              # In \u003e= 5.8 there's already BPF and PERMON capabilities\n              - SYS_ADMIN\n              # Could be an alternative for the SYS_ADMIN for the RLIMIT_NPROC\n              - SYS_RESOURCE\n              # Both PERFMON and BPF requires kernel 5.8, container runtime\n              # cri-o \u003e= v1.22.0 or containerd \u003e= v1.5.0.\n              # If available, SYS_ADMIN can be removed.\n              #- PERFMON\n              #- BPF\n            drop:\n              - ALL\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Required to mount cgroup filesystem from the host to cilium agent pod\n        - name: cilium-cgroup\n          mountPath: /run/cilium/cgroupv2\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi # wait-for-kube-proxy\n      restartPolicy: Always\n      priorityClassName: system-node-critical\n      serviceAccount: \"cilium\"\n      serviceAccountName: \"cilium\"\n      terminationGracePeriodSeconds: 1\n      hostNetwork: true\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                k8s-app: cilium\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To keep state between restarts / upgrades\n      - name: cilium-run\n        hostPath:\n          path: /var/run/cilium\n          type: DirectoryOrCreate\n        # To keep state between restarts / upgrades for bpf maps\n      - name: bpf-maps\n        hostPath:\n          path: /sys/fs/bpf\n          type: DirectoryOrCreate\n      # To mount cgroup2 filesystem on the host\n      - name: hostproc\n        hostPath:\n          path: /proc\n          type: Directory\n      # To keep state between restarts / upgrades for cgroup2 filesystem\n      - name: cilium-cgroup\n        hostPath:\n          path: /run/cilium/cgroupv2\n          type: DirectoryOrCreate\n      # To install cilium cni plugin in the host\n      - name: cni-path\n        hostPath:\n          path:  /opt/cni/bin\n          type: DirectoryOrCreate\n        # To install cilium cni configuration in the host\n      - name: etc-cni-netd\n        hostPath:\n          path: /etc/cni/net.d\n          type: DirectoryOrCreate\n        # To be able to load kernel modules\n      - name: lib-modules\n        hostPath:\n          path: /lib/modules\n        # To access iptables concurrently with other processes (e.g. kube-proxy)\n      - name: xtables-lock\n        hostPath:\n          path: /run/xtables.lock\n          type: FileOrCreate\n        # To read the clustermesh configuration\n      - name: clustermesh-secrets\n        secret:\n          secretName: cilium-clustermesh\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          optional: true\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n      - name: host-proc-sys-net\n        hostPath:\n          path: /proc/sys/net\n          type: Directory\n      - name: host-proc-sys-kernel\n        hostPath:\n          path: /proc/sys/kernel\n          type: Directory\n      - name: hubble-tls\n        projected:\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          sources:\n          - secret:\n              name: hubble-server-certs\n              optional: true\n              items:\n              - key: ca.crt\n                path: client-ca.crt\n              - key: tls.crt\n                path: server.crt\n              - key: tls.key\n                path: server.key\n---\n# Source: cilium/templates/cilium-operator/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cilium-operator\n  namespace: flux-system\n  labels:\n    io.cilium/app: operator\n    name: cilium-operator\nspec:\n  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go\n  # for more details.\n  replicas: 1\n  selector:\n    matchLabels:\n      io.cilium/app: operator\n      name: cilium-operator\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n      labels:\n        io.cilium/app: operator\n        name: cilium-operator\n    spec:\n      containers:\n      - name: cilium-operator\n        image: \"quay.io/cilium/operator-generic:v1.12.4@sha256:071089ec5bca1f556afb8e541d9972a0dfb09d1e25504ae642ced021ecbedbd1\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-operator-generic\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        - --debug=$(CILIUM_DEBUG)\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              key: debug\n              name: cilium-config\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9234\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          timeoutSeconds: 3\n        volumeMounts:\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n        terminationMessagePolicy: FallbackToLogsOnError\n      hostNetwork: true\n      restartPolicy: Always\n      priorityClassName: system-cluster-critical\n      serviceAccount: \"cilium-operator\"\n      serviceAccountName: \"cilium-operator\"\n      # In HA mode, cilium-operator pods must not be scheduled on the same\n      # node as they will clash with each other.\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                io.cilium/app: operator\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n",
            "template": "---\n# Source: cilium/templates/cilium-agent/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium\"\n  namespace: flux-system\nlable\n---\n# Source: cilium/templates/cilium-operator/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium-operator\"\n  namespace: flux-system\n---\n# Source: cilium/templates/cilium-ca-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cilium-ca\n  namespace: flux-system\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSSt0Y1VJbWREWUllS3NUM2p1N0NkREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qTTFOREEzV2hjTk1qVXhNakExTWpNMQpOREEzV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ3hweHR2WXlTYVpUT0JmNWVkZVJYaFVkUDhydW12YzYveWJNZUJFZmdwaFMvNE1GajMKTm9ybUVtTTQrcDBhTW82clU1SElQQ2RwSE1KRDIrTzJpOENWUXdqd0N5anNHMm5BQ1Q3a1VvVmgyRUFBam5RUgo3UytvbFp0MTcvbXY2T2p0MFkzNnBySmRUOG4xdkVEQVRxZGo4WVJzek1YTTNqQk5URzNQWnhtT0ZuYXlzZlJJCkpBc1JtWnd3V3dtajY0UkZyRlM2UENZdExMTDEyZmoySEtVcjZWV1pxelNmaElDNlB5SHQ5YVRqV1NXWC9PUS8KQXZxTWYyUWk0NVJucGwwNk1ELzhEMW53VitXRDFuVXNuTGV2VXp3UXJIUDUxZW1VUXhkOVhnQVFlVVJVak9SdwovM1U3YzZvWHFUUlNMNVBKdlNzaHg3NjdqelJYT3B4VndYOXBBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVTK2Z4cVAvMW5ycXc5dEVMd1pRTGhnYm1XYU13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKN3M1TFRCMEF2TGVKTjdPOFF2S3BCTkhrc1VqTU0xaVc3MDlhTUhYZW5GUkxWeUhJcGhWaVRDCjhZTVEzS3M5K0pRYmFpL1Vaby9BKzFpbXg0aHBSK2hwdDA4dWppU2FEZDZiRXMrNFZmVEdoV2RWNjU1QnQvMTYKV3B3NldtRHU0L091cU1KYzFjLzNPRWJ1ZjZWc01TM1lDNFVzOU5ucVpoK0tFMXVsMnNuWUFrN3BZd25JMDV5OQpIRUtHQnFWUFRJcGFILzB2TmowbGh1WmlqUGhRQkg5UjZyZ3JjTkNJZFZRaE94UTdMM1JoTWQxSSsrQTNSRmp2CjVPb2poZ2tHOWE0N1ExUUMxUFBJM2VKOURVWTlGQlc4dnpZc244eFpHMzVXWTJtME9IT1lBdlpjQ0llK2I1NEkKN3ZQODVPbDJXbmNnUGM5MXgrcm1neGlITUhFQTUrYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc2FjYmIyTWttbVV6Z1grWG5Ya1Y0VkhUL0s3cHIzT3Y4bXpIZ1JINEtZVXYrREJZCjl6YUs1aEpqT1BxZEdqS09xMU9SeUR3bmFSekNROXZqdG92QWxVTUk4QXNvN0J0cHdBays1RktGWWRoQUFJNTAKRWUwdnFKV2JkZS81citqbzdkR04rcWF5WFUvSjlieEF3RTZuWS9HRWJNekZ6TjR3VFV4dHoyY1pqaFoyc3JIMApTQ1FMRVptY01Gc0pvK3VFUmF4VXVqd21MU3l5OWRuNDloeWxLK2xWbWFzMG40U0F1ajhoN2ZXazQxa2xsL3prClB3TDZqSDlrSXVPVVo2WmRPakEvL0E5WjhGZmxnOVoxTEp5M3IxTThFS3h6K2RYcGxFTVhmVjRBRUhsRVZJemsKY1A5MU8zT3FGNmswVWkrVHliMHJJY2UrdTQ4MFZ6cWNWY0YvYVFJREFRQUJBb0lCQVFDSjYvS2d4NWZqUmk1MgptMWhhS1dlVFJyUU51TDQwT055Z21WTktJV2xJMHQ0ckVWNEFqNWZHaHdBQmZJLzdoc1M4dm1TdjBBUEkxMHI2CjQvd2wvTm5IQ0FRb1dJR3N6SnVOTzZCWUlyanEvYml5dGVYbkJQMjdKR3ROWk1HMGtGNUdSQ3EyTGpUTHZPWk8Kb1ppanRHekFhd0VrZHRZWjkyWUluUTJqdDZkZlowUiszL2JKSHhYU1NGRitTMEE1MmVFZUdFZjRYTHc2L1VvQgpEZW1CVTVrOUZxeXUwc1BVUkNMVWR5TXhiazhzQ3d5aEJCMGozM0hBazVOTm91OWR3OXBJbi9VR2pSVm13RG1ZCk1rczhndUlVd3BBcVUzSGY1OHhibEsyMk5yNGZHeC9YS0M1b2NmSG82OVFneTFscWlLQWtXOHNSd0JQVEhSaUYKdWRlNTd2c0JBb0dCQU1FdE1zb0xuZzFlRE9wQ0szUlRpSjlRRGNJR2pQZ1BNZ1dlR3A3Vm1OM0cwc0xvbzRBYQpFSjhTbHo1b0svZU5XNlB0L0p0c2k3eCtoM2EyR2JSVGFpaEQzN3VTWDFtV3VMN0JSak1WTG9uS21uNFdSN294CmlTUWFQNEVJOXJvcExOUXZFS2NsUitCam8yR3ZkOHVBb3g0NXE3OHpUZ1ZMTGpnZkY5WUdEN0g3QW9HQkFPdHQKZS84enVCRzlZVjJIcENqRkpVRVliaFJqby9lVDNsQ2NpYThQeU9DLytnYVdvTHB4Y3FOaCtHOFNhMU1LTDNTUAoxWGRRRVdDcnVsS3hHcmN1RDN5MVRBVlluRGZNSmp2ajFQMlc0RmI5K2V6RUhiMjEwT1ZXdjVpbmE0U1dCajZnCkliblV1MUFlZ2JvRGtST0pQeDliN0NiS3JRNnMvanJXSnRBSWZ2cnJBb0dBVWNRcjUxR2JpTlR5YW9Xdmx3RjAKcHRwZnVHekZab29vQmpDeDIrRlZYeW8xTThMODBkQTJrTjV4bmp6QnYzclorejFVMndUSzhQSXRySlhQczRCTApRdGZYNzdFNUl0YWxSRGpTMmZSeFNtbXprd01qUVRDT2QvV1VRNjNqb1ZDa1pQdTI5TWpXNzZlOUZEQU5hTm4rCk1XRC96V0tOOTdlbXpLSjhtRjdnYmRrQ2dZRUF6REJzTUQ2aU1qaW4zdUFMUUJVbEo1MVJ0RHRyZGdwNDhqK2kKcHdRd3ZNV2t5OXdPMFVZZUlKaVRTWHFYUFRHRFVUeUM3M1d4YkwvazNWMmdCeXBhNGxXMzlwY1EvdEFBaFVjbwpiejFSbkFHeHAybTlSZElRdVNpUkNveUNrejh2Y1ZlZmlMWjZNNVlSKzh5bUltU1NLOWVsTFV2eDV0MmhybFFZCjI2dlN2anNDZ1lCczJkaFZFZ2ZVa2l1ZmlyODc2MlFVek1iY3dGVDlkYlZFSFJWVlEyYVdBUERiVjlMU0h6SDgKWGlJSysvSTIzNkcwbHBPdnZRL1hkLzJvY2NncG9YZEhSNUdncjhjQmNqNjRoaHZVb3liNFNHYWlOS0s3N3lCTgpiTU1rTkVxYlhwdW1oZHBxekY4cGk1ekFhMHZqSzhiZG1ITmQ3TGNxejZiQXRiaEN5a1BaeFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\n---\n# Source: cilium/templates/hubble/tls-helm/server-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: hubble-server-certs\n  namespace: flux-system\ntype: kubernetes.io/tls\ndata:\n  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSSt0Y1VJbWREWUllS3NUM2p1N0NkREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qTTFOREEzV2hjTk1qVXhNakExTWpNMQpOREEzV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ3hweHR2WXlTYVpUT0JmNWVkZVJYaFVkUDhydW12YzYveWJNZUJFZmdwaFMvNE1GajMKTm9ybUVtTTQrcDBhTW82clU1SElQQ2RwSE1KRDIrTzJpOENWUXdqd0N5anNHMm5BQ1Q3a1VvVmgyRUFBam5RUgo3UytvbFp0MTcvbXY2T2p0MFkzNnBySmRUOG4xdkVEQVRxZGo4WVJzek1YTTNqQk5URzNQWnhtT0ZuYXlzZlJJCkpBc1JtWnd3V3dtajY0UkZyRlM2UENZdExMTDEyZmoySEtVcjZWV1pxelNmaElDNlB5SHQ5YVRqV1NXWC9PUS8KQXZxTWYyUWk0NVJucGwwNk1ELzhEMW53VitXRDFuVXNuTGV2VXp3UXJIUDUxZW1VUXhkOVhnQVFlVVJVak9SdwovM1U3YzZvWHFUUlNMNVBKdlNzaHg3NjdqelJYT3B4VndYOXBBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVTK2Z4cVAvMW5ycXc5dEVMd1pRTGhnYm1XYU13RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKN3M1TFRCMEF2TGVKTjdPOFF2S3BCTkhrc1VqTU0xaVc3MDlhTUhYZW5GUkxWeUhJcGhWaVRDCjhZTVEzS3M5K0pRYmFpL1Vaby9BKzFpbXg0aHBSK2hwdDA4dWppU2FEZDZiRXMrNFZmVEdoV2RWNjU1QnQvMTYKV3B3NldtRHU0L091cU1KYzFjLzNPRWJ1ZjZWc01TM1lDNFVzOU5ucVpoK0tFMXVsMnNuWUFrN3BZd25JMDV5OQpIRUtHQnFWUFRJcGFILzB2TmowbGh1WmlqUGhRQkg5UjZyZ3JjTkNJZFZRaE94UTdMM1JoTWQxSSsrQTNSRmp2CjVPb2poZ2tHOWE0N1ExUUMxUFBJM2VKOURVWTlGQlc4dnpZc244eFpHMzVXWTJtME9IT1lBdlpjQ0llK2I1NEkKN3ZQODVPbDJXbmNnUGM5MXgrcm1neGlITUhFQTUrYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURWekNDQWorZ0F3SUJBZ0lSQVBvdTl0VTY3a3EzUmJHMTY3NWdpNDh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl5TVRJd05qSXpOVFF3TjFvWERUSTFNVEl3TlRJegpOVFF3TjFvd0tqRW9NQ1lHQTFVRUF3d2ZLaTVqYUc5dVozVnpMbWgxWW1Kc1pTMW5jbkJqTG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1EVXJFYXYwUmNKYTlTalk0TXkKbWFFWXI0ZEFidXdscWJuejJQRGFFTXRKQ3hJOWRCangzcmhWTFN5ZlQ1OGZjd2xYYjMvNnV1dFdsZHYrQ1o4Zgo4dy93aGJkL1FzeVlWZWwzZllOUFFEN3pTMyt6Z00wWFhOOW9pb2dmTHhXa1UzMngzSFc3bDhrYmJ6MmdBUm42CjhVSUozT0NWYklFSWU1VEwrVVd0ckNTSVZXWmcxbk5oYlZUaWVKbjZTcGY2NC9xVURGUC9qRFFaM3NFWVF2bVQKYUQzaFpxN3NMVTE2OFBoWlJmSVlma0c0ZjB1dWhFSlVHUGREbjd3VVFxTDhUOWJDL0V1QkpFYWJPcnlnNVRUOQpLWWh5a3l1Q1dFK004RVJ5b2JBSjAvRUdEWkJiYnVlcTY4bDFwOHpwUG42MkUyTzdSUWJLRDIwQS8rbDd2K2o1CjRtY0NBd0VBQWFPQmpUQ0JpakFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVVMrZnhxUC8xbnJxdwo5dEVMd1pRTGhnYm1XYU13S2dZRFZSMFJCQ013SVlJZktpNWphRzl1WjNWekxtaDFZbUpzWlMxbmNuQmpMbU5wCmJHbDFiUzVwYnpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUFwRGFwdzFhZHcxSjR2eXBzZ1pRUlZBMGpPMk0Kb0xOUWQwMDRKdmlkSmF2TkNqai9uNFNxOWtSdmJTKzYzMkFtUU44TGkzQ3ZnSFhLc08rcis3M1B0cHRjWFkrYworaFZOT0EyZktwbzVXeHo2dU9DUVVhOEhQYkJoYm40NkxsT1JOOFgzb09GbS9vMmtwVlNabC9rUllNN09aN1pXCmhlSHZ2ZWRabWJ4aWg0RHFzZ2ZCUGRTdm5VYTN3b0NJRTBZTlN5bVlpSEFheWhHVlQyV0hSRm9WaHhXZlhLWjAKZTkrUFFSSkVzc3Q0K3RXcDNnbXhnK2xCc251NHBwT0RBdmxWMk15bW5URm9jd2ljS1BDaHg4anJsSUd3Sy9HZApDYkVLT1FPT0doTHM4R1BPdXQwRkFNeVF0RElpUGdtVmZyN010MGNkVGVMZFBVZEwxTVo3TFg2MEpBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd05Tc1JxL1JGd2xyMUtOamd6S1pvUml2aDBCdTdDV3B1ZlBZOE5vUXkwa0xFajEwCkdQSGV1RlV0TEo5UG54OXpDVmR2Zi9xNjYxYVYyLzRKbngvekQvQ0Z0MzlDekpoVjZYZDlnMDlBUHZOTGY3T0EKelJkYzMyaUtpQjh2RmFSVGZiSGNkYnVYeVJ0dlBhQUJHZnJ4UWduYzRKVnNnUWg3bE12NVJhMnNKSWhWWm1EVwpjMkZ0Vk9KNG1mcEtsL3JqK3BRTVUvK01OQm5ld1JoQytaTm9QZUZtcnV3dFRYcncrRmxGOGhoK1FiaC9TNjZFClFsUVk5ME9mdkJSQ292eFAxc0w4UzRFa1JwczZ2S0RsTlAwcGlIS1RLNEpZVDR6d1JIS2hzQW5UOFFZTmtGdHUKNTZycnlYV256T2srZnJZVFk3dEZCc29QYlFELzZYdS82UG5pWndJREFRQUJBb0lCQVFDNGRQaFRLZTRHYm1HeQo1NVRTdEwyWEI4a294UzhXUURUcWgyTjNpZkhVdEF1ZUtDRDlsNmtvaFhvUUhGa0s2d2VjNFFIczE0aWtoSkFZCkFCdHVGeDdvbVhrZi9lR0ZXeGVibkV6NUpmOWIrRm01VDVtZkZvRWx5SmZ6L0hpSzZFVmhrSmxHR2V2cFdaQUEKMENVZG1CbmV4UlovMHhBWElta3MvaTEyUk5yTm1kK1pzTVpxbTU2YjROWUlFNkxHMVBTSno2ekl1cUpOWlIyYgp5c1EzT0VYOWlrdTI5VlV0MDZvOFl2VUJsNmVjS0ZwRFIxNVRCNHVuRlhrWVRKYS9FU25jQkV2WktpTUVSbENjCkJ1UXA2TUZvVFAvVXlXOTFBUTY1MnZLMERQbURlZ09MRTRQNW9Gbk9RVUVzR1BoaE54eUQ4bys2b2pWYkNpKzYKdS80SjhkZFpBb0dCQU4vY1hjMXkxUG1OUmtvZlJxNDlZcFF6U1NPU1ArUUZ4R2ZBaFJ5Ri95RmJPeUpnMmd2OAp3ZC9jcjcwc3pzeFpTNVl0b2hlRTBLbis3RCtqamVNMjJSK2dDWGlDZTVYbFhLQ0drZnIyRDRZSnc4cEVUQ2x3ClR2YjF0aWx6UlpkWkhQSUZxWGF6OUdDMnN4Yit2Y3dzUzNqWlB5aVdhcmpoNGFmYkhjTnpKODJMQW9HQkFOeUQKMlNtTTRmMG56czgyQy9aZ2xSN3kzZk5GTHVpRVNVSmFrZXE4KzRwRXJtL1l0TWExb3JGbDlndXJkUGVhSlAxcwpFZDJhWkQ2dURKOG9sakFpKzBhNzBHdDRWdTJBK041YkJqcUZQaVRiUWpNSDJhTWo3TC9vOHBjakt4UHVrN3F3ClB6d1J6VnNxd2pWcEgxWkVjKzU1TU5kRGFMVzBiZHJNYkdvSGp0SVZBb0dBUnJhM3N0UlpUbE5BSnQzbVY5ZncKTWR4WmVERVVtWlR3eTgxV3Z3SGM2ODZEeVlKS25vckRPMUhjK2FjVDFCMUk4VEdOQ0Z6ZUJUVVByN0tjZVcregorbmQxUm1vQlhBSk4xaTlzSVpoa292U21zbGdNcnZKWkgwM1NzeGxFbkdCNzhqK3pubG1PRXBiano1bThucWhIClZ1OVpNaHNCcjFFN0ZPajBaKzhTWGEwQ2dZQU0rWFQ5ak54L0dLaUNhSnVyazJNeXZ2ZHdLTkhwdkY3VEdLRWQKUHFGT01WeFNHRjRLa3dWUGlzQS9UNGRDU2orQzZhampjUUlVN2dpd0ZLTkJrYzFYREJYblBOMWdmQVlvanhKKwp2dmc1RXUyQ015UUxCVUlZeUl2OWVJUkFWL2s1TXNXRnMwWng1c0ltZ2xqbHFvRm50cG01RUs1SWdxVTBDbk1XCmlmdE5RUUtCZ0JNL0FoY1dPMTNuT1VnNUx6bldJaHVoZlo0N1R3aFJGT1RwZWRxZTlWUGVycXBuSDRLbmVKR0kKRlZaUDlCME03K3V5QWgzNmdjYXl1NmRCbnZsQk0vWkc1ZHo1S1RwdWp4YjdOLzcySDVUWmM3NlR3OW5QTXVNcQpDSGZFdkxyWFRaWHpxb3ZucEdRWmlHMUFJRnd3TWxqSEY0ald4UTZiQWlwQ2J4SFN6Mm5FCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n---\n# Source: cilium/templates/cilium-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cilium-config\n  namespace: flux-system\ndata:\n\n  # Identity allocation mode selects how identities are shared between cilium\n  # nodes by setting how they are stored. The options are \"crd\" or \"kvstore\".\n  # - \"crd\" stores identities in kubernetes as CRDs (custom resource definition).\n  #   These can be queried with:\n  #     kubectl get ciliumid\n  # - \"kvstore\" stores identities in an etcd kvstore, that is\n  #   configured below. Cilium versions before 1.6 supported only the kvstore\n  #   backend. Upgrades from these older cilium versions should continue using\n  #   the kvstore by commenting out the identity-allocation-mode below, or\n  #   setting it to \"kvstore\".\n  identity-allocation-mode: crd\n  cilium-endpoint-gc-interval: \"5m0s\"\n  nodes-gc-interval: \"5m0s\"\n  # Disable the usage of CiliumEndpoint CRD\n  disable-endpoint-crd: \"false\"\n\n  # If you want to run cilium in debug mode change this value to true\n  debug: \"false\"\n  # The agent can be put into the following three policy enforcement modes\n  # default, always and never.\n  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes\n  enable-policy: \"default\"\n\n  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4\n  # address.\n  enable-ipv4: \"true\"\n\n  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6\n  # address.\n  enable-ipv6: \"false\"\n  # Users who wish to specify their own custom CNI configuration file must set\n  # custom-cni-conf to \"true\", otherwise Cilium may overwrite the configuration.\n  custom-cni-conf: \"false\"\n  enable-bpf-clock-probe: \"true\"\n  # If you want cilium monitor to aggregate tracing for packets, set this level\n  # to \"low\", \"medium\", or \"maximum\". The higher the level, the less packets\n  # that will be seen in monitor output.\n  monitor-aggregation: medium\n\n  # The monitor aggregation interval governs the typical time between monitor\n  # notification events for each allowed connection.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-interval: 5s\n\n  # The monitor aggregation flags determine which TCP flags which, upon the\n  # first observation, cause monitor notifications to be generated.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-flags: all\n  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic\n  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.\n  bpf-map-dynamic-size-ratio: \"0.0025\"\n  # bpf-policy-map-max specifies the maximum number of entries in endpoint\n  # policy map (per endpoint)\n  bpf-policy-map-max: \"16384\"\n  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,\n  # backend and affinity maps.\n  bpf-lb-map-max: \"65536\"\n  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass\n  # optimization for nodeport reverse NAT handling.\n  bpf-lb-external-clusterip: \"false\"\n\n  # Pre-allocation of map entries allows per-packet latency to be reduced, at\n  # the expense of up-front memory allocation for the entries in the maps. The\n  # default value below will minimize memory usage in the default installation;\n  # users who are sensitive to latency may consider setting this to \"true\".\n  #\n  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore\n  # this option and behave as though it is set to \"true\".\n  #\n  # If this value is modified, then during the next Cilium startup the restore\n  # of existing endpoints and tracking of ongoing connections may be disrupted.\n  # As a result, reply packets may be dropped and the load-balancing decisions\n  # for established connections may change.\n  #\n  # If this option is set to \"false\" during an upgrade from 1.3 or earlier to\n  # 1.4 or later, then it may cause one-time disruptions during the upgrade.\n  preallocate-bpf-maps: \"false\"\n\n  # Regular expression matching compatible Istio sidecar istio-proxy\n  # container image names\n  sidecar-istio-proxy-image: \"cilium/istio_proxy\"\n\n  # Name of the cluster. Only relevant when building a mesh of clusters.\n  cluster-name: ${cluster_name}\n  # Unique ID of the cluster. Must be unique across all conneted clusters and\n  # in the range of 1 and 255. Only relevant when building a mesh of clusters.\n  cluster-id: \"0\"\n\n  # Encapsulation mode for communication between nodes\n  # Possible values:\n  #   - disabled\n  #   - vxlan (default)\n  #   - geneve\n  tunnel: \"vxlan\"\n  # Enables L7 proxy for L7 policy enforcement and visibility\n  enable-l7-proxy: \"true\"\n\n  enable-ipv4-masquerade: \"true\"\n  enable-ipv6-masquerade: \"true\"\n\n  enable-xt-socket-fallback: \"true\"\n  install-iptables-rules: \"true\"\n  install-no-conntrack-iptables-rules: \"false\"\n\n  auto-direct-node-routes: \"false\"\n  enable-local-redirect-policy: \"false\"\n\n  kube-proxy-replacement: \"strict\"\n  kube-proxy-replacement-healthz-bind-address: \"\"\n  bpf-lb-sock: \"false\"\n  enable-health-check-nodeport: \"true\"\n  node-port-bind-protection: \"true\"\n  enable-auto-protect-node-port-range: \"true\"\n  enable-svc-source-range-check: \"true\"\n  enable-l2-neigh-discovery: \"true\"\n  arping-refresh-period: \"30s\"\n  enable-endpoint-health-checking: \"true\"\n  enable-health-checking: \"true\"\n  enable-well-known-identities: \"false\"\n  enable-remote-node-identity: \"true\"\n  synchronize-k8s-nodes: \"true\"\n  operator-api-serve-addr: \"127.0.0.1:9234\"\n  # Enable Hubble gRPC service.\n  enable-hubble: \"true\"\n  # UNIX domain socket for Hubble server to listen to.\n  hubble-socket-path: \"/var/run/cilium/hubble.sock\"\n  # An additional address for Hubble server to listen to (e.g. \":4244\").\n  hubble-listen-address: \":4244\"\n  hubble-disable-tls: \"false\"\n  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt\n  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key\n  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt\n  ipam: \"cluster-pool\"\n  cluster-pool-ipv4-cidr: \"10.0.0.0/8\"\n  cluster-pool-ipv4-mask-size: \"24\"\n  disable-cnp-status-updates: \"true\"\n  enable-vtep: \"false\"\n  vtep-endpoint: \"\"\n  vtep-cidr: \"\"\n  vtep-mask: \"\"\n  vtep-mac: \"\"\n  enable-bgp-control-plane: \"false\"\n  procfs: \"/host/proc\"\n  bpf-root: \"/sys/fs/bpf\"\n  cgroup-root: \"/run/cilium/cgroupv2\"\n  enable-k8s-terminating-endpoint: \"true\"\n  remove-cilium-node-taints: \"true\"\n  set-cilium-is-up-condition: \"true\"\n  unmanaged-pod-watcher-interval: \"15\"\n  tofqdns-dns-reject-response-code: \"refused\"\n  tofqdns-enable-dns-compression: \"true\"\n  tofqdns-endpoint-max-ip-per-hostname: \"50\"\n  tofqdns-idle-connection-grace-period: \"0s\"\n  tofqdns-max-deferred-connection-deletes: \"10000\"\n  tofqdns-min-ttl: \"3600\"\n  tofqdns-proxy-response-max-delay: \"100ms\"\n  agent-not-ready-taint-key: \"node.cilium.io/agent-not-ready\"\n---\n# Source: cilium/templates/cilium-agent/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium\nrules:\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  - services\n  - pods\n  - endpoints\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - list\n  - watch\n  # This is used when validating policies in preflight. This will need to stay\n  # until we figure out how to avoid \"get\" inside the preflight, and then\n  # should be removed ideally.\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumbgploadbalancerippools\n  - ciliumbgppeeringpolicies\n  - ciliumclusterwideenvoyconfigs\n  - ciliumclusterwidenetworkpolicies\n  - ciliumegressgatewaypolicies\n  - ciliumegressnatpolicies\n  - ciliumendpoints\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  - ciliumidentities\n  - ciliumlocalredirectpolicies\n  - ciliumnetworkpolicies\n  - ciliumnodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  - ciliumendpoints\n  - ciliumnodes\n  verbs:\n  - create\n- apiGroups:\n  - cilium.io\n  # To synchronize garbage collection of such resources\n  resources:\n  - ciliumidentities\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  verbs:\n  - delete\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  - ciliumnodes/status\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  - ciliumendpoints/status\n  - ciliumendpoints\n  verbs:\n  - patch\n---\n# Source: cilium/templates/cilium-operator/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium-operator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n  - list\n  - watch\n  # to automatically delete [core|kube]dns pods so that are starting to being\n  # managed by Cilium\n  - delete\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # To remove node taints\n  - nodes\n  # To set NetworkUnavailable false on startup\n  - nodes/status\n  verbs:\n  - patch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform LB IP allocation for BGP\n  - services/status\n  verbs:\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  # to check apiserver connectivity\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform the translation of a CNP that contains `ToGroup` to its endpoints\n  - services\n  - endpoints\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies\n  - ciliumclusterwidenetworkpolicies\n  verbs:\n  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'\n  - create\n  - update\n  - deletecollection\n  # To update the status of the CNPs and CCNPs\n  - patch\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  verbs:\n  # Update the auto-generated CNPs and CCNPs status.\n  - patch\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  - ciliumidentities\n  verbs:\n  # To perform garbage collection of such resources\n  - delete\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  verbs:\n  # To synchronize garbage collection of such resources\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n    # To perform CiliumNode garbage collector\n  - delete\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes/status\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n  - delete\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - create\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - update\n  resourceNames:\n  - ciliumbgploadbalancerippools.cilium.io\n  - ciliumbgppeeringpolicies.cilium.io\n  - ciliumclusterwideenvoyconfigs.cilium.io\n  - ciliumclusterwidenetworkpolicies.cilium.io\n  - ciliumegressgatewaypolicies.cilium.io\n  - ciliumegressnatpolicies.cilium.io\n  - ciliumendpoints.cilium.io\n  - ciliumendpointslices.cilium.io\n  - ciliumenvoyconfigs.cilium.io\n  - ciliumexternalworkloads.cilium.io\n  - ciliumidentities.cilium.io\n  - ciliumlocalredirectpolicies.cilium.io\n  - ciliumnetworkpolicies.cilium.io\n  - ciliumnodes.cilium.io\n# For cilium-operator running in HA mode.\n#\n# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election\n# between multiple running instances.\n# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less\n# common and fewer objects in the cluster watch \"all Leases\".\n- apiGroups:\n  - coordination.k8s.io\n  resources:\n  - leases\n  verbs:\n  - create\n  - get\n  - update\n---\n# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium\"\n  namespace: flux-system\n---\n# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium-operator\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium-operator\"\n  namespace: flux-system\n---\n# Source: cilium/templates/hubble/peer-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: hubble-peer\n  namespace: flux-system\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    k8s-app: cilium\n  ports:\n  - name: peer-service\n    port: 443\n    protocol: TCP\n    targetPort: 4244\n  internalTrafficPolicy: Local\n---\n# Source: cilium/templates/cilium-agent/daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cilium\n  namespace: flux-system\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    matchLabels:\n      k8s-app: cilium\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 2\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # Set app AppArmor's profile to \"unconfined\". The value of this annotation\n        # can be modified as long users know which profiles they have available\n        # in AppArmor.\n        container.apparmor.security.beta.kubernetes.io/cilium-agent: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/mount-cgroup: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: \"unconfined\"\n      labels:\n        k8s-app: cilium\n    spec:\n      containers:\n      - name: cilium-agent\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-agent\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        startupProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          failureThreshold: 105\n          periodSeconds: 2\n          successThreshold: 1\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 3\n          timeoutSeconds: 5\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_CLUSTERMESH_CONFIG\n          value: /var/lib/cilium/clustermesh/\n        - name: CILIUM_CNI_CHAINING_MODE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: cni-chaining-mode\n              optional: true\n        - name: CILIUM_CUSTOM_CNI_CONF\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: custom-cni-conf\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        lifecycle:\n          postStart:\n            exec:\n              command:\n              - \"/cni-install.sh\"\n              - \"--enable-debug=false\"\n              - \"--cni-exclusive=true\"\n              - \"--log-file=/var/run/cilium/cilium-cni.log\"\n          preStop:\n            exec:\n              command:\n              - /cni-uninstall.sh\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            add:\n              # Use to set socket permission\n              - CHOWN\n              # Used to terminate envoy child process\n              - KILL\n              # Used since cilium modifies routing tables, etc...\n              - NET_ADMIN\n              # Used since cilium creates raw sockets, etc...\n              - NET_RAW\n              # Used since cilium monitor uses mmap\n              - IPC_LOCK\n              # Used in iptables. Consider removing once we are iptables-free\n              - SYS_MODULE\n              # We need it for now but might not need it for \u003e= 5.11 specially\n              # for the 'SYS_RESOURCE'.\n              # In \u003e= 5.8 there's already BPF and PERMON capabilities\n              - SYS_ADMIN\n              # Could be an alternative for the SYS_ADMIN for the RLIMIT_NPROC\n              - SYS_RESOURCE\n              # Both PERFMON and BPF requires kernel 5.8, container runtime\n              # cri-o \u003e= v1.22.0 or containerd \u003e= v1.5.0.\n              # If available, SYS_ADMIN can be removed.\n              #- PERFMON\n              #- BPF\n              - DAC_OVERRIDE\n              - FOWNER\n              - SETGID\n              - SETUID\n            drop:\n              - ALL\n        terminationMessagePolicy: FallbackToLogsOnError\n        volumeMounts:\n        # Unprivileged containers need to mount /proc/sys/net from the host\n        # to have write access\n        - mountPath: /host/proc/sys/net\n          name: host-proc-sys-net\n        # Unprivileged containers need to mount /proc/sys/kernel from the host\n        # to have write access\n        - mountPath: /host/proc/sys/kernel\n          name: host-proc-sys-kernel\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Unprivileged containers can't set mount propagation to bidirectional\n          # in this case we will mount the bpf fs from an init container that\n          # is privileged and set the mount propagation from host to container\n          # in Cilium.\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        - name: cni-path\n          mountPath: /host/opt/cni/bin\n        - name: etc-cni-netd\n          mountPath: /host/etc/cni/net.d\n        - name: clustermesh-secrets\n          mountPath: /var/lib/cilium/clustermesh\n          readOnly: true\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n          # Needed to be able to load kernel modules\n        - name: lib-modules\n          mountPath: /lib/modules\n          readOnly: true\n        - name: xtables-lock\n          mountPath: /run/xtables.lock\n        - name: hubble-tls\n          mountPath: /var/lib/cilium/tls/hubble\n          readOnly: true\n      initContainers:\n      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.\n      # We use nsenter command with host's cgroup and mount namespaces enabled.\n      - name: mount-cgroup\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: CGROUP_ROOT\n          value: /run/cilium/cgroupv2\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh and mount that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-mount /hostbin/cilium-mount;\n          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt \"$${BIN_PATH}/cilium-mount\" $CGROUP_ROOT;\n          rm /hostbin/cilium-mount\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            drop:\n              - ALL\n            add:\n              # Only used for 'mount' cgroup\n              - SYS_ADMIN\n              # Used for nsenter\n              - SYS_CHROOT\n              - SYS_PTRACE\n      - name: apply-sysctl-overwrites\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;\n          nsenter --mount=/hostproc/1/ns/mnt \"$${BIN_PATH}/cilium-sysctlfix\";\n          rm /hostbin/cilium-sysctlfix\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            drop:\n              - ALL\n            add:\n              # Required in order to access host's /etc/sysctl.d dir\n              - SYS_ADMIN\n              # Used for nsenter\n              - SYS_CHROOT\n              - SYS_PTRACE\n      # Mount the bpf fs if it is not mounted. We will perform this task\n      # from a privileged container because the mount propagation bidirectional\n      # only works from privileged containers.\n      - name: mount-bpf-fs\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        args:\n        - 'mount | grep \"/sys/fs/bpf type bpf\" || mount -t bpf bpf /sys/fs/bpf'\n        command:\n        - /bin/bash\n        - -c\n        - --\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          mountPropagation: Bidirectional\n      - name: clean-cilium-state\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - /init-container.sh\n        env:\n        - name: CILIUM_ALL_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-state\n              optional: true\n        - name: CILIUM_BPF_STATE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: clean-cilium-bpf-state\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            # Most of the capabilities here are the same ones used in the\n            # cilium-agent's container because this container can be used to\n            # uninstall all Cilium resources, and therefore it is likely that\n            # will need the same capabilities.\n            add:\n              # Used since cilium modifies routing tables, etc...\n              - NET_ADMIN\n              # Used in iptables. Consider removing once we are iptables-free\n              - SYS_MODULE\n              # We need it for now but might not need it for \u003e= 5.11 specially\n              # for the 'SYS_RESOURCE'.\n              # In \u003e= 5.8 there's already BPF and PERMON capabilities\n              - SYS_ADMIN\n              # Could be an alternative for the SYS_ADMIN for the RLIMIT_NPROC\n              - SYS_RESOURCE\n              # Both PERFMON and BPF requires kernel 5.8, container runtime\n              # cri-o \u003e= v1.22.0 or containerd \u003e= v1.5.0.\n              # If available, SYS_ADMIN can be removed.\n              #- PERFMON\n              #- BPF\n            drop:\n              - ALL\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Required to mount cgroup filesystem from the host to cilium agent pod\n        - name: cilium-cgroup\n          mountPath: /run/cilium/cgroupv2\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi # wait-for-kube-proxy\n      restartPolicy: Always\n      priorityClassName: system-node-critical\n      serviceAccount: \"cilium\"\n      serviceAccountName: \"cilium\"\n      terminationGracePeriodSeconds: 1\n      hostNetwork: true\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                k8s-app: cilium\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To keep state between restarts / upgrades\n      - name: cilium-run\n        hostPath:\n          path: /var/run/cilium\n          type: DirectoryOrCreate\n        # To keep state between restarts / upgrades for bpf maps\n      - name: bpf-maps\n        hostPath:\n          path: /sys/fs/bpf\n          type: DirectoryOrCreate\n      # To mount cgroup2 filesystem on the host\n      - name: hostproc\n        hostPath:\n          path: /proc\n          type: Directory\n      # To keep state between restarts / upgrades for cgroup2 filesystem\n      - name: cilium-cgroup\n        hostPath:\n          path: /run/cilium/cgroupv2\n          type: DirectoryOrCreate\n      # To install cilium cni plugin in the host\n      - name: cni-path\n        hostPath:\n          path:  /opt/cni/bin\n          type: DirectoryOrCreate\n        # To install cilium cni configuration in the host\n      - name: etc-cni-netd\n        hostPath:\n          path: /etc/cni/net.d\n          type: DirectoryOrCreate\n        # To be able to load kernel modules\n      - name: lib-modules\n        hostPath:\n          path: /lib/modules\n        # To access iptables concurrently with other processes (e.g. kube-proxy)\n      - name: xtables-lock\n        hostPath:\n          path: /run/xtables.lock\n          type: FileOrCreate\n        # To read the clustermesh configuration\n      - name: clustermesh-secrets\n        secret:\n          secretName: cilium-clustermesh\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          optional: true\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n      - name: host-proc-sys-net\n        hostPath:\n          path: /proc/sys/net\n          type: Directory\n      - name: host-proc-sys-kernel\n        hostPath:\n          path: /proc/sys/kernel\n          type: Directory\n      - name: hubble-tls\n        projected:\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          sources:\n          - secret:\n              name: hubble-server-certs\n              optional: true\n              items:\n              - key: ca.crt\n                path: client-ca.crt\n              - key: tls.crt\n                path: server.crt\n              - key: tls.key\n                path: server.key\n---\n# Source: cilium/templates/cilium-operator/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cilium-operator\n  namespace: flux-system\n  labels:\n    io.cilium/app: operator\n    name: cilium-operator\nspec:\n  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go\n  # for more details.\n  replicas: 1\n  selector:\n    matchLabels:\n      io.cilium/app: operator\n      name: cilium-operator\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n      labels:\n        io.cilium/app: operator\n        name: cilium-operator\n    spec:\n      containers:\n      - name: cilium-operator\n        image: \"quay.io/cilium/operator-generic:v1.12.4@sha256:071089ec5bca1f556afb8e541d9972a0dfb09d1e25504ae642ced021ecbedbd1\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-operator-generic\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        - --debug=$(CILIUM_DEBUG)\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              key: debug\n              name: cilium-config\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9234\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          timeoutSeconds: 3\n        volumeMounts:\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n        terminationMessagePolicy: FallbackToLogsOnError\n      hostNetwork: true\n      restartPolicy: Always\n      priorityClassName: system-cluster-critical\n      serviceAccount: \"cilium-operator\"\n      serviceAccountName: \"cilium-operator\"\n      # In HA mode, cilium-operator pods must not be scheduled on the same\n      # node as they will clash with each other.\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                io.cilium/app: operator\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "cluster_name": "chongus"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "k3s-config",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "2eb4f53e577f70797239eb77e30fd08b667a9a4a3fdfa50b321d8e1a283b1a62",
            "rendered": "---\ntls-san:\n  - api.cho.rtrox.com\n  - 172.18.2.252\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
            "template": "---\ntls-san:\n  - ${api_fqdn}\n  - ${api_vip}\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
            "vars": {
              "api_fqdn": "api.cho.rtrox.com",
              "api_vip": "172.18.2.252"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "kube-vip",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "4a3b6d3b98c65275b1630b1e60afda49d9d6b8671db1124e1eace8d2db2d378f",
            "rendered": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip-0\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: eno1\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: 172.18.2.1\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: 172.18.2.252\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "template": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip-${id}\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: ${api_vip_iface}\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: ${router_id}\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: ${api_vip}\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "api_vip_iface": "eno1",
              "cluster_domain": "cho.rtrox.com",
              "id": "0",
              "router_id": "172.18.2.1"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "71622f3a4d7cc1332c901081681d112cc3cbde76154056b678de5e4bc9bedfe2",
            "rendered": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip-1\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: eno1\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: 172.18.2.2\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: 172.18.2.252\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "template": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip-${id}\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: ${api_vip_iface}\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: ${router_id}\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: ${api_vip}\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "api_vip_iface": "eno1",
              "cluster_domain": "cho.rtrox.com",
              "id": "1",
              "router_id": "172.18.2.2"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "fcc39c7544ca32587920b24f062d504c3da1cde83d5ade25269ba2a9452eca4f",
            "rendered": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip-2\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: eno1\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: 172.18.2.3\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: 172.18.2.252\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "template": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip-${id}\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: ${api_vip_iface}\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: ${router_id}\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: ${api_vip}\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "api_vip_iface": "eno1",
              "cluster_domain": "cho.rtrox.com",
              "id": "2",
              "router_id": "172.18.2.3"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_group",
      "name": "flatcar-install",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node01",
            "metadata": {},
            "name": "flatcar-install-node01",
            "profile": "flatcar-install-node01",
            "selector": {
              "mac": "44:a8:42:3e:b9:27"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node02",
            "metadata": {},
            "name": "flatcar-install-node02",
            "profile": "flatcar-install-node02",
            "selector": {
              "mac": "b0:83:fe:cf:91:f7"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node03",
            "metadata": {},
            "name": "flatcar-install-node03",
            "profile": "flatcar-install-node03",
            "selector": {
              "mac": "b0:83:fe:cf:d7:ee"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_group",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node01",
            "metadata": {},
            "name": "worker-node01",
            "profile": "worker-node01",
            "selector": {
              "node": "node01",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node02",
            "metadata": {},
            "name": "worker-node02",
            "profile": "worker-node02",
            "selector": {
              "node": "node02",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node03",
            "metadata": {},
            "name": "worker-node03",
            "profile": "worker-node03",
            "selector": {
              "node": "node03",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_profile",
      "name": "flatcar-install",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node01",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node01",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLMYrDMBCF4V6nmPXCdpLsdsHkImkkzSRWkDRBMzb27UNI0qR58OD7f398zM3HIAtY2k1aewFrO2k/YBphWFTv/97XoGmJvDvJ6Lp23l3i6vO1Zc3cTixzbqKhFMK/xkjzc8ZpAMvwUe4m3MylBE2h27eHswGwCB5p84Lh9fNXtCJtASsIqRYycohSTVqgU2RW8wgAAP//FWpKkcgAAAA=\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node01-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node02",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node02",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vS9SgUX8RLkhltJMlIZlratxdRL14++OD3//3xMTcfg8xgaTNp6QWs7aR9h/8Rhln1fvS+Bk1z5M1JRte18+YSV5+vLWvmdmKZchMNpRD+NUaanjMeBrAMH+Vuws1cStAUun17OBsAi+CRVi8YXj9/RQvSGrCCkGohI7so1aQFOkVmNY8AAAD//1sM4inIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node02-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node03",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node03",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vSxZtQfBEvSWa0kSQjmWlp315EvXj54IPf//fHx9x8DDKDpc2kpRewtpP2Hf5HGGbV+9H7GjTNkTcnGV3XzptLXH2+tqyZ24llyk00lEL41xhpes54GMAyfJS7CTdzKUFT6Pbt4WwALIJHWr1geP38FS1Ia8AKQqqFjOyiVJMW6BSZ1TwCAAD//14sVffIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node03-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_profile",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node01",
            "initrd": null,
            "kernel": null,
            "name": "worker-node01",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node01.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAtMAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMQogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC=--cluster-init\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node02",
            "initrd": null,
            "kernel": null,
            "name": "worker-node02",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node02.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAtMQogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMgogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node03",
            "initrd": null,
            "kernel": null,
            "name": "worker-node03",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node03.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZToga3ViZS12aXAtMgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMwogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
