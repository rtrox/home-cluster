{
  "version": 4,
  "terraform_version": "1.3.6",
  "serial": 189,
  "lineage": "010f88ba-7585-17bd-e205-abfa42200d0b",
  "outputs": {
    "k3s-api-fqdn": {
      "value": "api.cho.rtrox.com",
      "type": "string"
    },
    "k3s-api-vip": {
      "value": "172.18.2.252",
      "type": "string"
    },
    "k3s-config": {
      "value": "---\ntls-san:\n  - api.cho.rtrox.com\n  - 172.18.2.252\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
      "type": "string"
    }
  },
  "resources": [
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "ct_config",
      "name": "install",
      "provider": "provider[\"registry.terraform.io/poseidon/ct\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node01\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node01-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "908637654",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLMYrDMBCF4V6nmPXCdpLsdsHkImkkzSRWkDRBMzb27UNI0qR58OD7f398zM3HIAtY2k1aewFrO2k/YBphWFTv/97XoGmJvDvJ6Lp23l3i6vO1Zc3cTixzbqKhFMK/xkjzc8ZpAMvwUe4m3MylBE2h27eHswGwCB5p84Lh9fNXtCJtASsIqRYycohSTVqgU2RW8wgAAP//FWpKkcgAAAA=\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node01-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node02\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node02-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "2515247730",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vS9SgUX8RLkhltJMlIZlratxdRL14++OD3//3xMTcfg8xgaTNp6QWs7aR9h/8Rhln1fvS+Bk1z5M1JRte18+YSV5+vLWvmdmKZchMNpRD+NUaanjMeBrAMH+Vuws1cStAUun17OBsAi+CRVi8YXj9/RQvSGrCCkGohI7so1aQFOkVmNY8AAAD//1sM4inIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node02-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nsystemd:\n  units:\n    - name: installer.service\n      enabled: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://matchbox.sid.rtrox.com/ignition?os=installed\u0026node=node03\" -o ignition.json\n          flatcar-install \\\n            -d /dev/sda \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\n    - path: /etc/hostname\n      contents:\n        inline: node03-installer\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "843122694",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vSxZtQfBEvSWa0kSQjmWlp315EvXj54IPf//fHx9x8DDKDpc2kpRewtpP2Hf5HGGbV+9H7GjTNkTcnGV3XzptLXH2+tqyZ24llyk00lEL41xhpes54GMAyfJS7CTdzKUFT6Pbt4WwALIJHWr1geP38FS1Ia8AKQqqFjOyiVJMW6BSZ1TwCAAD//14sVffIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node03-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "ct_config",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/ct\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node01.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgYXBwLmt1YmVybmV0ZXMuaW8vdmVyc2lvbjogdjAuNS43CiAgbmFtZToga3ViZS12aXAtZHMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogICAgICBsYWJlbHM6CiAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICAgIHNwZWM6CiAgICAgIGFmZmluaXR5OgogICAgICAgIG5vZGVBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAgIG5vZGVTZWxlY3RvclRlcm1zOgogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL21hc3RlcgogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL2NvbnRyb2wtcGxhbmUKICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgY29udGFpbmVyczoKICAgICAgLSBhcmdzOgogICAgICAgIC0gbWFuYWdlcgogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IHZpcF9hcnAKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IHBvcnQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICAtIG5hbWU6IHZpcF9pbnRlcmZhY2UKICAgICAgICAgIHZhbHVlOiBlbm8xCiAgICAgICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICAgICAgdmFsdWU6ICIzMiIKICAgICAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogY3BfbmFtZXNwYWNlCiAgICAgICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgICAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYWRlcmVsZWN0aW9uCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiB2aXBfbGVhc2VkdXJhdGlvbgogICAgICAgICAgdmFsdWU6ICI1IgogICAgICAgIC0gbmFtZTogdmlwX3JlbmV3ZGVhZGxpbmUKICAgICAgICAgIHZhbHVlOiAiMyIKICAgICAgICAtIG5hbWU6IHZpcF9yZXRyeXBlcmlvZAogICAgICAgICAgdmFsdWU6ICIxIgogICAgICAgIC0gbmFtZTogYWRkcmVzcwogICAgICAgICAgdmFsdWU6IDE3Mi4xOC4yLjI1MgogICAgICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgICAgIHZhbHVlOiA6MjExMgogICAgICAgIGltYWdlOiBnaGNyLmlvL2t1YmUtdmlwL2t1YmUtdmlwOnYwLjUuNwogICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgbmFtZToga3ViZS12aXAKICAgICAgICByZXNvdXJjZXM6IHt9CiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgIC0gTkVUX1JBVwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICAgIG5hbWU6IGt1YmVjb25maWcKICAgICAgaG9zdEFsaWFzZXM6CiAgICAgIC0gaG9zdG5hbWVzOgogICAgICAgIC0ga3ViZXJuZXRlcwogICAgICAgIGlwOiAxMjcuMC4wLjEKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgIC0gZWZmZWN0OiBOb1NjaGVkdWxlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAtIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICBuYW1lOiBrdWJlY29uZmlnCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBuYW1lOiBrdWJlLXZpcAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMQogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC=--cluster-init\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=10min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "3972139744",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node01.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgYXBwLmt1YmVybmV0ZXMuaW8vdmVyc2lvbjogdjAuNS43CiAgbmFtZToga3ViZS12aXAtZHMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogICAgICBsYWJlbHM6CiAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICAgIHNwZWM6CiAgICAgIGFmZmluaXR5OgogICAgICAgIG5vZGVBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAgIG5vZGVTZWxlY3RvclRlcm1zOgogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL21hc3RlcgogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL2NvbnRyb2wtcGxhbmUKICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgY29udGFpbmVyczoKICAgICAgLSBhcmdzOgogICAgICAgIC0gbWFuYWdlcgogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IHZpcF9hcnAKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IHBvcnQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICAtIG5hbWU6IHZpcF9pbnRlcmZhY2UKICAgICAgICAgIHZhbHVlOiBlbm8xCiAgICAgICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICAgICAgdmFsdWU6ICIzMiIKICAgICAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogY3BfbmFtZXNwYWNlCiAgICAgICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgICAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYWRlcmVsZWN0aW9uCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiB2aXBfbGVhc2VkdXJhdGlvbgogICAgICAgICAgdmFsdWU6ICI1IgogICAgICAgIC0gbmFtZTogdmlwX3JlbmV3ZGVhZGxpbmUKICAgICAgICAgIHZhbHVlOiAiMyIKICAgICAgICAtIG5hbWU6IHZpcF9yZXRyeXBlcmlvZAogICAgICAgICAgdmFsdWU6ICIxIgogICAgICAgIC0gbmFtZTogYWRkcmVzcwogICAgICAgICAgdmFsdWU6IDE3Mi4xOC4yLjI1MgogICAgICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgICAgIHZhbHVlOiA6MjExMgogICAgICAgIGltYWdlOiBnaGNyLmlvL2t1YmUtdmlwL2t1YmUtdmlwOnYwLjUuNwogICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgbmFtZToga3ViZS12aXAKICAgICAgICByZXNvdXJjZXM6IHt9CiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgIC0gTkVUX1JBVwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICAgIG5hbWU6IGt1YmVjb25maWcKICAgICAgaG9zdEFsaWFzZXM6CiAgICAgIC0gaG9zdG5hbWVzOgogICAgICAgIC0ga3ViZXJuZXRlcwogICAgICAgIGlwOiAxMjcuMC4wLjEKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgIC0gZWZmZWN0OiBOb1NjaGVkdWxlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAtIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICBuYW1lOiBrdWJlY29uZmlnCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBuYW1lOiBrdWJlLXZpcAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMQogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC=--cluster-init\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node02.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1hZ2VudC9zZXJ2aWNlYWNjb3VudC55YW1sCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6ICJjaWxpdW0iCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLW9wZXJhdG9yL3NlcnZpY2VhY2NvdW50LnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogImNpbGl1bS1vcGVyYXRvciIKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tY2Etc2VjcmV0LnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bS1jYQogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KZGF0YToKICBjYS5jcnQ6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJGZWtORFFXWjFaMEYzU1VKQlowbFJUalpPVFZod1VYTnRhVGMzUTJGMVNGWkxOVzF4YWtGT1FtZHJjV2hyYVVjNWR6QkNRVkZ6UmtGRVFWVUtUVkpKZDBWQldVUldVVkZFUlhkc1JHRlhlSEJrVnpCblVUQkZkMGhvWTA1TmFrbDRUV3BCTWsxcVJYbE9hazB3VjJoalRrMXFWWGhOYWtFeFRXcEZlUXBPYWswd1YycEJWVTFTU1hkRlFWbEVWbEZSUkVWM2JFUmhWM2h3WkZjd1oxRXdSWGRuWjBWcFRVRXdSME5UY1VkVFNXSXpSRkZGUWtGUlZVRkJORWxDQ2tSM1FYZG5aMFZMUVc5SlFrRlJRelUwZURGa2NVdEJhM05KU1hRd2RHMTRMeXRKWnpSQ1MzRXdRMUJTV1ZCaU1qZFhia0YzUmtGRWF5OTFXbkZoUXpNS0wxTkhMMHRzTmxSTWFGazJXSFIxTlUxS1dtSlRZMkoyWlc1SVVYbG1TR3Q0YVc5bFZsVlhTazlNU1VKTkx6TldWbHA0U0V0NkwweHVkR3A2TDBFMWNRbzJXRTB3U0VaTmNVcGFRelJvUlVGd1kzRkNjWEp3YTBjNU5uazNiQ3R5TTNKV01rRXhibkpRVkZvclYwNU9iVTVHVTBSMFluQm1RelZ2VXpOUVJYaEJDbXM1ZEZWU1RFNUZWVlpuUTNObWVXbFlabVl5ZFZSdVoyYzBZMnhKSzNkdFlWRjBVMjlMZEZod1RubHdiRll6YzNFeVVXOHdRbkJqVjNaa01UVjFTMWNLYURjeVRqaDZWVTl0TDJOVWVuSlhaWE0xTmk5T1dtaExWM2xGWnpoWk5XcDNVMk4yVUd0a1JqTkxhR2t6UTI1eFppOUZlR2gyYjNkblpYRnFZM0JKWlFwNFdXcDRaMDF2VWlzeVRrTlNRV3RXVDB4NEt6UnpjbEIzVkZkVk1FVjNZa3AzUzNCQlowMUNRVUZIYWxsVVFtWk5RVFJIUVRGVlpFUjNSVUl2ZDFGRkNrRjNTVU53UkVGa1FtZE9Wa2hUVlVWR2FrRlZRbWRuY2tKblJVWkNVV05FUVZGWlNVdDNXVUpDVVZWSVFYZEpkMFIzV1VSV1VqQlVRVkZJTDBKQlZYY0tRWGRGUWk5NlFXUkNaMDVXU0ZFMFJVWm5VVlZxYVZBNWNtNUdhMHBFYzBRclozcFJMM0UyTkdGeEsxQTFhV2QzUkZGWlNrdHZXa2xvZG1OT1FWRkZUQXBDVVVGRVoyZEZRa0ZHYm5sblRVZDVjRTAwWlZSUFpFMVVjRzlXWjA5YVJIUlBPV1ZLUzJSRllucEhWbWxxVVdGSGJYSmtVV3REVmtObFNEZFFTRWR6Q21KQmFIbGpNMkUxWW5rdmRXcENNVXBRUjBadU4yRkdabTkyU0M5aFdqWlhNalZ1U2xVNU5tcGhVelFyVVhOTVEzaE5SbVJ0SzNKWGVGbG5jbmxqWTAwS1RqVk5OWFJMT0ZOUmJrWnpWamxwVDJ0U1kzUkpXbEJtZVdOak4wMHhNRzlhZWxOemJuaG5la2Q0Y1hReVlqWndRbEJrT1RaU1MwbDRlRmhuUVdjd1dRcHRVRnBKUTNaR2IxTmhZVzF4UzB4cldWcHFiRkF5YlRsUk5VZEhkalZpTjFreGIyRnlkR3Q1WkU1M1lXMWpkVTFOZWtjeFlXeDJaM0ZxY25sclRrVkJDbmRtTDB0eE4yRkNVRXRPYkVOeVNqRXJlazF6YkhkMlpXVjZkRTh6V1RoamMxWk5aVVZJTUhwbFpIZDFNR3BSY20wNVIwSkRNakYwUW5wdWNHMTRPVmdLU0V0cFVtdHRSM0p6TjFwT1RHbEpkMjlYU0ZGNldVUXlOMmhJU25KWk9EMEtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICBjYS5rZXk6IExTMHRMUzFDUlVkSlRpQlNVMEVnVUZKSlZrRlVSU0JMUlZrdExTMHRMUXBOU1VsRmIyZEpRa0ZCUzBOQlVVVkJkV1ZOWkZoaGFXZEtURU5EVEdSTVduTm1MMmxKVDBGVGNYUkJhakJYUkRJNWRURndkMDFDVVVFMVVEZHRZVzFuQ25Rdk1HaDJlWEJsYTNrMFYwOXNOMkoxVkVOWFZ6QnVSemN6Y0hnd1RXNTROVTFaY1Voc1ZrWnBWR2w1UVZSUU9URldWMk5TZVhNdmVUVTNXVGd2ZDA4S1lYVnNlazVDZUZSTGFWZFJkVWxTUVV0WVMyZGhjVFphUW5abGMzVTFabkU1TmpGa1owNWFObm93TW1ac2FsUmFhbEpWWnpkWE5saDNkV0ZGZEhwNFRRcFJTbEJpVmtWVGVsSkdSbGxCY2tnNGIyd3pNemx5YXpVMFNVOUlTbE5RYzBwdGEweFZjVU55VmpaVVkzRmFWbVEzUzNSclMwNUJZVmhHY2pOa1pXSnBDbXh2WlRscVprMHhSSEIyTTBVNE5qRnVjazlsZG5wWFdWTnNjMmhKVUVkUFdUaEZia3g2TlVoU1pIbHZXWFIzY0RadUwzaE5XV0kyVFVsSWNXOHpTMU1LU0hOWFNUaFpSRXRGWm5ScVVXdFJTa1pVYVRobWRVeExlamhGTVd4T1FrMUhlV05EY1ZGSlJFRlJRVUpCYjBsQ1FVRkhiRXBQYkdwVFMyVkxaVVo0TXdwa1ZETkRRMlp3U1dkWFNFcHVZMlZKYlVOaWRsTjJVazUyTW1WSmN6Y3hWVnAyZFRVelkyRllWbGRpZDBSWWNFOTRTbk5MT1hkdGRubFlZblJIYm5wRENtcE5WamxwTTI1b1VERkNUR3hEWlRKcmFGTkdVVmhFVUhwVGVUaEtlV1JvYmpZNFMybGtOVFJOWWxFMWVVOUpXa3RaWnpCWU16aFRUa2xDTDFOTFVWRUtXVUl2TlVKTk4xUkdlSE50YTB4aUwyMU1NVXMxY0U5NlYzUjRObk5sWkVGaU0yZEdWelJJTWpSVVFVSjROVEZrT0RabFRXZHlOVWN4WkRWS05uZG9kZ3BXV2xWSmFtZzNUVTV3UW5waU5XMXplbWhzZUV0SmNXNUNVWE5hZDBwR2FUQXhSbVZxZVdKek5EZGpOVWRJUjJ0a09HUTNiVVJ4Y1hsbGNtSnBhV2cyQ205a09FRjZVa1I1V1RKaU5rOHZWR1pYTTNaUlExWXpPVTB4TUVJd2JIRTBLelZJSzFnM2JGSnVVRmhMVkZkdlFrVXZXVEozVkZVM1QxWTJkRU5ET0RBS2RuQmFZVEpHUlVObldVVkJPVU5NWm1GVlozVXJSbWN3VG1kWk5XeFJXa2xqYUhkVlRHUnVlSG9yY1V4dE5UUTBjR1ZVYkdKNWRIbEpUR3h0Y2t4dmVBcE5aRll6TlZkcFdEaEZLelJHYVdOQlFrUnBiMFJLZDFBM0x6VlpialZGVDJkcE5tY3ZjbU56UzFCelptNVBTMnRQUWtOUFdpdDVVMnRWTVZnek5UWmFDalJJZFVNeFZsaHhNelZCVEVkM1VXd3JObVJrUTFCeFZqRnRSMHhuV1hoSWMwdEJabGxvVGtVNVVFRXlURzUwZVVsYVdFaEZjemhEWjFsRlFYZDFkV0lLVUhCT2JFZEVMMlJ4WkRneE9GVlJZbUZHUlM4NE1FVnZaRUUzU0hGMU5FdExaR2h1ZGtSbVQyMXFZakY0TUdRNEwxUkpRemd4ZGtoVWFrSTJZVEpaWmdwRVprMWtVVkV2YVVkeFVURllWakZHZDB4T2QxVjRNbTlGYzJGckx6bEtRblJRUkhGV1NUZFZTMlZTWjB4amRXWnpOM05sU1dkaFpGSmpjRkZSUjBGSkNtWkhPVGczV1M5MFpXbElRbU5zYTFWTlpUSTBaMVZUVm05Q1IzVXhNVTAwVkVoaFpWVlJZME5uV1VKTmNuSjBkbnBWTVRkclprUnpWM2swZUVGbFZURUtaV3cxV1ZCS1J6UnNaRzhyUTJkbFVFUkJUMGt4UzA5dVdtSlROMWxyZUdKak9IRlRSWHBXVDA1VGQwVlJWVWN2UldKRGRreFZTRkZTZUhFNVNFRnVjZ3B0UVhaWWJHUTVXVU12UkZaRVZtTTFhVkJJUWpoTmRtdDFaRGt4UkU1TlYyTktWV0YyZWpkcU9EbEhXa3hqWkd0alUwSkhNWEppUkhaTFdHVkVhSEpwQ21ad2FqZzNSVXRJYTFBdmFuWTRRMDFxWjJkWFpuZExRbWRDTjFOWFMwMUdaRnBtYmtOWGMwTkZObkZLTlZobFUxZFlWbWx0VkRNME1VWlFVQzlwVm5RS2VHTkdObHBhTXpORlRtZHdSWEpsUzNZdlMzaFZXWFZ2YlUxTlFYa3JjRTU0YUU1NWNXOU5hRGhvY0VsV1J6Vk1UVmhxUkVkTUsxaFVOa2gzU1d4dE1RcFBjV2xUVTFSUmVXMDBOME5SZDJWT2EwRTROMVZ2Vld4dU5Xb3JWbTVyZFhVclpHOTFaR3d4UjNaNU1ETjZLMmcwYlc0eVlWWTFPVlJXVGxwSmJUZGpDakYwTTJwQmIwZEJSVWhzWTA1TEx6WktkbVZyVmtwWWJpOVZibE5QZVZOU2R5dDFNMGhqV21aUGVrVkpjakpsTTJSSlZIUlJNMHhXV0ROUlJubGtNeXNLTlhkMFNqWkJSR1ZDVjFWbU0wTkNUMjFsZERCa2RVUnNiMlJMVlRscFJtZDFXblJvTURSRGIxYzBaRTFvZFRkSlZVeENWVFZPYm5SMmFFTllUVFJZUkFwdE1tdEdiR1F6Y3pZM09URmxaRmhWVWxkU1oydFJXWGRGYkVZNU16VmpURXB4U0VKSVQydDZRMmRIYldaWFZUZGpRVUU5Q2kwdExTMHRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzB0TFMwdENnPT0KLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2h1YmJsZS90bHMtaGVsbS9jYS1zZWNyZXQueWFtbAphcGlWZXJzaW9uOiB2MQpraW5kOiBTZWNyZXQKbWV0YWRhdGE6CiAgbmFtZTogaHViYmxlLWNhLXNlY3JldAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KZGF0YToKICBjYS5jcnQ6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJGZWtORFFXWjFaMEYzU1VKQlowbFJUalpPVFZod1VYTnRhVGMzUTJGMVNGWkxOVzF4YWtGT1FtZHJjV2hyYVVjNWR6QkNRVkZ6UmtGRVFWVUtUVkpKZDBWQldVUldVVkZFUlhkc1JHRlhlSEJrVnpCblVUQkZkMGhvWTA1TmFrbDRUV3BCTWsxcVJYbE9hazB3VjJoalRrMXFWWGhOYWtFeFRXcEZlUXBPYWswd1YycEJWVTFTU1hkRlFWbEVWbEZSUkVWM2JFUmhWM2h3WkZjd1oxRXdSWGRuWjBWcFRVRXdSME5UY1VkVFNXSXpSRkZGUWtGUlZVRkJORWxDQ2tSM1FYZG5aMFZMUVc5SlFrRlJRelUwZURGa2NVdEJhM05KU1hRd2RHMTRMeXRKWnpSQ1MzRXdRMUJTV1ZCaU1qZFhia0YzUmtGRWF5OTFXbkZoUXpNS0wxTkhMMHRzTmxSTWFGazJXSFIxTlUxS1dtSlRZMkoyWlc1SVVYbG1TR3Q0YVc5bFZsVlhTazlNU1VKTkx6TldWbHA0U0V0NkwweHVkR3A2TDBFMWNRbzJXRTB3U0VaTmNVcGFRelJvUlVGd1kzRkNjWEp3YTBjNU5uazNiQ3R5TTNKV01rRXhibkpRVkZvclYwNU9iVTVHVTBSMFluQm1RelZ2VXpOUVJYaEJDbXM1ZEZWU1RFNUZWVlpuUTNObWVXbFlabVl5ZFZSdVoyYzBZMnhKSzNkdFlWRjBVMjlMZEZod1RubHdiRll6YzNFeVVXOHdRbkJqVjNaa01UVjFTMWNLYURjeVRqaDZWVTl0TDJOVWVuSlhaWE0xTmk5T1dtaExWM2xGWnpoWk5XcDNVMk4yVUd0a1JqTkxhR2t6UTI1eFppOUZlR2gyYjNkblpYRnFZM0JKWlFwNFdXcDRaMDF2VWlzeVRrTlNRV3RXVDB4NEt6UnpjbEIzVkZkVk1FVjNZa3AzUzNCQlowMUNRVUZIYWxsVVFtWk5RVFJIUVRGVlpFUjNSVUl2ZDFGRkNrRjNTVU53UkVGa1FtZE9Wa2hUVlVWR2FrRlZRbWRuY2tKblJVWkNVV05FUVZGWlNVdDNXVUpDVVZWSVFYZEpkMFIzV1VSV1VqQlVRVkZJTDBKQlZYY0tRWGRGUWk5NlFXUkNaMDVXU0ZFMFJVWm5VVlZxYVZBNWNtNUdhMHBFYzBRclozcFJMM0UyTkdGeEsxQTFhV2QzUkZGWlNrdHZXa2xvZG1OT1FWRkZUQXBDVVVGRVoyZEZRa0ZHYm5sblRVZDVjRTAwWlZSUFpFMVVjRzlXWjA5YVJIUlBPV1ZLUzJSRllucEhWbWxxVVdGSGJYSmtVV3REVmtObFNEZFFTRWR6Q21KQmFIbGpNMkUxWW5rdmRXcENNVXBRUjBadU4yRkdabTkyU0M5aFdqWlhNalZ1U2xVNU5tcGhVelFyVVhOTVEzaE5SbVJ0SzNKWGVGbG5jbmxqWTAwS1RqVk5OWFJMT0ZOUmJrWnpWamxwVDJ0U1kzUkpXbEJtZVdOak4wMHhNRzlhZWxOemJuaG5la2Q0Y1hReVlqWndRbEJrT1RaU1MwbDRlRmhuUVdjd1dRcHRVRnBKUTNaR2IxTmhZVzF4UzB4cldWcHFiRkF5YlRsUk5VZEhkalZpTjFreGIyRnlkR3Q1WkU1M1lXMWpkVTFOZWtjeFlXeDJaM0ZxY25sclRrVkJDbmRtTDB0eE4yRkNVRXRPYkVOeVNqRXJlazF6YkhkMlpXVjZkRTh6V1RoamMxWk5aVVZJTUhwbFpIZDFNR3BSY20wNVIwSkRNakYwUW5wdWNHMTRPVmdLU0V0cFVtdHRSM0p6TjFwT1RHbEpkMjlYU0ZGNldVUXlOMmhJU25KWk9EMEtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICBjYS5rZXk6IExTMHRMUzFDUlVkSlRpQlNVMEVnVUZKSlZrRlVSU0JMUlZrdExTMHRMUXBOU1VsRmIyZEpRa0ZCUzBOQlVVVkJkV1ZOWkZoaGFXZEtURU5EVEdSTVduTm1MMmxKVDBGVGNYUkJhakJYUkRJNWRURndkMDFDVVVFMVVEZHRZVzFuQ25Rdk1HaDJlWEJsYTNrMFYwOXNOMkoxVkVOWFZ6QnVSemN6Y0hnd1RXNTROVTFaY1Voc1ZrWnBWR2w1UVZSUU9URldWMk5TZVhNdmVUVTNXVGd2ZDA4S1lYVnNlazVDZUZSTGFWZFJkVWxTUVV0WVMyZGhjVFphUW5abGMzVTFabkU1TmpGa1owNWFObm93TW1ac2FsUmFhbEpWWnpkWE5saDNkV0ZGZEhwNFRRcFJTbEJpVmtWVGVsSkdSbGxCY2tnNGIyd3pNemx5YXpVMFNVOUlTbE5RYzBwdGEweFZjVU55VmpaVVkzRmFWbVEzUzNSclMwNUJZVmhHY2pOa1pXSnBDbXh2WlRscVprMHhSSEIyTTBVNE5qRnVjazlsZG5wWFdWTnNjMmhKVUVkUFdUaEZia3g2TlVoU1pIbHZXWFIzY0RadUwzaE5XV0kyVFVsSWNXOHpTMU1LU0hOWFNUaFpSRXRGWm5ScVVXdFJTa1pVYVRobWRVeExlamhGTVd4T1FrMUhlV05EY1ZGSlJFRlJRVUpCYjBsQ1FVRkhiRXBQYkdwVFMyVkxaVVo0TXdwa1ZETkRRMlp3U1dkWFNFcHVZMlZKYlVOaWRsTjJVazUyTW1WSmN6Y3hWVnAyZFRVelkyRllWbGRpZDBSWWNFOTRTbk5MT1hkdGRubFlZblJIYm5wRENtcE5WamxwTTI1b1VERkNUR3hEWlRKcmFGTkdVVmhFVUhwVGVUaEtlV1JvYmpZNFMybGtOVFJOWWxFMWVVOUpXa3RaWnpCWU16aFRUa2xDTDFOTFVWRUtXVUl2TlVKTk4xUkdlSE50YTB4aUwyMU1NVXMxY0U5NlYzUjRObk5sWkVGaU0yZEdWelJJTWpSVVFVSjROVEZrT0RabFRXZHlOVWN4WkRWS05uZG9kZ3BXV2xWSmFtZzNUVTV3UW5waU5XMXplbWhzZUV0SmNXNUNVWE5hZDBwR2FUQXhSbVZxZVdKek5EZGpOVWRJUjJ0a09HUTNiVVJ4Y1hsbGNtSnBhV2cyQ205a09FRjZVa1I1V1RKaU5rOHZWR1pYTTNaUlExWXpPVTB4TUVJd2JIRTBLelZJSzFnM2JGSnVVRmhMVkZkdlFrVXZXVEozVkZVM1QxWTJkRU5ET0RBS2RuQmFZVEpHUlVObldVVkJPVU5NWm1GVlozVXJSbWN3VG1kWk5XeFJXa2xqYUhkVlRHUnVlSG9yY1V4dE5UUTBjR1ZVYkdKNWRIbEpUR3h0Y2t4dmVBcE5aRll6TlZkcFdEaEZLelJHYVdOQlFrUnBiMFJLZDFBM0x6VlpialZGVDJkcE5tY3ZjbU56UzFCelptNVBTMnRQUWtOUFdpdDVVMnRWTVZnek5UWmFDalJJZFVNeFZsaHhNelZCVEVkM1VXd3JObVJrUTFCeFZqRnRSMHhuV1hoSWMwdEJabGxvVGtVNVVFRXlURzUwZVVsYVdFaEZjemhEWjFsRlFYZDFkV0lLVUhCT2JFZEVMMlJ4WkRneE9GVlJZbUZHUlM4NE1FVnZaRUUzU0hGMU5FdExaR2h1ZGtSbVQyMXFZakY0TUdRNEwxUkpRemd4ZGtoVWFrSTJZVEpaWmdwRVprMWtVVkV2YVVkeFVURllWakZHZDB4T2QxVjRNbTlGYzJGckx6bEtRblJRUkhGV1NUZFZTMlZTWjB4amRXWnpOM05sU1dkaFpGSmpjRkZSUjBGSkNtWkhPVGczV1M5MFpXbElRbU5zYTFWTlpUSTBaMVZUVm05Q1IzVXhNVTAwVkVoaFpWVlJZME5uV1VKTmNuSjBkbnBWTVRkclprUnpWM2swZUVGbFZURUtaV3cxV1ZCS1J6UnNaRzhyUTJkbFVFUkJUMGt4UzA5dVdtSlROMWxyZUdKak9IRlRSWHBXVDA1VGQwVlJWVWN2UldKRGRreFZTRkZTZUhFNVNFRnVjZ3B0UVhaWWJHUTVXVU12UkZaRVZtTTFhVkJJUWpoTmRtdDFaRGt4UkU1TlYyTktWV0YyZWpkcU9EbEhXa3hqWkd0alUwSkhNWEppUkhaTFdHVkVhSEpwQ21ad2FqZzNSVXRJYTFBdmFuWTRRMDFxWjJkWFpuZExRbWRDTjFOWFMwMUdaRnBtYmtOWGMwTkZObkZLTlZobFUxZFlWbWx0VkRNME1VWlFVQzlwVm5RS2VHTkdObHBhTXpORlRtZHdSWEpsUzNZdlMzaFZXWFZ2YlUxTlFYa3JjRTU0YUU1NWNXOU5hRGhvY0VsV1J6Vk1UVmhxUkVkTUsxaFVOa2gzU1d4dE1RcFBjV2xUVTFSUmVXMDBOME5SZDJWT2EwRTROMVZ2Vld4dU5Xb3JWbTVyZFhVclpHOTFaR3d4UjNaNU1ETjZLMmcwYlc0eVlWWTFPVlJXVGxwSmJUZGpDakYwTTJwQmIwZEJSVWhzWTA1TEx6WktkbVZyVmtwWWJpOVZibE5QZVZOU2R5dDFNMGhqV21aUGVrVkpjakpsTTJSSlZIUlJNMHhXV0ROUlJubGtNeXNLTlhkMFNqWkJSR1ZDVjFWbU0wTkNUMjFsZERCa2RVUnNiMlJMVlRscFJtZDFXblJvTURSRGIxYzBaRTFvZFRkSlZVeENWVFZPYm5SMmFFTllUVFJZUkFwdE1tdEdiR1F6Y3pZM09URmxaRmhWVWxkU1oydFJXWGRGYkVZNU16VmpURXB4U0VKSVQydDZRMmRIYldaWFZUZGpRVUU5Q2kwdExTMHRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzB0TFMwdENnPT0KLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2h1YmJsZS90bHMtaGVsbS9zZXJ2ZXItc2VjcmV0LnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IGh1YmJsZS1zZXJ2ZXItY2VydHMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnR5cGU6IGt1YmVybmV0ZXMuaW8vdGxzCmRhdGE6CiAgY2EuY3J0OiAgTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUkZla05EUVdaMVowRjNTVUpCWjBsUlRqWk9UVmh3VVhOdGFUYzNRMkYxU0ZaTE5XMXhha0ZPUW1kcmNXaHJhVWM1ZHpCQ1FWRnpSa0ZFUVZVS1RWSkpkMFZCV1VSV1VWRkVSWGRzUkdGWGVIQmtWekJuVVRCRmQwaG9ZMDVOYWtsNFRXcEJNazFxUlhsT2FrMHdWMmhqVGsxcVZYaE5ha0V4VFdwRmVRcE9hazB3VjJwQlZVMVNTWGRGUVZsRVZsRlJSRVYzYkVSaFYzaHdaRmN3WjFFd1JYZG5aMFZwVFVFd1IwTlRjVWRUU1dJelJGRkZRa0ZSVlVGQk5FbENDa1IzUVhkblowVkxRVzlKUWtGUlF6VTBlREZrY1V0QmEzTkpTWFF3ZEcxNEx5dEpaelJDUzNFd1ExQlNXVkJpTWpkWGJrRjNSa0ZFYXk5MVduRmhRek1LTDFOSEwwdHNObFJNYUZrMldIUjFOVTFLV21KVFkySjJaVzVJVVhsbVNHdDRhVzlsVmxWWFNrOU1TVUpOTHpOV1ZscDRTRXQ2TDB4dWRHcDZMMEUxY1FvMldFMHdTRVpOY1VwYVF6Um9SVUZ3WTNGQ2NYSndhMGM1Tm5rM2JDdHlNM0pXTWtFeGJuSlFWRm9yVjA1T2JVNUdVMFIwWW5CbVF6VnZVek5RUlhoQkNtczVkRlZTVEU1RlZWWm5RM05tZVdsWVptWXlkVlJ1WjJjMFkyeEpLM2R0WVZGMFUyOUxkRmh3VG5sd2JGWXpjM0V5VVc4d1FuQmpWM1prTVRWMVMxY0thRGN5VGpoNlZVOXRMMk5VZW5KWFpYTTFOaTlPV21oTFYzbEZaemhaTldwM1UyTjJVR3RrUmpOTGFHa3pRMjV4Wmk5RmVHaDJiM2RuWlhGcVkzQkpaUXA0V1dwNFowMXZVaXN5VGtOU1FXdFdUMHg0S3pSemNsQjNWRmRWTUVWM1lrcDNTM0JCWjAxQ1FVRkhhbGxVUW1aTlFUUkhRVEZWWkVSM1JVSXZkMUZGQ2tGM1NVTndSRUZrUW1kT1ZraFRWVVZHYWtGVlFtZG5ja0puUlVaQ1VXTkVRVkZaU1V0M1dVSkNVVlZJUVhkSmQwUjNXVVJXVWpCVVFWRklMMEpCVlhjS1FYZEZRaTk2UVdSQ1owNVdTRkUwUlVablVWVnFhVkE1Y201R2EwcEVjMFFyWjNwUkwzRTJOR0Z4SzFBMWFXZDNSRkZaU2t0dldrbG9kbU5PUVZGRlRBcENVVUZFWjJkRlFrRkdibmxuVFVkNWNFMDBaVlJQWkUxVWNHOVdaMDlhUkhSUE9XVktTMlJGWW5wSFZtbHFVV0ZIYlhKa1VXdERWa05sU0RkUVNFZHpDbUpCYUhsak0yRTFZbmt2ZFdwQ01VcFFSMFp1TjJGR1ptOTJTQzloV2paWE1qVnVTbFU1Tm1waFV6UXJVWE5NUTNoTlJtUnRLM0pYZUZsbmNubGpZMDBLVGpWTk5YUkxPRk5SYmtaelZqbHBUMnRTWTNSSldsQm1lV05qTjAweE1HOWFlbE56Ym5obmVrZDRjWFF5WWpad1FsQmtPVFpTUzBsNGVGaG5RV2N3V1FwdFVGcEpRM1pHYjFOaFlXMXhTMHhyV1ZwcWJGQXliVGxSTlVkSGRqVmlOMWt4YjJGeWRHdDVaRTUzWVcxamRVMU5la2N4WVd4MlozRnFjbmxyVGtWQkNuZG1MMHR4TjJGQ1VFdE9iRU55U2pFcmVrMXpiSGQyWldWNmRFOHpXVGhqYzFaTlpVVklNSHBsWkhkMU1HcFJjbTA1UjBKRE1qRjBRbnB1Y0cxNE9WZ0tTRXRwVW10dFIzSnpOMXBPVEdsSmQyOVhTRkY2V1VReU4yaElTbkpaT0QwS0xTMHRMUzFGVGtRZ1EwVlNWRWxHU1VOQlZFVXRMUzB0TFFvPQogIHRscy5jcnQ6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJXYWtORFFXbzJaMEYzU1VKQlowbFJVWGhPYm5KVU1UUTFRWGxNTlhCWmVYRnlZalpPZWtGT1FtZHJjV2hyYVVjNWR6QkNRVkZ6UmtGRVFWVUtUVkpKZDBWQldVUldVVkZFUlhkc1JHRlhlSEJrVnpCblVUQkZkMGhvWTA1TmFrbDRUV3BCTWsxcVJYbE9hazB4VjJoalRrMXFWWGhOYWtFeFRXcEZlUXBPYWsweFYycEJjVTFUWjNkS1oxbEVWbEZSUkVSQ09IRk1iVkpzV20xR01XSklVWFZoU0ZacFdXMTRiRXhYWkhsalIwMTFXVEpzYzJGWVZuUk1iV3gyQ2sxSlNVSkpha0ZPUW1kcmNXaHJhVWM1ZHpCQ1FWRkZSa0ZCVDBOQlVUaEJUVWxKUWtOblMwTkJVVVZCZW5CMldqVlZhV0pxT1hGR2QwbDRSemQwWVhNS05UaFNaamxLV0hoRUsxcFNOakZLWm1abVdHUTVjVEptVVdKdU1tVjJRVlZKWVRReFpXNVFiekpMU2s1TlRuWk5aR05NUnpBMU5HY3labUY0WW1WeFFncHNSV042VlZkRlJXUldLMmxzV1VScmFGQldRek00YjNsblpFeGhVVlp1TlN0MFlVeExNekJNVkZoek5sSTVOelZIWlROT05HRmlUVGhFVmtaRFZrRlpDbXA0TkRKWlVVOVZVVUZHWVhZMU0ydG1jakpSWVRnNE1HZzRWRkZIWWswNE5UQm1ieXM1TW5sMldHOXBVMVp0YTB4SlJHTTBORTVZYmpOMWNXOWxaazhLYXpOc09UaFdZa3RtVldRMFZUVnRZVGxIV1hGbk4xaHlORFJtUkdOMWIyWnRiVEJRTm5CSWRHdFZNbmhyV0doMFJESTRVbWRFVTBKbmIxRnZObXB1T0FwMGFraFlOMEp4WldsaU9ETXphM1prZFZWWmJ6UldiR1pPY1hkdlFTOUVjRFUzU1U5WFFrWlJhMVpRWkdSQ1lXZENVRmRTVjJKUGQwUkVaRmR2WmpsYUNsaFJTVVJCVVVGQ2J6UkhUazFKUjB0TlFUUkhRVEZWWkVSM1JVSXZkMUZGUVhkSlJtOUVRV1JDWjA1V1NGTlZSVVpxUVZWQ1oyZHlRbWRGUmtKUlkwUUtRVkZaU1V0M1dVSkNVVlZJUVhkSmQwUkJXVVJXVWpCVVFWRklMMEpCU1hkQlJFRm1RbWRPVmtoVFRVVkhSRUZYWjBKVFQwa3ZNblZqVjFGclQzZFFOZ3BFVGtRcmNuSm9jWEkwTDIxTFJFRnhRbWRPVmtoU1JVVkpla0ZvWjJnNGNVeHRVbXhhYlVZeFlraFJkV0ZJVm1sWmJYaHNURmRrZVdOSFRYVlpNbXh6Q21GWVZuUk1iV3gyVFVFd1IwTlRjVWRUU1dJelJGRkZRa04zVlVGQk5FbENRVkZDTmxRME5GaHFNM00zT0hST1ZXeFNSVmxESzJ4VFRrbDRlWEpyY1VZS1NYVnNTQ3M0ZDNCTFkwc3ZjMDVXTVd4cVpWbHZlWEZxUVVVeU5HSk9NREp4Um5WTldYWldNMDlRWmpOaFlteFNRM2x6U0RkcWFtbHpUSFkzT1dVMVNncEtkSE5sZGxnd2FrWTVhbXQyYm01VFduSm9ZbnB0VUc5UU1URkpZWGh2ZWxsTVEwNTRTbEJDVmpGUlRtdFdUa1pRUmxKMk5GZFpUMVI2V0ZOcldtSmxDbXgwU0dWM1RVdEpUMnh5UkdsV1dsYzJiMDR3TkV3M1QwUmtOVFJhZUROWlJYcHpUV2t6ZVZkbFJGcERjbU5aT0ZVdk1uVnRTbGRLYkZCNVdYSjVjMUFLZDFSTmNuTkNiVlkwVDJ0aU5sVnZZekJpVVZJd2R6aHFSbmxMUkdSTU5TOUxWVkphUnpsRVJETjBRMGt4VlVwMWJtSnViM0pwU1VkeVYyUTBjbEZNUlFwd01HMHlTMjQwY1VORVprZzROVzFzU0VaYVluTXhVMWRWWkZRNVdrRm5lbU5zTmt4M1JEUjJTVFpMTTFwNE9IWk1jVE5EVTA1VFp3b3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENnPT0KICB0bHMua2V5OiBMUzB0TFMxQ1JVZEpUaUJTVTBFZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFwTlNVbEZiM2RKUWtGQlMwTkJVVVZCZW5CMldqVlZhV0pxT1hGR2QwbDRSemQwWVhNMU9GSm1PVXBZZUVRcldsSTJNVXBtWm1aWVpEbHhNbVpSWW00eUNtVjJRVlZKWVRReFpXNVFiekpMU2s1TlRuWk5aR05NUnpBMU5HY3labUY0WW1WeFFteEZZM3BWVjBWRlpGWXJhV3haUkd0b1VGWkRNemh2ZVdka1RHRUtVVlp1TlN0MFlVeExNekJNVkZoek5sSTVOelZIWlROT05HRmlUVGhFVmtaRFZrRlphbmcwTWxsUlQxVlJRVVpoZGpVemEyWnlNbEZoT0Rnd2FEaFVVUXBIWWswNE5UQm1ieXM1TW5sMldHOXBVMVp0YTB4SlJHTTBORTVZYmpOMWNXOWxaazlyTTJ3NU9GWmlTMlpWWkRSVk5XMWhPVWRaY1djM1dISTBOR1pFQ21OMWIyWnRiVEJRTm5CSWRHdFZNbmhyV0doMFJESTRVbWRFVTBKbmIxRnZObXB1T0hScVNGZzNRbkZsYVdJNE16TnJkbVIxVlZsdk5GWnNaazV4ZDI4S1FTOUVjRFUzU1U5WFFrWlJhMVpRWkdSQ1lXZENVRmRTVjJKUGQwUkVaRmR2WmpsYVdGRkpSRUZSUVVKQmIwbENRVWgyUm5WQ1NqUnVaVVJsS3pOUGRncFdZWE4wV21sWWRXRmpSMlowWlhSa1oydFFhMlJDY1VWdFdGWXlOamh2TTA5eFlrcG1ibGg1TlVWNU5HUlplV0ZLYmpSWWJuWlJTbEJKTVRNeFNuaG1Da0ZyYjJwNU16ZHNOMHRPWVRaSk0yTlFaekJ6VTNwdmRuQXJSbXBSTUVOek4xWXhja3B4ZFZSeVdXNWxMMnM1Y21aRE1tdE5WSHBOVkhGT1drSnljamdLV0hGQ1IyOUlMMVZxUzFWMmRreGtabGRHYzJ0dWMyTnBhbmQwVmpSRlUwcE9NMGhVS3pKeFIyeERWRTFZUzFOWGRGZE1SVnBTVlhkbk9HUllPR05WYndwcWFIbHVXbWhMV1ZKRmNIQkVlVFpSUlVGMmJURXphR3RXYlRaSVdHNTVSVzh5VTFONlUyUnNObkZvY1RSeVYyWnVjWEZtTkM5VmRXTlNNMm8zWlU5V0NuSm9hMUl3TTBZM01VSm9NMVpQYmtnM1QyUTNORmhpVkhWUldXcG1XVEZaZGtacFZ6bGljbEEyYmpSbWQxcFBiVkJDVm1Jd2JVUklSbnB6YjIxMlJqTUtRbGhKVEcxUFJVTm5XVVZCZW5nemJUaHNUV1J1UkVSUWRVMXlhMWxFVDBsNVFWbGphVXM0UjNOSE5WcFBkWEpFWjFKUk1rZFNUemMzU2t0Mk5GaGxLd3BtYTJwb01HNXJOMUZ0VjFJeFZVWjBUMUl3Y2xGU1l6UmxRMnQxWjJGcVRsSjNjVzl0TVZvelZpOWxXVkJCVlRjeWRHeHdPSFZrTURSNmNURjFkVlJHQ21wcFZFTm5iRVJSTUVWdVRsaERUbGQzZDBjNVlrUkxXVGhpWm05eWVIUnpkRmt6UVhSUFIyaEpUVEJKVWs0d2VtaEpWMmRKVG10RFoxbEZRUzh4T1VJS1RrdHlTMjVxV2s1dldqVjBMM2x6YVVKNWVpOXpkR2xPUnk5ek4zcFRiQzl6V0RKck1pdExVQzlhVVROSlJWQXhNMVpJU0ZaeGJ6Rklia1JNYzIxaEx3cFFNMk4zUlhGRldqYzRMMjQyVUdWdk1sQTJibWRaVDBwVU9EaERLMGRCUVdWS1dsY3lTR3BDTm1kU1ltc3hXblk0YWk5T1FsUkRXWEZZUTNNd1dXazFDalZaUm1Fd1JuTldNbmx4V21kSU1rNW1VR1p2Y2xOVVpsSkZOVE5LYlZKemJtdFlVRXRwVlVObldVVkJjbTVzWVVjM2FUUnpUMHhPYldKWlVsQkthM1FLUjBwT1RscHFaRXhSTUZWNVJtUmxLMkZtV2tWMlJYUk1aVGRpTWxGMFJrVjJPREZXY25GQ1FuTXlWWE4yUzBWd1ExaDJkeTlDZHpkcVlqTnFWalJoUkFwd2RIcHlka012VTNsV0wyZzViVE5UVW10SWQxcHdaR3RsUTJJeFFVVlFTSGxFTldaUVRHZHVjamczT0VkRGIwMDFTMjFMYTB0TWRrSklSVkZ4Y2twSUNtMVpiVmxXVFdaa2JrZDNZMFY1WW10U2VtSndPV05GUTJkWlFURndRV0ZKVkRRck56VXJRWEZ2UzB0MVVrcHphazF5Y1V4RlNqSnFWVkZTWjNSbFZGTUtibGhsZUd0RlpEWnNiRll4S3pWQ04yRnhRV0ZtYVc5dFQwdzRkM1pDUWxRdmJUaHJiWEExWlVaNVpUVmpZbmRRZVVnellUUkplRXBNVlhsTllUSXpkQW8xYmxwaWFHaEpSbGNyUkRSakswZFVNblkzZG5CcFQweEJPVmh3VGxoVlJ6RnJUVVJJVURkalUwaG9lREoxTWt4WlJ5dEtXSGRPWlhvM1UweGFaa1JEQ2pGb2Mwd3lVVXRDWjBKMmFtbzVaMnBSTmtGUmJEWmplWE5zZVZwdlNFaHJNVTlMZFZSb1FXNWtOak5hVVUxT05rcElabk5uVVZGb2JtUlVPWEJtVEVVS1RsSlhSWGRNVGpOSFZYbzJWalZwTVhaUFpqWmlSSFZuTm1oblUzRlZibEp1VGpCRmFYTnVWazR2T0ZZM01WWmhLM2MxWTNvcmFVUXhhbmRHVEhwVU5BcFVVVmhGWjB4NWFWSk1NV2w0VTBwMk5sSlNhVWwzYVd0amJHbGxhRmhSTmxoYU1GUldkVGRoWXpjNWJVbEJhRGRPUlZKTkNpMHRMUzB0UlU1RUlGSlRRU0JRVWtsV1FWUkZJRXRGV1MwdExTMHRDZz09Ci0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tY29uZmlnbWFwLnlhbWwKYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bS1jb25maWcKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCmRhdGE6CgogICMgSWRlbnRpdHkgYWxsb2NhdGlvbiBtb2RlIHNlbGVjdHMgaG93IGlkZW50aXRpZXMgYXJlIHNoYXJlZCBiZXR3ZWVuIGNpbGl1bQogICMgbm9kZXMgYnkgc2V0dGluZyBob3cgdGhleSBhcmUgc3RvcmVkLiBUaGUgb3B0aW9ucyBhcmUgImNyZCIgb3IgImt2c3RvcmUiLgogICMgLSAiY3JkIiBzdG9yZXMgaWRlbnRpdGllcyBpbiBrdWJlcm5ldGVzIGFzIENSRHMgKGN1c3RvbSByZXNvdXJjZSBkZWZpbml0aW9uKS4KICAjICAgVGhlc2UgY2FuIGJlIHF1ZXJpZWQgd2l0aDoKICAjICAgICBrdWJlY3RsIGdldCBjaWxpdW1pZAogICMgLSAia3ZzdG9yZSIgc3RvcmVzIGlkZW50aXRpZXMgaW4gYW4gZXRjZCBrdnN0b3JlLCB0aGF0IGlzCiAgIyAgIGNvbmZpZ3VyZWQgYmVsb3cuIENpbGl1bSB2ZXJzaW9ucyBiZWZvcmUgMS42IHN1cHBvcnRlZCBvbmx5IHRoZSBrdnN0b3JlCiAgIyAgIGJhY2tlbmQuIFVwZ3JhZGVzIGZyb20gdGhlc2Ugb2xkZXIgY2lsaXVtIHZlcnNpb25zIHNob3VsZCBjb250aW51ZSB1c2luZwogICMgICB0aGUga3ZzdG9yZSBieSBjb21tZW50aW5nIG91dCB0aGUgaWRlbnRpdHktYWxsb2NhdGlvbi1tb2RlIGJlbG93LCBvcgogICMgICBzZXR0aW5nIGl0IHRvICJrdnN0b3JlIi4KICBpZGVudGl0eS1hbGxvY2F0aW9uLW1vZGU6IGNyZAogIGNpbGl1bS1lbmRwb2ludC1nYy1pbnRlcnZhbDogIjVtMHMiCiAgbm9kZXMtZ2MtaW50ZXJ2YWw6ICI1bTBzIgogICMgRGlzYWJsZSB0aGUgdXNhZ2Ugb2YgQ2lsaXVtRW5kcG9pbnQgQ1JECiAgZGlzYWJsZS1lbmRwb2ludC1jcmQ6ICJmYWxzZSIKCiAgIyBJZiB5b3Ugd2FudCB0byBydW4gY2lsaXVtIGluIGRlYnVnIG1vZGUgY2hhbmdlIHRoaXMgdmFsdWUgdG8gdHJ1ZQogIGRlYnVnOiAiZmFsc2UiCiAgIyBUaGUgYWdlbnQgY2FuIGJlIHB1dCBpbnRvIHRoZSBmb2xsb3dpbmcgdGhyZWUgcG9saWN5IGVuZm9yY2VtZW50IG1vZGVzCiAgIyBkZWZhdWx0LCBhbHdheXMgYW5kIG5ldmVyLgogICMgaHR0cHM6Ly9kb2NzLmNpbGl1bS5pby9lbi9sYXRlc3QvcG9saWN5L2ludHJvLyNwb2xpY3ktZW5mb3JjZW1lbnQtbW9kZXMKICBlbmFibGUtcG9saWN5OiAiZGVmYXVsdCIKCiAgIyBFbmFibGUgSVB2NCBhZGRyZXNzaW5nLiBJZiBlbmFibGVkLCBhbGwgZW5kcG9pbnRzIGFyZSBhbGxvY2F0ZWQgYW4gSVB2NAogICMgYWRkcmVzcy4KICBlbmFibGUtaXB2NDogInRydWUiCgogICMgRW5hYmxlIElQdjYgYWRkcmVzc2luZy4gSWYgZW5hYmxlZCwgYWxsIGVuZHBvaW50cyBhcmUgYWxsb2NhdGVkIGFuIElQdjYKICAjIGFkZHJlc3MuCiAgZW5hYmxlLWlwdjY6ICJmYWxzZSIKICAjIFVzZXJzIHdobyB3aXNoIHRvIHNwZWNpZnkgdGhlaXIgb3duIGN1c3RvbSBDTkkgY29uZmlndXJhdGlvbiBmaWxlIG11c3Qgc2V0CiAgIyBjdXN0b20tY25pLWNvbmYgdG8gInRydWUiLCBvdGhlcndpc2UgQ2lsaXVtIG1heSBvdmVyd3JpdGUgdGhlIGNvbmZpZ3VyYXRpb24uCiAgY3VzdG9tLWNuaS1jb25mOiAiZmFsc2UiCiAgZW5hYmxlLWJwZi1jbG9jay1wcm9iZTogInRydWUiCiAgIyBJZiB5b3Ugd2FudCBjaWxpdW0gbW9uaXRvciB0byBhZ2dyZWdhdGUgdHJhY2luZyBmb3IgcGFja2V0cywgc2V0IHRoaXMgbGV2ZWwKICAjIHRvICJsb3ciLCAibWVkaXVtIiwgb3IgIm1heGltdW0iLiBUaGUgaGlnaGVyIHRoZSBsZXZlbCwgdGhlIGxlc3MgcGFja2V0cwogICMgdGhhdCB3aWxsIGJlIHNlZW4gaW4gbW9uaXRvciBvdXRwdXQuCiAgbW9uaXRvci1hZ2dyZWdhdGlvbjogbWVkaXVtCgogICMgVGhlIG1vbml0b3IgYWdncmVnYXRpb24gaW50ZXJ2YWwgZ292ZXJucyB0aGUgdHlwaWNhbCB0aW1lIGJldHdlZW4gbW9uaXRvcgogICMgbm90aWZpY2F0aW9uIGV2ZW50cyBmb3IgZWFjaCBhbGxvd2VkIGNvbm5lY3Rpb24uCiAgIwogICMgT25seSBlZmZlY3RpdmUgd2hlbiBtb25pdG9yIGFnZ3JlZ2F0aW9uIGlzIHNldCB0byAibWVkaXVtIiBvciBoaWdoZXIuCiAgbW9uaXRvci1hZ2dyZWdhdGlvbi1pbnRlcnZhbDogNXMKCiAgIyBUaGUgbW9uaXRvciBhZ2dyZWdhdGlvbiBmbGFncyBkZXRlcm1pbmUgd2hpY2ggVENQIGZsYWdzIHdoaWNoLCB1cG9uIHRoZQogICMgZmlyc3Qgb2JzZXJ2YXRpb24sIGNhdXNlIG1vbml0b3Igbm90aWZpY2F0aW9ucyB0byBiZSBnZW5lcmF0ZWQuCiAgIwogICMgT25seSBlZmZlY3RpdmUgd2hlbiBtb25pdG9yIGFnZ3JlZ2F0aW9uIGlzIHNldCB0byAibWVkaXVtIiBvciBoaWdoZXIuCiAgbW9uaXRvci1hZ2dyZWdhdGlvbi1mbGFnczogYWxsCiAgIyBTcGVjaWZpZXMgdGhlIHJhdGlvICgwLjAtMS4wKSBvZiB0b3RhbCBzeXN0ZW0gbWVtb3J5IHRvIHVzZSBmb3IgZHluYW1pYwogICMgc2l6aW5nIG9mIHRoZSBUQ1AgQ1QsIG5vbi1UQ1AgQ1QsIE5BVCBhbmQgcG9saWN5IEJQRiBtYXBzLgogIGJwZi1tYXAtZHluYW1pYy1zaXplLXJhdGlvOiAiMC4wMDI1IgogICMgYnBmLXBvbGljeS1tYXAtbWF4IHNwZWNpZmllcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgZW50cmllcyBpbiBlbmRwb2ludAogICMgcG9saWN5IG1hcCAocGVyIGVuZHBvaW50KQogIGJwZi1wb2xpY3ktbWFwLW1heDogIjE2Mzg0IgogICMgYnBmLWxiLW1hcC1tYXggc3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBlbnRyaWVzIGluIGJwZiBsYiBzZXJ2aWNlLAogICMgYmFja2VuZCBhbmQgYWZmaW5pdHkgbWFwcy4KICBicGYtbGItbWFwLW1heDogIjY1NTM2IgogICMgYnBmLWxiLWJ5cGFzcy1maWItbG9va3VwIGluc3RydWN0cyBDaWxpdW0gdG8gZW5hYmxlIHRoZSBGSUIgbG9va3VwIGJ5cGFzcwogICMgb3B0aW1pemF0aW9uIGZvciBub2RlcG9ydCByZXZlcnNlIE5BVCBoYW5kbGluZy4KICBicGYtbGItZXh0ZXJuYWwtY2x1c3RlcmlwOiAiZmFsc2UiCgogICMgUHJlLWFsbG9jYXRpb24gb2YgbWFwIGVudHJpZXMgYWxsb3dzIHBlci1wYWNrZXQgbGF0ZW5jeSB0byBiZSByZWR1Y2VkLCBhdAogICMgdGhlIGV4cGVuc2Ugb2YgdXAtZnJvbnQgbWVtb3J5IGFsbG9jYXRpb24gZm9yIHRoZSBlbnRyaWVzIGluIHRoZSBtYXBzLiBUaGUKICAjIGRlZmF1bHQgdmFsdWUgYmVsb3cgd2lsbCBtaW5pbWl6ZSBtZW1vcnkgdXNhZ2UgaW4gdGhlIGRlZmF1bHQgaW5zdGFsbGF0aW9uOwogICMgdXNlcnMgd2hvIGFyZSBzZW5zaXRpdmUgdG8gbGF0ZW5jeSBtYXkgY29uc2lkZXIgc2V0dGluZyB0aGlzIHRvICJ0cnVlIi4KICAjCiAgIyBUaGlzIG9wdGlvbiB3YXMgaW50cm9kdWNlZCBpbiBDaWxpdW0gMS40LiBDaWxpdW0gMS4zIGFuZCBlYXJsaWVyIGlnbm9yZQogICMgdGhpcyBvcHRpb24gYW5kIGJlaGF2ZSBhcyB0aG91Z2ggaXQgaXMgc2V0IHRvICJ0cnVlIi4KICAjCiAgIyBJZiB0aGlzIHZhbHVlIGlzIG1vZGlmaWVkLCB0aGVuIGR1cmluZyB0aGUgbmV4dCBDaWxpdW0gc3RhcnR1cCB0aGUgcmVzdG9yZQogICMgb2YgZXhpc3RpbmcgZW5kcG9pbnRzIGFuZCB0cmFja2luZyBvZiBvbmdvaW5nIGNvbm5lY3Rpb25zIG1heSBiZSBkaXNydXB0ZWQuCiAgIyBBcyBhIHJlc3VsdCwgcmVwbHkgcGFja2V0cyBtYXkgYmUgZHJvcHBlZCBhbmQgdGhlIGxvYWQtYmFsYW5jaW5nIGRlY2lzaW9ucwogICMgZm9yIGVzdGFibGlzaGVkIGNvbm5lY3Rpb25zIG1heSBjaGFuZ2UuCiAgIwogICMgSWYgdGhpcyBvcHRpb24gaXMgc2V0IHRvICJmYWxzZSIgZHVyaW5nIGFuIHVwZ3JhZGUgZnJvbSAxLjMgb3IgZWFybGllciB0bwogICMgMS40IG9yIGxhdGVyLCB0aGVuIGl0IG1heSBjYXVzZSBvbmUtdGltZSBkaXNydXB0aW9ucyBkdXJpbmcgdGhlIHVwZ3JhZGUuCiAgcHJlYWxsb2NhdGUtYnBmLW1hcHM6ICJmYWxzZSIKCiAgIyBSZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hpbmcgY29tcGF0aWJsZSBJc3RpbyBzaWRlY2FyIGlzdGlvLXByb3h5CiAgIyBjb250YWluZXIgaW1hZ2UgbmFtZXMKICBzaWRlY2FyLWlzdGlvLXByb3h5LWltYWdlOiAiY2lsaXVtL2lzdGlvX3Byb3h5IgoKICAjIE5hbWUgb2YgdGhlIGNsdXN0ZXIuIE9ubHkgcmVsZXZhbnQgd2hlbiBidWlsZGluZyBhIG1lc2ggb2YgY2x1c3RlcnMuCiAgY2x1c3Rlci1uYW1lOiBkZWZhdWx0CiAgIyBVbmlxdWUgSUQgb2YgdGhlIGNsdXN0ZXIuIE11c3QgYmUgdW5pcXVlIGFjcm9zcyBhbGwgY29ubmV0ZWQgY2x1c3RlcnMgYW5kCiAgIyBpbiB0aGUgcmFuZ2Ugb2YgMSBhbmQgMjU1LiBPbmx5IHJlbGV2YW50IHdoZW4gYnVpbGRpbmcgYSBtZXNoIG9mIGNsdXN0ZXJzLgogIGNsdXN0ZXItaWQ6ICIwIgoKICAjIEVuY2Fwc3VsYXRpb24gbW9kZSBmb3IgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIG5vZGVzCiAgIyBQb3NzaWJsZSB2YWx1ZXM6CiAgIyAgIC0gZGlzYWJsZWQKICAjICAgLSB2eGxhbiAoZGVmYXVsdCkKICAjICAgLSBnZW5ldmUKICB0dW5uZWw6ICJ2eGxhbiIKICAjIEVuYWJsZXMgTDcgcHJveHkgZm9yIEw3IHBvbGljeSBlbmZvcmNlbWVudCBhbmQgdmlzaWJpbGl0eQogIGVuYWJsZS1sNy1wcm94eTogInRydWUiCgogIGVuYWJsZS1pcHY0LW1hc3F1ZXJhZGU6ICJ0cnVlIgogIGVuYWJsZS1pcHY2LW1hc3F1ZXJhZGU6ICJ0cnVlIgoKICBlbmFibGUteHQtc29ja2V0LWZhbGxiYWNrOiAidHJ1ZSIKICBpbnN0YWxsLWlwdGFibGVzLXJ1bGVzOiAidHJ1ZSIKICBpbnN0YWxsLW5vLWNvbm50cmFjay1pcHRhYmxlcy1ydWxlczogImZhbHNlIgoKICBhdXRvLWRpcmVjdC1ub2RlLXJvdXRlczogImZhbHNlIgogIGVuYWJsZS1sb2NhbC1yZWRpcmVjdC1wb2xpY3k6ICJmYWxzZSIKCiAga3ViZS1wcm94eS1yZXBsYWNlbWVudDogImRpc2FibGVkIgogIGJwZi1sYi1zb2NrOiAiZmFsc2UiCiAgZW5hYmxlLWhlYWx0aC1jaGVjay1ub2RlcG9ydDogInRydWUiCiAgbm9kZS1wb3J0LWJpbmQtcHJvdGVjdGlvbjogInRydWUiCiAgZW5hYmxlLWF1dG8tcHJvdGVjdC1ub2RlLXBvcnQtcmFuZ2U6ICJ0cnVlIgogIGVuYWJsZS1zdmMtc291cmNlLXJhbmdlLWNoZWNrOiAidHJ1ZSIKICBlbmFibGUtbDItbmVpZ2gtZGlzY292ZXJ5OiAidHJ1ZSIKICBhcnBpbmctcmVmcmVzaC1wZXJpb2Q6ICIzMHMiCiAgZW5hYmxlLWVuZHBvaW50LWhlYWx0aC1jaGVja2luZzogInRydWUiCiAgZW5hYmxlLWhlYWx0aC1jaGVja2luZzogInRydWUiCiAgZW5hYmxlLXdlbGwta25vd24taWRlbnRpdGllczogImZhbHNlIgogIGVuYWJsZS1yZW1vdGUtbm9kZS1pZGVudGl0eTogInRydWUiCiAgc3luY2hyb25pemUtazhzLW5vZGVzOiAidHJ1ZSIKICBvcGVyYXRvci1hcGktc2VydmUtYWRkcjogIjEyNy4wLjAuMTo5MjM0IgogICMgRW5hYmxlIEh1YmJsZSBnUlBDIHNlcnZpY2UuCiAgZW5hYmxlLWh1YmJsZTogInRydWUiCiAgIyBVTklYIGRvbWFpbiBzb2NrZXQgZm9yIEh1YmJsZSBzZXJ2ZXIgdG8gbGlzdGVuIHRvLgogIGh1YmJsZS1zb2NrZXQtcGF0aDogIi92YXIvcnVuL2NpbGl1bS9odWJibGUuc29jayIKICAjIEFuIGFkZGl0aW9uYWwgYWRkcmVzcyBmb3IgSHViYmxlIHNlcnZlciB0byBsaXN0ZW4gdG8gKGUuZy4gIjo0MjQ0IikuCiAgaHViYmxlLWxpc3Rlbi1hZGRyZXNzOiAiOjQyNDQiCiAgaHViYmxlLWRpc2FibGUtdGxzOiAiZmFsc2UiCiAgaHViYmxlLXRscy1jZXJ0LWZpbGU6IC92YXIvbGliL2NpbGl1bS90bHMvaHViYmxlL3NlcnZlci5jcnQKICBodWJibGUtdGxzLWtleS1maWxlOiAvdmFyL2xpYi9jaWxpdW0vdGxzL2h1YmJsZS9zZXJ2ZXIua2V5CiAgaHViYmxlLXRscy1jbGllbnQtY2EtZmlsZXM6IC92YXIvbGliL2NpbGl1bS90bHMvaHViYmxlL2NsaWVudC1jYS5jcnQKICBpcGFtOiAiY2x1c3Rlci1wb29sIgogIGNsdXN0ZXItcG9vbC1pcHY0LWNpZHI6ICIxMC4wLjAuMC84IgogIGNsdXN0ZXItcG9vbC1pcHY0LW1hc2stc2l6ZTogIjI0IgogIGRpc2FibGUtY25wLXN0YXR1cy11cGRhdGVzOiAidHJ1ZSIKICBlbmFibGUtdnRlcDogImZhbHNlIgogIHZ0ZXAtZW5kcG9pbnQ6ICIiCiAgdnRlcC1jaWRyOiAiIgogIHZ0ZXAtbWFzazogIiIKICB2dGVwLW1hYzogIiIKICBlbmFibGUtYmdwLWNvbnRyb2wtcGxhbmU6ICJmYWxzZSIKICBwcm9jZnM6ICIvaG9zdC9wcm9jIgogIGJwZi1yb290OiAiL3N5cy9mcy9icGYiCiAgY2dyb3VwLXJvb3Q6ICIvcnVuL2NpbGl1bS9jZ3JvdXB2MiIKICBlbmFibGUtazhzLXRlcm1pbmF0aW5nLWVuZHBvaW50OiAidHJ1ZSIKICByZW1vdmUtY2lsaXVtLW5vZGUtdGFpbnRzOiAidHJ1ZSIKICBzZXQtY2lsaXVtLWlzLXVwLWNvbmRpdGlvbjogInRydWUiCiAgdW5tYW5hZ2VkLXBvZC13YXRjaGVyLWludGVydmFsOiAiMTUiCiAgdG9mcWRucy1kbnMtcmVqZWN0LXJlc3BvbnNlLWNvZGU6ICJyZWZ1c2VkIgogIHRvZnFkbnMtZW5hYmxlLWRucy1jb21wcmVzc2lvbjogInRydWUiCiAgdG9mcWRucy1lbmRwb2ludC1tYXgtaXAtcGVyLWhvc3RuYW1lOiAiNTAiCiAgdG9mcWRucy1pZGxlLWNvbm5lY3Rpb24tZ3JhY2UtcGVyaW9kOiAiMHMiCiAgdG9mcWRucy1tYXgtZGVmZXJyZWQtY29ubmVjdGlvbi1kZWxldGVzOiAiMTAwMDAiCiAgdG9mcWRucy1taW4tdHRsOiAiMzYwMCIKICB0b2ZxZG5zLXByb3h5LXJlc3BvbnNlLW1heC1kZWxheTogIjEwMG1zIgogIGFnZW50LW5vdC1yZWFkeS10YWludC1rZXk6ICJub2RlLmNpbGl1bS5pby9hZ2VudC1ub3QtcmVhZHkiCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tYWdlbnQvY2x1c3RlcnJvbGUueWFtbAphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bQpydWxlczoKLSBhcGlHcm91cHM6CiAgLSBuZXR3b3JraW5nLms4cy5pbwogIHJlc291cmNlczoKICAtIG5ldHdvcmtwb2xpY2llcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGRpc2NvdmVyeS5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBlbmRwb2ludHNsaWNlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gbmFtZXNwYWNlcwogIC0gc2VydmljZXMKICAtIHBvZHMKICAtIGVuZHBvaW50cwogIC0gbm9kZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBhcGlleHRlbnNpb25zLms4cy5pbwogIHJlc291cmNlczoKICAtIGN1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgIyBUaGlzIGlzIHVzZWQgd2hlbiB2YWxpZGF0aW5nIHBvbGljaWVzIGluIHByZWZsaWdodC4gVGhpcyB3aWxsIG5lZWQgdG8gc3RheQogICMgdW50aWwgd2UgZmlndXJlIG91dCBob3cgdG8gYXZvaWQgImdldCIgaW5zaWRlIHRoZSBwcmVmbGlnaHQsIGFuZCB0aGVuCiAgIyBzaG91bGQgYmUgcmVtb3ZlZCBpZGVhbGx5LgogIC0gZ2V0Ci0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtYmdwbG9hZGJhbGFuY2VyaXBwb29scwogIC0gY2lsaXVtYmdwcGVlcmluZ3BvbGljaWVzCiAgLSBjaWxpdW1jbHVzdGVyd2lkZWVudm95Y29uZmlncwogIC0gY2lsaXVtY2x1c3RlcndpZGVuZXR3b3JrcG9saWNpZXMKICAtIGNpbGl1bWVncmVzc2dhdGV3YXlwb2xpY2llcwogIC0gY2lsaXVtZWdyZXNzbmF0cG9saWNpZXMKICAtIGNpbGl1bWVuZHBvaW50cwogIC0gY2lsaXVtZW5kcG9pbnRzbGljZXMKICAtIGNpbGl1bWVudm95Y29uZmlncwogIC0gY2lsaXVtaWRlbnRpdGllcwogIC0gY2lsaXVtbG9jYWxyZWRpcmVjdHBvbGljaWVzCiAgLSBjaWxpdW1uZXR3b3JrcG9saWNpZXMKICAtIGNpbGl1bW5vZGVzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bWlkZW50aXRpZXMKICAtIGNpbGl1bWVuZHBvaW50cwogIC0gY2lsaXVtbm9kZXMKICB2ZXJiczoKICAtIGNyZWF0ZQotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogICMgVG8gc3luY2hyb25pemUgZ2FyYmFnZSBjb2xsZWN0aW9uIG9mIHN1Y2ggcmVzb3VyY2VzCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtaWRlbnRpdGllcwogIHZlcmJzOgogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtZW5kcG9pbnRzCiAgdmVyYnM6CiAgLSBkZWxldGUKICAtIGdldAotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bW5vZGVzCiAgLSBjaWxpdW1ub2Rlcy9zdGF0dXMKICB2ZXJiczoKICAtIGdldAogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtbmV0d29ya3BvbGljaWVzL3N0YXR1cwogIC0gY2lsaXVtY2x1c3RlcndpZGVuZXR3b3JrcG9saWNpZXMvc3RhdHVzCiAgLSBjaWxpdW1lbmRwb2ludHMvc3RhdHVzCiAgLSBjaWxpdW1lbmRwb2ludHMKICB2ZXJiczoKICAtIHBhdGNoCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tb3BlcmF0b3IvY2x1c3RlcnJvbGUueWFtbAphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bS1vcGVyYXRvcgpydWxlczoKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAtIHBvZHMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKICAjIHRvIGF1dG9tYXRpY2FsbHkgZGVsZXRlIFtjb3JlfGt1YmVdZG5zIHBvZHMgc28gdGhhdCBhcmUgc3RhcnRpbmcgdG8gYmVpbmcKICAjIG1hbmFnZWQgYnkgQ2lsaXVtCiAgLSBkZWxldGUKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAtIG5vZGVzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogICMgVG8gcmVtb3ZlIG5vZGUgdGFpbnRzCiAgLSBub2RlcwogICMgVG8gc2V0IE5ldHdvcmtVbmF2YWlsYWJsZSBmYWxzZSBvbiBzdGFydHVwCiAgLSBub2Rlcy9zdGF0dXMKICB2ZXJiczoKICAtIHBhdGNoCi0gYXBpR3JvdXBzOgogIC0gZGlzY292ZXJ5Lms4cy5pbwogIHJlc291cmNlczoKICAtIGVuZHBvaW50c2xpY2VzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgIyB0byBwZXJmb3JtIExCIElQIGFsbG9jYXRpb24gZm9yIEJHUAogIC0gc2VydmljZXMvc3RhdHVzCiAgdmVyYnM6CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAjIHRvIGNoZWNrIGFwaXNlcnZlciBjb25uZWN0aXZpdHkKICAtIG5hbWVzcGFjZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAjIHRvIHBlcmZvcm0gdGhlIHRyYW5zbGF0aW9uIG9mIGEgQ05QIHRoYXQgY29udGFpbnMgYFRvR3JvdXBgIHRvIGl0cyBlbmRwb2ludHMKICAtIHNlcnZpY2VzCiAgLSBlbmRwb2ludHMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1uZXR3b3JrcG9saWNpZXMKICAtIGNpbGl1bWNsdXN0ZXJ3aWRlbmV0d29ya3BvbGljaWVzCiAgdmVyYnM6CiAgIyBDcmVhdGUgYXV0by1nZW5lcmF0ZWQgQ05QcyBhbmQgQ0NOUHMgZnJvbSBQb2xpY2llcyB0aGF0IGhhdmUgJ3RvR3JvdXBzJwogIC0gY3JlYXRlCiAgLSB1cGRhdGUKICAtIGRlbGV0ZWNvbGxlY3Rpb24KICAjIFRvIHVwZGF0ZSB0aGUgc3RhdHVzIG9mIHRoZSBDTlBzIGFuZCBDQ05QcwogIC0gcGF0Y2gKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1uZXR3b3JrcG9saWNpZXMvc3RhdHVzCiAgLSBjaWxpdW1jbHVzdGVyd2lkZW5ldHdvcmtwb2xpY2llcy9zdGF0dXMKICB2ZXJiczoKICAjIFVwZGF0ZSB0aGUgYXV0by1nZW5lcmF0ZWQgQ05QcyBhbmQgQ0NOUHMgc3RhdHVzLgogIC0gcGF0Y2gKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bWVuZHBvaW50cwogIC0gY2lsaXVtaWRlbnRpdGllcwogIHZlcmJzOgogICMgVG8gcGVyZm9ybSBnYXJiYWdlIGNvbGxlY3Rpb24gb2Ygc3VjaCByZXNvdXJjZXMKICAtIGRlbGV0ZQogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBjaWxpdW0uaW8KICByZXNvdXJjZXM6CiAgLSBjaWxpdW1pZGVudGl0aWVzCiAgdmVyYnM6CiAgIyBUbyBzeW5jaHJvbml6ZSBnYXJiYWdlIGNvbGxlY3Rpb24gb2Ygc3VjaCByZXNvdXJjZXMKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bW5vZGVzCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAogICAgIyBUbyBwZXJmb3JtIENpbGl1bU5vZGUgZ2FyYmFnZSBjb2xsZWN0b3IKICAtIGRlbGV0ZQotIGFwaUdyb3VwczoKICAtIGNpbGl1bS5pbwogIHJlc291cmNlczoKICAtIGNpbGl1bW5vZGVzL3N0YXR1cwogIHZlcmJzOgogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gY2lsaXVtLmlvCiAgcmVzb3VyY2VzOgogIC0gY2lsaXVtZW5kcG9pbnRzbGljZXMKICAtIGNpbGl1bWVudm95Y29uZmlncwogIHZlcmJzOgogIC0gY3JlYXRlCiAgLSB1cGRhdGUKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGRlbGV0ZQotIGFwaUdyb3VwczoKICAtIGFwaWV4dGVuc2lvbnMuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucwogIHZlcmJzOgogIC0gY3JlYXRlCiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gYXBpZXh0ZW5zaW9ucy5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBjdXN0b21yZXNvdXJjZWRlZmluaXRpb25zCiAgdmVyYnM6CiAgLSB1cGRhdGUKICByZXNvdXJjZU5hbWVzOgogIC0gY2lsaXVtYmdwbG9hZGJhbGFuY2VyaXBwb29scy5jaWxpdW0uaW8KICAtIGNpbGl1bWJncHBlZXJpbmdwb2xpY2llcy5jaWxpdW0uaW8KICAtIGNpbGl1bWNsdXN0ZXJ3aWRlZW52b3ljb25maWdzLmNpbGl1bS5pbwogIC0gY2lsaXVtY2x1c3RlcndpZGVuZXR3b3JrcG9saWNpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1lZ3Jlc3NnYXRld2F5cG9saWNpZXMuY2lsaXVtLmlvCiAgLSBjaWxpdW1lZ3Jlc3NuYXRwb2xpY2llcy5jaWxpdW0uaW8KICAtIGNpbGl1bWVuZHBvaW50cy5jaWxpdW0uaW8KICAtIGNpbGl1bWVuZHBvaW50c2xpY2VzLmNpbGl1bS5pbwogIC0gY2lsaXVtZW52b3ljb25maWdzLmNpbGl1bS5pbwogIC0gY2lsaXVtZXh0ZXJuYWx3b3JrbG9hZHMuY2lsaXVtLmlvCiAgLSBjaWxpdW1pZGVudGl0aWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtbG9jYWxyZWRpcmVjdHBvbGljaWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtbmV0d29ya3BvbGljaWVzLmNpbGl1bS5pbwogIC0gY2lsaXVtbm9kZXMuY2lsaXVtLmlvCiMgRm9yIGNpbGl1bS1vcGVyYXRvciBydW5uaW5nIGluIEhBIG1vZGUuCiMKIyBDaWxpdW0gb3BlcmF0b3IgcnVubmluZyBpbiBIQSBtb2RlIHJlcXVpcmVzIHRoZSB1c2Ugb2YgUmVzb3VyY2VMb2NrIGZvciBMZWFkZXIgRWxlY3Rpb24KIyBiZXR3ZWVuIG11bHRpcGxlIHJ1bm5pbmcgaW5zdGFuY2VzLgojIFRoZSBwcmVmZXJyZWQgd2F5IG9mIGRvaW5nIHRoaXMgaXMgdG8gdXNlIExlYXNlc1Jlc291cmNlTG9jayBhcyBlZGl0cyB0byBMZWFzZXMgYXJlIGxlc3MKIyBjb21tb24gYW5kIGZld2VyIG9iamVjdHMgaW4gdGhlIGNsdXN0ZXIgd2F0Y2ggImFsbCBMZWFzZXMiLgotIGFwaUdyb3VwczoKICAtIGNvb3JkaW5hdGlvbi5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBsZWFzZXMKICB2ZXJiczoKICAtIGNyZWF0ZQogIC0gZ2V0CiAgLSB1cGRhdGUKLS0tCiMgU291cmNlOiBjaWxpdW0vdGVtcGxhdGVzL2NpbGl1bS1hZ2VudC9jbHVzdGVycm9sZWJpbmRpbmcueWFtbAphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogY2lsaXVtCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogImNpbGl1bSIKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCi0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tb3BlcmF0b3IvY2x1c3RlcnJvbGViaW5kaW5nLnlhbWwKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGNpbGl1bS1vcGVyYXRvcgpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6ICJjaWxpdW0tb3BlcmF0b3IiCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvaHViYmxlL3BlZXItc2VydmljZS55YW1sCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZTogaHViYmxlLXBlZXIKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbGFiZWxzOgogICAgazhzLWFwcDogY2lsaXVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBrOHMtYXBwOiBjaWxpdW0KICBwb3J0czoKICAtIG5hbWU6IHBlZXItc2VydmljZQogICAgcG9ydDogNDQzCiAgICBwcm90b2NvbDogVENQCiAgICB0YXJnZXRQb3J0OiA0MjQ0CiAgaW50ZXJuYWxUcmFmZmljUG9saWN5OiBMb2NhbAotLS0KIyBTb3VyY2U6IGNpbGl1bS90ZW1wbGF0ZXMvY2lsaXVtLWFnZW50L2RhZW1vbnNldC55YW1sCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGFlbW9uU2V0Cm1ldGFkYXRhOgogIG5hbWU6IGNpbGl1bQogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBsYWJlbHM6CiAgICBrOHMtYXBwOiBjaWxpdW0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBrOHMtYXBwOiBjaWxpdW0KICB1cGRhdGVTdHJhdGVneToKICAgIHJvbGxpbmdVcGRhdGU6CiAgICAgIG1heFVuYXZhaWxhYmxlOiAyCiAgICB0eXBlOiBSb2xsaW5nVXBkYXRlCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgIyBTZXQgYXBwIEFwcEFybW9yJ3MgcHJvZmlsZSB0byAidW5jb25maW5lZCIuIFRoZSB2YWx1ZSBvZiB0aGlzIGFubm90YXRpb24KICAgICAgICAjIGNhbiBiZSBtb2RpZmllZCBhcyBsb25nIHVzZXJzIGtub3cgd2hpY2ggcHJvZmlsZXMgdGhleSBoYXZlIGF2YWlsYWJsZQogICAgICAgICMgaW4gQXBwQXJtb3IuCiAgICAgICAgY29udGFpbmVyLmFwcGFybW9yLnNlY3VyaXR5LmJldGEua3ViZXJuZXRlcy5pby9jaWxpdW0tYWdlbnQ6ICJ1bmNvbmZpbmVkIgogICAgICAgIGNvbnRhaW5lci5hcHBhcm1vci5zZWN1cml0eS5iZXRhLmt1YmVybmV0ZXMuaW8vY2xlYW4tY2lsaXVtLXN0YXRlOiAidW5jb25maW5lZCIKICAgICAgICBjb250YWluZXIuYXBwYXJtb3Iuc2VjdXJpdHkuYmV0YS5rdWJlcm5ldGVzLmlvL21vdW50LWNncm91cDogInVuY29uZmluZWQiCiAgICAgICAgY29udGFpbmVyLmFwcGFybW9yLnNlY3VyaXR5LmJldGEua3ViZXJuZXRlcy5pby9hcHBseS1zeXNjdGwtb3ZlcndyaXRlczogInVuY29uZmluZWQiCiAgICAgIGxhYmVsczoKICAgICAgICBrOHMtYXBwOiBjaWxpdW0KICAgIHNwZWM6CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogY2lsaXVtLWFnZW50CiAgICAgICAgaW1hZ2U6ICJxdWF5LmlvL2NpbGl1bS9jaWxpdW06djEuMTIuNEBzaGEyNTY6NGIwNzRmY2ZiYTkzMjVjMThlOTc1NjllZDE5ODg0NjQzMDlhNWViZjY0YmJjNzliZWM2ZjNkNThjYWZjYjhjZiIKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSBjaWxpdW0tYWdlbnQKICAgICAgICBhcmdzOgogICAgICAgIC0gLS1jb25maWctZGlyPS90bXAvY2lsaXVtL2NvbmZpZy1tYXAKICAgICAgICBzdGFydHVwUHJvYmU6CiAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICBob3N0OiAiMTI3LjAuMC4xIgogICAgICAgICAgICBwYXRoOiAvaGVhbHRoegogICAgICAgICAgICBwb3J0OiA5ODc5CiAgICAgICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgICAgICBodHRwSGVhZGVyczoKICAgICAgICAgICAgLSBuYW1lOiAiYnJpZWYiCiAgICAgICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgICAgZmFpbHVyZVRocmVzaG9sZDogMTA1CiAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAyCiAgICAgICAgICBzdWNjZXNzVGhyZXNob2xkOiAxCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIGhvc3Q6ICIxMjcuMC4wLjEiCiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDk4NzkKICAgICAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgICAgIGh0dHBIZWFkZXJzOgogICAgICAgICAgICAtIG5hbWU6ICJicmllZiIKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAzMAogICAgICAgICAgc3VjY2Vzc1RocmVzaG9sZDogMQogICAgICAgICAgZmFpbHVyZVRocmVzaG9sZDogMTAKICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiA1CiAgICAgICAgcmVhZGluZXNzUHJvYmU6CiAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICBob3N0OiAiMTI3LjAuMC4xIgogICAgICAgICAgICBwYXRoOiAvaGVhbHRoegogICAgICAgICAgICBwb3J0OiA5ODc5CiAgICAgICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgICAgICBodHRwSGVhZGVyczoKICAgICAgICAgICAgLSBuYW1lOiAiYnJpZWYiCiAgICAgICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgICAgcGVyaW9kU2Vjb25kczogMzAKICAgICAgICAgIHN1Y2Nlc3NUaHJlc2hvbGQ6IDEKICAgICAgICAgIGZhaWx1cmVUaHJlc2hvbGQ6IDMKICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiA1CiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogSzhTX05PREVfTkFNRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgIGZpZWxkUGF0aDogc3BlYy5ub2RlTmFtZQogICAgICAgIC0gbmFtZTogQ0lMSVVNX0s4U19OQU1FU1BBQ0UKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgYXBpVmVyc2lvbjogdjEKICAgICAgICAgICAgICBmaWVsZFBhdGg6IG1ldGFkYXRhLm5hbWVzcGFjZQogICAgICAgIC0gbmFtZTogQ0lMSVVNX0NMVVNURVJNRVNIX0NPTkZJRwogICAgICAgICAgdmFsdWU6IC92YXIvbGliL2NpbGl1bS9jbHVzdGVybWVzaC8KICAgICAgICAtIG5hbWU6IENJTElVTV9DTklfQ0hBSU5JTkdfTU9ERQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgbmFtZTogY2lsaXVtLWNvbmZpZwogICAgICAgICAgICAgIGtleTogY25pLWNoYWluaW5nLW1vZGUKICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgIC0gbmFtZTogQ0lMSVVNX0NVU1RPTV9DTklfQ09ORgogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgbmFtZTogY2lsaXVtLWNvbmZpZwogICAgICAgICAgICAgIGtleTogY3VzdG9tLWNuaS1jb25mCiAgICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9IT1NUCiAgICAgICAgICB2YWx1ZTogIjE3Mi4xOC4yLjI1MiIKICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9QT1JUCiAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgbGlmZWN5Y2xlOgogICAgICAgICAgcG9zdFN0YXJ0OgogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgLSAiL2NuaS1pbnN0YWxsLnNoIgogICAgICAgICAgICAgIC0gIi0tZW5hYmxlLWRlYnVnPWZhbHNlIgogICAgICAgICAgICAgIC0gIi0tY25pLWV4Y2x1c2l2ZT10cnVlIgogICAgICAgICAgICAgIC0gIi0tbG9nLWZpbGU9L3Zhci9ydW4vY2lsaXVtL2NpbGl1bS1jbmkubG9nIgogICAgICAgICAgcHJlU3RvcDoKICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgIC0gL2NuaS11bmluc3RhbGwuc2gKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBzZUxpbnV4T3B0aW9uczoKICAgICAgICAgICAgbGV2ZWw6ICdzMCcKICAgICAgICAgICAgIyBSdW5uaW5nIHdpdGggc3BjX3Qgc2luY2Ugd2UgaGF2ZSByZW1vdmVkIHRoZSBwcml2aWxlZ2VkIG1vZGUuCiAgICAgICAgICAgICMgVXNlcnMgY2FuIGNoYW5nZSBpdCB0byBhIGRpZmZlcmVudCB0eXBlIGFzIGxvbmcgYXMgdGhleSBoYXZlIHRoZQogICAgICAgICAgICAjIHR5cGUgYXZhaWxhYmxlIG9uIHRoZSBzeXN0ZW0uCiAgICAgICAgICAgIHR5cGU6ICdzcGNfdCcKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICMgVXNlIHRvIHNldCBzb2NrZXQgcGVybWlzc2lvbgogICAgICAgICAgICAgIC0gQ0hPV04KICAgICAgICAgICAgICAjIFVzZWQgdG8gdGVybWluYXRlIGVudm95IGNoaWxkIHByb2Nlc3MKICAgICAgICAgICAgICAtIEtJTEwKICAgICAgICAgICAgICAjIFVzZWQgc2luY2UgY2lsaXVtIG1vZGlmaWVzIHJvdXRpbmcgdGFibGVzLCBldGMuLi4KICAgICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgICAgICMgVXNlZCBzaW5jZSBjaWxpdW0gY3JlYXRlcyByYXcgc29ja2V0cywgZXRjLi4uCiAgICAgICAgICAgICAgLSBORVRfUkFXCiAgICAgICAgICAgICAgIyBVc2VkIHNpbmNlIGNpbGl1bSBtb25pdG9yIHVzZXMgbW1hcAogICAgICAgICAgICAgIC0gSVBDX0xPQ0sKICAgICAgICAgICAgICAjIFVzZWQgaW4gaXB0YWJsZXMuIENvbnNpZGVyIHJlbW92aW5nIG9uY2Ugd2UgYXJlIGlwdGFibGVzLWZyZWUKICAgICAgICAgICAgICAtIFNZU19NT0RVTEUKICAgICAgICAgICAgICAjIFdlIG5lZWQgaXQgZm9yIG5vdyBidXQgbWlnaHQgbm90IG5lZWQgaXQgZm9yID49IDUuMTEgc3BlY2lhbGx5CiAgICAgICAgICAgICAgIyBmb3IgdGhlICdTWVNfUkVTT1VSQ0UnLgogICAgICAgICAgICAgICMgSW4gPj0gNS44IHRoZXJlJ3MgYWxyZWFkeSBCUEYgYW5kIFBFUk1PTiBjYXBhYmlsaXRpZXMKICAgICAgICAgICAgICAtIFNZU19BRE1JTgogICAgICAgICAgICAgICMgQ291bGQgYmUgYW4gYWx0ZXJuYXRpdmUgZm9yIHRoZSBTWVNfQURNSU4gZm9yIHRoZSBSTElNSVRfTlBST0MKICAgICAgICAgICAgICAtIFNZU19SRVNPVVJDRQogICAgICAgICAgICAgICMgQm90aCBQRVJGTU9OIGFuZCBCUEYgcmVxdWlyZXMga2VybmVsIDUuOCwgY29udGFpbmVyIHJ1bnRpbWUKICAgICAgICAgICAgICAjIGNyaS1vID49IHYxLjIyLjAgb3IgY29udGFpbmVyZCA+PSB2MS41LjAuCiAgICAgICAgICAgICAgIyBJZiBhdmFpbGFibGUsIFNZU19BRE1JTiBjYW4gYmUgcmVtb3ZlZC4KICAgICAgICAgICAgICAjLSBQRVJGTU9OCiAgICAgICAgICAgICAgIy0gQlBGCiAgICAgICAgICAgICAgLSBEQUNfT1ZFUlJJREUKICAgICAgICAgICAgICAtIEZPV05FUgogICAgICAgICAgICAgIC0gU0VUR0lECiAgICAgICAgICAgICAgLSBTRVRVSUQKICAgICAgICAgICAgZHJvcDoKICAgICAgICAgICAgICAtIEFMTAogICAgICAgIHRlcm1pbmF0aW9uTWVzc2FnZVBvbGljeTogRmFsbGJhY2tUb0xvZ3NPbkVycm9yCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICMgVW5wcml2aWxlZ2VkIGNvbnRhaW5lcnMgbmVlZCB0byBtb3VudCAvcHJvYy9zeXMvbmV0IGZyb20gdGhlIGhvc3QKICAgICAgICAjIHRvIGhhdmUgd3JpdGUgYWNjZXNzCiAgICAgICAgLSBtb3VudFBhdGg6IC9ob3N0L3Byb2Mvc3lzL25ldAogICAgICAgICAgbmFtZTogaG9zdC1wcm9jLXN5cy1uZXQKICAgICAgICAjIFVucHJpdmlsZWdlZCBjb250YWluZXJzIG5lZWQgdG8gbW91bnQgL3Byb2Mvc3lzL2tlcm5lbCBmcm9tIHRoZSBob3N0CiAgICAgICAgIyB0byBoYXZlIHdyaXRlIGFjY2VzcwogICAgICAgIC0gbW91bnRQYXRoOiAvaG9zdC9wcm9jL3N5cy9rZXJuZWwKICAgICAgICAgIG5hbWU6IGhvc3QtcHJvYy1zeXMta2VybmVsCiAgICAgICAgLSBuYW1lOiBicGYtbWFwcwogICAgICAgICAgbW91bnRQYXRoOiAvc3lzL2ZzL2JwZgogICAgICAgICAgIyBVbnByaXZpbGVnZWQgY29udGFpbmVycyBjYW4ndCBzZXQgbW91bnQgcHJvcGFnYXRpb24gdG8gYmlkaXJlY3Rpb25hbAogICAgICAgICAgIyBpbiB0aGlzIGNhc2Ugd2Ugd2lsbCBtb3VudCB0aGUgYnBmIGZzIGZyb20gYW4gaW5pdCBjb250YWluZXIgdGhhdAogICAgICAgICAgIyBpcyBwcml2aWxlZ2VkIGFuZCBzZXQgdGhlIG1vdW50IHByb3BhZ2F0aW9uIGZyb20gaG9zdCB0byBjb250YWluZXIKICAgICAgICAgICMgaW4gQ2lsaXVtLgogICAgICAgICAgbW91bnRQcm9wYWdhdGlvbjogSG9zdFRvQ29udGFpbmVyCiAgICAgICAgLSBuYW1lOiBjaWxpdW0tcnVuCiAgICAgICAgICBtb3VudFBhdGg6IC92YXIvcnVuL2NpbGl1bQogICAgICAgIC0gbmFtZTogY25pLXBhdGgKICAgICAgICAgIG1vdW50UGF0aDogL2hvc3Qvb3B0L2NuaS9iaW4KICAgICAgICAtIG5hbWU6IGV0Yy1jbmktbmV0ZAogICAgICAgICAgbW91bnRQYXRoOiAvaG9zdC9ldGMvY25pL25ldC5kCiAgICAgICAgLSBuYW1lOiBjbHVzdGVybWVzaC1zZWNyZXRzCiAgICAgICAgICBtb3VudFBhdGg6IC92YXIvbGliL2NpbGl1bS9jbHVzdGVybWVzaAogICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgICAtIG5hbWU6IGNpbGl1bS1jb25maWctcGF0aAogICAgICAgICAgbW91bnRQYXRoOiAvdG1wL2NpbGl1bS9jb25maWctbWFwCiAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgICAgIyBOZWVkZWQgdG8gYmUgYWJsZSB0byBsb2FkIGtlcm5lbCBtb2R1bGVzCiAgICAgICAgLSBuYW1lOiBsaWItbW9kdWxlcwogICAgICAgICAgbW91bnRQYXRoOiAvbGliL21vZHVsZXMKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgLSBuYW1lOiB4dGFibGVzLWxvY2sKICAgICAgICAgIG1vdW50UGF0aDogL3J1bi94dGFibGVzLmxvY2sKICAgICAgICAtIG5hbWU6IGh1YmJsZS10bHMKICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9saWIvY2lsaXVtL3Rscy9odWJibGUKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgIGluaXRDb250YWluZXJzOgogICAgICAjIFJlcXVpcmVkIHRvIG1vdW50IGNncm91cDIgZmlsZXN5c3RlbSBvbiB0aGUgdW5kZXJseWluZyBLdWJlcm5ldGVzIG5vZGUuCiAgICAgICMgV2UgdXNlIG5zZW50ZXIgY29tbWFuZCB3aXRoIGhvc3QncyBjZ3JvdXAgYW5kIG1vdW50IG5hbWVzcGFjZXMgZW5hYmxlZC4KICAgICAgLSBuYW1lOiBtb3VudC1jZ3JvdXAKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL2NpbGl1bTp2MS4xMi40QHNoYTI1Njo0YjA3NGZjZmJhOTMyNWMxOGU5NzU2OWVkMTk4ODQ2NDMwOWE1ZWJmNjRiYmM3OWJlYzZmM2Q1OGNhZmNiOGNmIgogICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogQ0dST1VQX1JPT1QKICAgICAgICAgIHZhbHVlOiAvcnVuL2NpbGl1bS9jZ3JvdXB2MgogICAgICAgIC0gbmFtZTogQklOX1BBVEgKICAgICAgICAgIHZhbHVlOiAvb3B0L2NuaS9iaW4KICAgICAgICBjb21tYW5kOgogICAgICAgIC0gc2gKICAgICAgICAtIC1lYwogICAgICAgICMgVGhlIHN0YXRpY2FsbHkgbGlua2VkIEdvIHByb2dyYW0gYmluYXJ5IGlzIGludm9rZWQgdG8gYXZvaWQgYW55CiAgICAgICAgIyBkZXBlbmRlbmN5IG9uIHV0aWxpdGllcyBsaWtlIHNoIGFuZCBtb3VudCB0aGF0IGNhbiBiZSBtaXNzaW5nIG9uIGNlcnRhaW4KICAgICAgICAjIGRpc3Ryb3MgaW5zdGFsbGVkIG9uIHRoZSB1bmRlcmx5aW5nIGhvc3QuIENvcHkgdGhlIGJpbmFyeSB0byB0aGUKICAgICAgICAjIHNhbWUgZGlyZWN0b3J5IHdoZXJlIHdlIGluc3RhbGwgY2lsaXVtIGNuaSBwbHVnaW4gc28gdGhhdCBleGVjIHBlcm1pc3Npb25zCiAgICAgICAgIyBhcmUgYXZhaWxhYmxlLgogICAgICAgIC0gfAogICAgICAgICAgY3AgL3Vzci9iaW4vY2lsaXVtLW1vdW50IC9ob3N0YmluL2NpbGl1bS1tb3VudDsKICAgICAgICAgIG5zZW50ZXIgLS1jZ3JvdXA9L2hvc3Rwcm9jLzEvbnMvY2dyb3VwIC0tbW91bnQ9L2hvc3Rwcm9jLzEvbnMvbW50ICIke0JJTl9QQVRIfS9jaWxpdW0tbW91bnQiICRDR1JPVVBfUk9PVDsKICAgICAgICAgIHJtIC9ob3N0YmluL2NpbGl1bS1tb3VudAogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGhvc3Rwcm9jCiAgICAgICAgICBtb3VudFBhdGg6IC9ob3N0cHJvYwogICAgICAgIC0gbmFtZTogY25pLXBhdGgKICAgICAgICAgIG1vdW50UGF0aDogL2hvc3RiaW4KICAgICAgICB0ZXJtaW5hdGlvbk1lc3NhZ2VQb2xpY3k6IEZhbGxiYWNrVG9Mb2dzT25FcnJvcgogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIHNlTGludXhPcHRpb25zOgogICAgICAgICAgICBsZXZlbDogJ3MwJwogICAgICAgICAgICAjIFJ1bm5pbmcgd2l0aCBzcGNfdCBzaW5jZSB3ZSBoYXZlIHJlbW92ZWQgdGhlIHByaXZpbGVnZWQgbW9kZS4KICAgICAgICAgICAgIyBVc2VycyBjYW4gY2hhbmdlIGl0IHRvIGEgZGlmZmVyZW50IHR5cGUgYXMgbG9uZyBhcyB0aGV5IGhhdmUgdGhlCiAgICAgICAgICAgICMgdHlwZSBhdmFpbGFibGUgb24gdGhlIHN5c3RlbS4KICAgICAgICAgICAgdHlwZTogJ3NwY190JwogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBkcm9wOgogICAgICAgICAgICAgIC0gQUxMCiAgICAgICAgICAgIGFkZDoKICAgICAgICAgICAgICAjIE9ubHkgdXNlZCBmb3IgJ21vdW50JyBjZ3JvdXAKICAgICAgICAgICAgICAtIFNZU19BRE1JTgogICAgICAgICAgICAgICMgVXNlZCBmb3IgbnNlbnRlcgogICAgICAgICAgICAgIC0gU1lTX0NIUk9PVAogICAgICAgICAgICAgIC0gU1lTX1BUUkFDRQogICAgICAtIG5hbWU6IGFwcGx5LXN5c2N0bC1vdmVyd3JpdGVzCiAgICAgICAgaW1hZ2U6ICJxdWF5LmlvL2NpbGl1bS9jaWxpdW06djEuMTIuNEBzaGEyNTY6NGIwNzRmY2ZiYTkzMjVjMThlOTc1NjllZDE5ODg0NjQzMDlhNWViZjY0YmJjNzliZWM2ZjNkNThjYWZjYjhjZiIKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IEJJTl9QQVRICiAgICAgICAgICB2YWx1ZTogL29wdC9jbmkvYmluCiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIHNoCiAgICAgICAgLSAtZWMKICAgICAgICAjIFRoZSBzdGF0aWNhbGx5IGxpbmtlZCBHbyBwcm9ncmFtIGJpbmFyeSBpcyBpbnZva2VkIHRvIGF2b2lkIGFueQogICAgICAgICMgZGVwZW5kZW5jeSBvbiB1dGlsaXRpZXMgbGlrZSBzaCB0aGF0IGNhbiBiZSBtaXNzaW5nIG9uIGNlcnRhaW4KICAgICAgICAjIGRpc3Ryb3MgaW5zdGFsbGVkIG9uIHRoZSB1bmRlcmx5aW5nIGhvc3QuIENvcHkgdGhlIGJpbmFyeSB0byB0aGUKICAgICAgICAjIHNhbWUgZGlyZWN0b3J5IHdoZXJlIHdlIGluc3RhbGwgY2lsaXVtIGNuaSBwbHVnaW4gc28gdGhhdCBleGVjIHBlcm1pc3Npb25zCiAgICAgICAgIyBhcmUgYXZhaWxhYmxlLgogICAgICAgIC0gfAogICAgICAgICAgY3AgL3Vzci9iaW4vY2lsaXVtLXN5c2N0bGZpeCAvaG9zdGJpbi9jaWxpdW0tc3lzY3RsZml4OwogICAgICAgICAgbnNlbnRlciAtLW1vdW50PS9ob3N0cHJvYy8xL25zL21udCAiJHtCSU5fUEFUSH0vY2lsaXVtLXN5c2N0bGZpeCI7CiAgICAgICAgICBybSAvaG9zdGJpbi9jaWxpdW0tc3lzY3RsZml4CiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogaG9zdHByb2MKICAgICAgICAgIG1vdW50UGF0aDogL2hvc3Rwcm9jCiAgICAgICAgLSBuYW1lOiBjbmktcGF0aAogICAgICAgICAgbW91bnRQYXRoOiAvaG9zdGJpbgogICAgICAgIHRlcm1pbmF0aW9uTWVzc2FnZVBvbGljeTogRmFsbGJhY2tUb0xvZ3NPbkVycm9yCiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgc2VMaW51eE9wdGlvbnM6CiAgICAgICAgICAgIGxldmVsOiAnczAnCiAgICAgICAgICAgICMgUnVubmluZyB3aXRoIHNwY190IHNpbmNlIHdlIGhhdmUgcmVtb3ZlZCB0aGUgcHJpdmlsZWdlZCBtb2RlLgogICAgICAgICAgICAjIFVzZXJzIGNhbiBjaGFuZ2UgaXQgdG8gYSBkaWZmZXJlbnQgdHlwZSBhcyBsb25nIGFzIHRoZXkgaGF2ZSB0aGUKICAgICAgICAgICAgIyB0eXBlIGF2YWlsYWJsZSBvbiB0aGUgc3lzdGVtLgogICAgICAgICAgICB0eXBlOiAnc3BjX3QnCiAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgIGRyb3A6CiAgICAgICAgICAgICAgLSBBTEwKICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICMgUmVxdWlyZWQgaW4gb3JkZXIgdG8gYWNjZXNzIGhvc3QncyAvZXRjL3N5c2N0bC5kIGRpcgogICAgICAgICAgICAgIC0gU1lTX0FETUlOCiAgICAgICAgICAgICAgIyBVc2VkIGZvciBuc2VudGVyCiAgICAgICAgICAgICAgLSBTWVNfQ0hST09UCiAgICAgICAgICAgICAgLSBTWVNfUFRSQUNFCiAgICAgICMgTW91bnQgdGhlIGJwZiBmcyBpZiBpdCBpcyBub3QgbW91bnRlZC4gV2Ugd2lsbCBwZXJmb3JtIHRoaXMgdGFzawogICAgICAjIGZyb20gYSBwcml2aWxlZ2VkIGNvbnRhaW5lciBiZWNhdXNlIHRoZSBtb3VudCBwcm9wYWdhdGlvbiBiaWRpcmVjdGlvbmFsCiAgICAgICMgb25seSB3b3JrcyBmcm9tIHByaXZpbGVnZWQgY29udGFpbmVycy4KICAgICAgLSBuYW1lOiBtb3VudC1icGYtZnMKICAgICAgICBpbWFnZTogInF1YXkuaW8vY2lsaXVtL2NpbGl1bTp2MS4xMi40QHNoYTI1Njo0YjA3NGZjZmJhOTMyNWMxOGU5NzU2OWVkMTk4ODQ2NDMwOWE1ZWJmNjRiYmM3OWJlYzZmM2Q1OGNhZmNiOGNmIgogICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgYXJnczoKICAgICAgICAtICdtb3VudCB8IGdyZXAgIi9zeXMvZnMvYnBmIHR5cGUgYnBmIiB8fCBtb3VudCAtdCBicGYgYnBmIC9zeXMvZnMvYnBmJwogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSAvYmluL2Jhc2gKICAgICAgICAtIC1jCiAgICAgICAgLSAtLQogICAgICAgIHRlcm1pbmF0aW9uTWVzc2FnZVBvbGljeTogRmFsbGJhY2tUb0xvZ3NPbkVycm9yCiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGJwZi1tYXBzCiAgICAgICAgICBtb3VudFBhdGg6IC9zeXMvZnMvYnBmCiAgICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBCaWRpcmVjdGlvbmFsCiAgICAgIC0gbmFtZTogY2xlYW4tY2lsaXVtLXN0YXRlCiAgICAgICAgaW1hZ2U6ICJxdWF5LmlvL2NpbGl1bS9jaWxpdW06djEuMTIuNEBzaGEyNTY6NGIwNzRmY2ZiYTkzMjVjMThlOTc1NjllZDE5ODg0NjQzMDlhNWViZjY0YmJjNzliZWM2ZjNkNThjYWZjYjhjZiIKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSAvaW5pdC1jb250YWluZXIuc2gKICAgICAgICBlbnY6CiAgICAgICAgICAtIG5hbWU6IENJTElVTV9BTExfU1RBVEUKICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IGNpbGl1bS1jb25maWcKICAgICAgICAgICAgICAgIGtleTogY2xlYW4tY2lsaXVtLXN0YXRlCiAgICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgICAgLSBuYW1lOiBDSUxJVU1fQlBGX1NUQVRFCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgICAgICAgICAgICBrZXk6IGNsZWFuLWNpbGl1bS1icGYtc3RhdGUKICAgICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfU0VSVklDRV9IT1NUCiAgICAgICAgICAgIHZhbHVlOiAiMTcyLjE4LjIuMjUyIgogICAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX1NFUlZJQ0VfUE9SVAogICAgICAgICAgICB2YWx1ZTogIjY0NDMiCiAgICAgICAgdGVybWluYXRpb25NZXNzYWdlUG9saWN5OiBGYWxsYmFja1RvTG9nc09uRXJyb3IKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBzZUxpbnV4T3B0aW9uczoKICAgICAgICAgICAgbGV2ZWw6ICdzMCcKICAgICAgICAgICAgIyBSdW5uaW5nIHdpdGggc3BjX3Qgc2luY2Ugd2UgaGF2ZSByZW1vdmVkIHRoZSBwcml2aWxlZ2VkIG1vZGUuCiAgICAgICAgICAgICMgVXNlcnMgY2FuIGNoYW5nZSBpdCB0byBhIGRpZmZlcmVudCB0eXBlIGFzIGxvbmcgYXMgdGhleSBoYXZlIHRoZQogICAgICAgICAgICAjIHR5cGUgYXZhaWxhYmxlIG9uIHRoZSBzeXN0ZW0uCiAgICAgICAgICAgIHR5cGU6ICdzcGNfdCcKICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgIyBNb3N0IG9mIHRoZSBjYXBhYmlsaXRpZXMgaGVyZSBhcmUgdGhlIHNhbWUgb25lcyB1c2VkIGluIHRoZQogICAgICAgICAgICAjIGNpbGl1bS1hZ2VudCdzIGNvbnRhaW5lciBiZWNhdXNlIHRoaXMgY29udGFpbmVyIGNhbiBiZSB1c2VkIHRvCiAgICAgICAgICAgICMgdW5pbnN0YWxsIGFsbCBDaWxpdW0gcmVzb3VyY2VzLCBhbmQgdGhlcmVmb3JlIGl0IGlzIGxpa2VseSB0aGF0CiAgICAgICAgICAgICMgd2lsbCBuZWVkIHRoZSBzYW1lIGNhcGFiaWxpdGllcy4KICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICMgVXNlZCBzaW5jZSBjaWxpdW0gbW9kaWZpZXMgcm91dGluZyB0YWJsZXMsIGV0Yy4uLgogICAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgICAgIyBVc2VkIGluIGlwdGFibGVzLiBDb25zaWRlciByZW1vdmluZyBvbmNlIHdlIGFyZSBpcHRhYmxlcy1mcmVlCiAgICAgICAgICAgICAgLSBTWVNfTU9EVUxFCiAgICAgICAgICAgICAgIyBXZSBuZWVkIGl0IGZvciBub3cgYnV0IG1pZ2h0IG5vdCBuZWVkIGl0IGZvciA+PSA1LjExIHNwZWNpYWxseQogICAgICAgICAgICAgICMgZm9yIHRoZSAnU1lTX1JFU09VUkNFJy4KICAgICAgICAgICAgICAjIEluID49IDUuOCB0aGVyZSdzIGFscmVhZHkgQlBGIGFuZCBQRVJNT04gY2FwYWJpbGl0aWVzCiAgICAgICAgICAgICAgLSBTWVNfQURNSU4KICAgICAgICAgICAgICAjIENvdWxkIGJlIGFuIGFsdGVybmF0aXZlIGZvciB0aGUgU1lTX0FETUlOIGZvciB0aGUgUkxJTUlUX05QUk9DCiAgICAgICAgICAgICAgLSBTWVNfUkVTT1VSQ0UKICAgICAgICAgICAgICAjIEJvdGggUEVSRk1PTiBhbmQgQlBGIHJlcXVpcmVzIGtlcm5lbCA1LjgsIGNvbnRhaW5lciBydW50aW1lCiAgICAgICAgICAgICAgIyBjcmktbyA+PSB2MS4yMi4wIG9yIGNvbnRhaW5lcmQgPj0gdjEuNS4wLgogICAgICAgICAgICAgICMgSWYgYXZhaWxhYmxlLCBTWVNfQURNSU4gY2FuIGJlIHJlbW92ZWQuCiAgICAgICAgICAgICAgIy0gUEVSRk1PTgogICAgICAgICAgICAgICMtIEJQRgogICAgICAgICAgICBkcm9wOgogICAgICAgICAgICAgIC0gQUxMCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogYnBmLW1hcHMKICAgICAgICAgIG1vdW50UGF0aDogL3N5cy9mcy9icGYKICAgICAgICAgICMgUmVxdWlyZWQgdG8gbW91bnQgY2dyb3VwIGZpbGVzeXN0ZW0gZnJvbSB0aGUgaG9zdCB0byBjaWxpdW0gYWdlbnQgcG9kCiAgICAgICAgLSBuYW1lOiBjaWxpdW0tY2dyb3VwCiAgICAgICAgICBtb3VudFBhdGg6IC9ydW4vY2lsaXVtL2Nncm91cHYyCiAgICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBIb3N0VG9Db250YWluZXIKICAgICAgICAtIG5hbWU6IGNpbGl1bS1ydW4KICAgICAgICAgIG1vdW50UGF0aDogL3Zhci9ydW4vY2lsaXVtCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgcmVxdWVzdHM6CiAgICAgICAgICAgIGNwdTogMTAwbQogICAgICAgICAgICBtZW1vcnk6IDEwME1pICMgd2FpdC1mb3Ita3ViZS1wcm94eQogICAgICByZXN0YXJ0UG9saWN5OiBBbHdheXMKICAgICAgcHJpb3JpdHlDbGFzc05hbWU6IHN5c3RlbS1ub2RlLWNyaXRpY2FsCiAgICAgIHNlcnZpY2VBY2NvdW50OiAiY2lsaXVtIgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6ICJjaWxpdW0iCiAgICAgIHRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzOiAxCiAgICAgIGhvc3ROZXR3b3JrOiB0cnVlCiAgICAgIGFmZmluaXR5OgogICAgICAgIHBvZEFudGlBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAtIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICAgICAgbWF0Y2hMYWJlbHM6CiAgICAgICAgICAgICAgICBrOHMtYXBwOiBjaWxpdW0KICAgICAgICAgICAgdG9wb2xvZ3lLZXk6IGt1YmVybmV0ZXMuaW8vaG9zdG5hbWUKICAgICAgbm9kZVNlbGVjdG9yOgogICAgICAgIGt1YmVybmV0ZXMuaW8vb3M6IGxpbnV4CiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0gb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAgICMgVG8ga2VlcCBzdGF0ZSBiZXR3ZWVuIHJlc3RhcnRzIC8gdXBncmFkZXMKICAgICAgLSBuYW1lOiBjaWxpdW0tcnVuCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvdmFyL3J1bi9jaWxpdW0KICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICAgIyBUbyBrZWVwIHN0YXRlIGJldHdlZW4gcmVzdGFydHMgLyB1cGdyYWRlcyBmb3IgYnBmIG1hcHMKICAgICAgLSBuYW1lOiBicGYtbWFwcwogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL3N5cy9mcy9icGYKICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICMgVG8gbW91bnQgY2dyb3VwMiBmaWxlc3lzdGVtIG9uIHRoZSBob3N0CiAgICAgIC0gbmFtZTogaG9zdHByb2MKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9wcm9jCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnkKICAgICAgIyBUbyBrZWVwIHN0YXRlIGJldHdlZW4gcmVzdGFydHMgLyB1cGdyYWRlcyBmb3IgY2dyb3VwMiBmaWxlc3lzdGVtCiAgICAgIC0gbmFtZTogY2lsaXVtLWNncm91cAogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL3J1bi9jaWxpdW0vY2dyb3VwdjIKICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICMgVG8gaW5zdGFsbCBjaWxpdW0gY25pIHBsdWdpbiBpbiB0aGUgaG9zdAogICAgICAtIG5hbWU6IGNuaS1wYXRoCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAgL29wdC9jbmkvYmluCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnlPckNyZWF0ZQogICAgICAgICMgVG8gaW5zdGFsbCBjaWxpdW0gY25pIGNvbmZpZ3VyYXRpb24gaW4gdGhlIGhvc3QKICAgICAgLSBuYW1lOiBldGMtY25pLW5ldGQKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9ldGMvY25pL25ldC5kCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnlPckNyZWF0ZQogICAgICAgICMgVG8gYmUgYWJsZSB0byBsb2FkIGtlcm5lbCBtb2R1bGVzCiAgICAgIC0gbmFtZTogbGliLW1vZHVsZXMKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9saWIvbW9kdWxlcwogICAgICAgICMgVG8gYWNjZXNzIGlwdGFibGVzIGNvbmN1cnJlbnRseSB3aXRoIG90aGVyIHByb2Nlc3NlcyAoZS5nLiBrdWJlLXByb3h5KQogICAgICAtIG5hbWU6IHh0YWJsZXMtbG9jawogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL3J1bi94dGFibGVzLmxvY2sKICAgICAgICAgIHR5cGU6IEZpbGVPckNyZWF0ZQogICAgICAgICMgVG8gcmVhZCB0aGUgY2x1c3Rlcm1lc2ggY29uZmlndXJhdGlvbgogICAgICAtIG5hbWU6IGNsdXN0ZXJtZXNoLXNlY3JldHMKICAgICAgICBzZWNyZXQ6CiAgICAgICAgICBzZWNyZXROYW1lOiBjaWxpdW0tY2x1c3Rlcm1lc2gKICAgICAgICAgICMgbm90ZTogdGhlIGxlYWRpbmcgemVybyBtZWFucyB0aGlzIG51bWJlciBpcyBpbiBvY3RhbCByZXByZXNlbnRhdGlvbjogZG8gbm90IHJlbW92ZSBpdAogICAgICAgICAgZGVmYXVsdE1vZGU6IDA0MDAKICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgIyBUbyByZWFkIHRoZSBjb25maWd1cmF0aW9uIGZyb20gdGhlIGNvbmZpZyBtYXAKICAgICAgLSBuYW1lOiBjaWxpdW0tY29uZmlnLXBhdGgKICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCiAgICAgIC0gbmFtZTogaG9zdC1wcm9jLXN5cy1uZXQKICAgICAgICBob3N0UGF0aDoKICAgICAgICAgIHBhdGg6IC9wcm9jL3N5cy9uZXQKICAgICAgICAgIHR5cGU6IERpcmVjdG9yeQogICAgICAtIG5hbWU6IGhvc3QtcHJvYy1zeXMta2VybmVsCiAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvcHJvYy9zeXMva2VybmVsCiAgICAgICAgICB0eXBlOiBEaXJlY3RvcnkKICAgICAgLSBuYW1lOiBodWJibGUtdGxzCiAgICAgICAgcHJvamVjdGVkOgogICAgICAgICAgIyBub3RlOiB0aGUgbGVhZGluZyB6ZXJvIG1lYW5zIHRoaXMgbnVtYmVyIGlzIGluIG9jdGFsIHJlcHJlc2VudGF0aW9uOiBkbyBub3QgcmVtb3ZlIGl0CiAgICAgICAgICBkZWZhdWx0TW9kZTogMDQwMAogICAgICAgICAgc291cmNlczoKICAgICAgICAgIC0gc2VjcmV0OgogICAgICAgICAgICAgIG5hbWU6IGh1YmJsZS1zZXJ2ZXItY2VydHMKICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgIC0ga2V5OiBjYS5jcnQKICAgICAgICAgICAgICAgIHBhdGg6IGNsaWVudC1jYS5jcnQKICAgICAgICAgICAgICAtIGtleTogdGxzLmNydAogICAgICAgICAgICAgICAgcGF0aDogc2VydmVyLmNydAogICAgICAgICAgICAgIC0ga2V5OiB0bHMua2V5CiAgICAgICAgICAgICAgICBwYXRoOiBzZXJ2ZXIua2V5Ci0tLQojIFNvdXJjZTogY2lsaXVtL3RlbXBsYXRlcy9jaWxpdW0tb3BlcmF0b3IvZGVwbG95bWVudC55YW1sCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbGFiZWxzOgogICAgaW8uY2lsaXVtL2FwcDogb3BlcmF0b3IKICAgIG5hbWU6IGNpbGl1bS1vcGVyYXRvcgpzcGVjOgogICMgU2VlIGRvY3Mgb24gU2VydmVyQ2FwYWJpbGl0aWVzLkxlYXNlc1Jlc291cmNlTG9jayBpbiBmaWxlIHBrZy9rOHMvdmVyc2lvbi92ZXJzaW9uLmdvCiAgIyBmb3IgbW9yZSBkZXRhaWxzLgogIHJlcGxpY2FzOiAyCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgaW8uY2lsaXVtL2FwcDogb3BlcmF0b3IKICAgICAgbmFtZTogY2lsaXVtLW9wZXJhdG9yCiAgc3RyYXRlZ3k6CiAgICByb2xsaW5nVXBkYXRlOgogICAgICBtYXhTdXJnZTogMQogICAgICBtYXhVbmF2YWlsYWJsZTogMQogICAgdHlwZTogUm9sbGluZ1VwZGF0ZQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGFubm90YXRpb25zOgogICAgICBsYWJlbHM6CiAgICAgICAgaW8uY2lsaXVtL2FwcDogb3BlcmF0b3IKICAgICAgICBuYW1lOiBjaWxpdW0tb3BlcmF0b3IKICAgIHNwZWM6CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogY2lsaXVtLW9wZXJhdG9yCiAgICAgICAgaW1hZ2U6ICJxdWF5LmlvL2NpbGl1bS9vcGVyYXRvci1nZW5lcmljOnYxLjEyLjRAc2hhMjU2OjA3MTA4OWVjNWJjYTFmNTU2YWZiOGU1NDFkOTk3MmEwZGZiMDlkMWUyNTUwNGFlNjQyY2VkMDIxZWNiZWRiZDEiCiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBjb21tYW5kOgogICAgICAgIC0gY2lsaXVtLW9wZXJhdG9yLWdlbmVyaWMKICAgICAgICBhcmdzOgogICAgICAgIC0gLS1jb25maWctZGlyPS90bXAvY2lsaXVtL2NvbmZpZy1tYXAKICAgICAgICAtIC0tZGVidWc9JChDSUxJVU1fREVCVUcpCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogSzhTX05PREVfTkFNRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgIGZpZWxkUGF0aDogc3BlYy5ub2RlTmFtZQogICAgICAgIC0gbmFtZTogQ0lMSVVNX0s4U19OQU1FU1BBQ0UKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgYXBpVmVyc2lvbjogdjEKICAgICAgICAgICAgICBmaWVsZFBhdGg6IG1ldGFkYXRhLm5hbWVzcGFjZQogICAgICAgIC0gbmFtZTogQ0lMSVVNX0RFQlVHCiAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICBrZXk6IGRlYnVnCiAgICAgICAgICAgICAgbmFtZTogY2lsaXVtLWNvbmZpZwogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX1NFUlZJQ0VfSE9TVAogICAgICAgICAgdmFsdWU6ICIxNzIuMTguMi4yNTIiCiAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX1NFUlZJQ0VfUE9SVAogICAgICAgICAgdmFsdWU6ICI2NDQzIgogICAgICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICBob3N0OiAiMTI3LjAuMC4xIgogICAgICAgICAgICBwYXRoOiAvaGVhbHRoegogICAgICAgICAgICBwb3J0OiA5MjM0CiAgICAgICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogNjAKICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDEwCiAgICAgICAgICB0aW1lb3V0U2Vjb25kczogMwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGNpbGl1bS1jb25maWctcGF0aAogICAgICAgICAgbW91bnRQYXRoOiAvdG1wL2NpbGl1bS9jb25maWctbWFwCiAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgIHRlcm1pbmF0aW9uTWVzc2FnZVBvbGljeTogRmFsbGJhY2tUb0xvZ3NPbkVycm9yCiAgICAgIGhvc3ROZXR3b3JrOiB0cnVlCiAgICAgIHJlc3RhcnRQb2xpY3k6IEFsd2F5cwogICAgICBwcmlvcml0eUNsYXNzTmFtZTogc3lzdGVtLWNsdXN0ZXItY3JpdGljYWwKICAgICAgc2VydmljZUFjY291bnQ6ICJjaWxpdW0tb3BlcmF0b3IiCiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogImNpbGl1bS1vcGVyYXRvciIKICAgICAgIyBJbiBIQSBtb2RlLCBjaWxpdW0tb3BlcmF0b3IgcG9kcyBtdXN0IG5vdCBiZSBzY2hlZHVsZWQgb24gdGhlIHNhbWUKICAgICAgIyBub2RlIGFzIHRoZXkgd2lsbCBjbGFzaCB3aXRoIGVhY2ggb3RoZXIuCiAgICAgIGFmZmluaXR5OgogICAgICAgIHBvZEFudGlBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAtIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICAgICAgbWF0Y2hMYWJlbHM6CiAgICAgICAgICAgICAgICBpby5jaWxpdW0vYXBwOiBvcGVyYXRvcgogICAgICAgICAgICB0b3BvbG9neUtleToga3ViZXJuZXRlcy5pby9ob3N0bmFtZQogICAgICBub2RlU2VsZWN0b3I6CiAgICAgICAga3ViZXJuZXRlcy5pby9vczogbGludXgKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgICAgLSBvcGVyYXRvcjogRXhpc3RzCiAgICAgIHZvbHVtZXM6CiAgICAgICAgIyBUbyByZWFkIHRoZSBjb25maWd1cmF0aW9uIGZyb20gdGhlIGNvbmZpZyBtYXAKICAgICAgLSBuYW1lOiBjaWxpdW0tY29uZmlnLXBhdGgKICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICBuYW1lOiBjaWxpdW0tY29uZmlnCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgYXBwLmt1YmVybmV0ZXMuaW8vdmVyc2lvbjogdjAuNS43CiAgbmFtZToga3ViZS12aXAtZHMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogICAgICBsYWJlbHM6CiAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICAgIHNwZWM6CiAgICAgIGFmZmluaXR5OgogICAgICAgIG5vZGVBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAgIG5vZGVTZWxlY3RvclRlcm1zOgogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL21hc3RlcgogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL2NvbnRyb2wtcGxhbmUKICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgY29udGFpbmVyczoKICAgICAgLSBhcmdzOgogICAgICAgIC0gbWFuYWdlcgogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IHZpcF9hcnAKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IHBvcnQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICAtIG5hbWU6IHZpcF9pbnRlcmZhY2UKICAgICAgICAgIHZhbHVlOiBlbm8xCiAgICAgICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICAgICAgdmFsdWU6ICIzMiIKICAgICAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogY3BfbmFtZXNwYWNlCiAgICAgICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgICAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYWRlcmVsZWN0aW9uCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiB2aXBfbGVhc2VkdXJhdGlvbgogICAgICAgICAgdmFsdWU6ICI1IgogICAgICAgIC0gbmFtZTogdmlwX3JlbmV3ZGVhZGxpbmUKICAgICAgICAgIHZhbHVlOiAiMyIKICAgICAgICAtIG5hbWU6IHZpcF9yZXRyeXBlcmlvZAogICAgICAgICAgdmFsdWU6ICIxIgogICAgICAgIC0gbmFtZTogYWRkcmVzcwogICAgICAgICAgdmFsdWU6IDE3Mi4xOC4yLjI1MgogICAgICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgICAgIHZhbHVlOiA6MjExMgogICAgICAgIGltYWdlOiBnaGNyLmlvL2t1YmUtdmlwL2t1YmUtdmlwOnYwLjUuNwogICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgbmFtZToga3ViZS12aXAKICAgICAgICByZXNvdXJjZXM6IHt9CiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgIC0gTkVUX1JBVwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICAgIG5hbWU6IGt1YmVjb25maWcKICAgICAgaG9zdEFsaWFzZXM6CiAgICAgIC0gaG9zdG5hbWVzOgogICAgICAgIC0ga3ViZXJuZXRlcwogICAgICAgIGlwOiAxMjcuMC4wLjEKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgIC0gZWZmZWN0OiBOb1NjaGVkdWxlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAtIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICBuYW1lOiBrdWJlY29uZmlnCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBuYW1lOiBrdWJlLXZpcAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMgogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=10min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "2350574995",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node02.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgYXBwLmt1YmVybmV0ZXMuaW8vdmVyc2lvbjogdjAuNS43CiAgbmFtZToga3ViZS12aXAtZHMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogICAgICBsYWJlbHM6CiAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICAgIHNwZWM6CiAgICAgIGFmZmluaXR5OgogICAgICAgIG5vZGVBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAgIG5vZGVTZWxlY3RvclRlcm1zOgogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL21hc3RlcgogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL2NvbnRyb2wtcGxhbmUKICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgY29udGFpbmVyczoKICAgICAgLSBhcmdzOgogICAgICAgIC0gbWFuYWdlcgogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IHZpcF9hcnAKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IHBvcnQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICAtIG5hbWU6IHZpcF9pbnRlcmZhY2UKICAgICAgICAgIHZhbHVlOiBlbm8xCiAgICAgICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICAgICAgdmFsdWU6ICIzMiIKICAgICAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogY3BfbmFtZXNwYWNlCiAgICAgICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgICAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYWRlcmVsZWN0aW9uCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiB2aXBfbGVhc2VkdXJhdGlvbgogICAgICAgICAgdmFsdWU6ICI1IgogICAgICAgIC0gbmFtZTogdmlwX3JlbmV3ZGVhZGxpbmUKICAgICAgICAgIHZhbHVlOiAiMyIKICAgICAgICAtIG5hbWU6IHZpcF9yZXRyeXBlcmlvZAogICAgICAgICAgdmFsdWU6ICIxIgogICAgICAgIC0gbmFtZTogYWRkcmVzcwogICAgICAgICAgdmFsdWU6IDE3Mi4xOC4yLjI1MgogICAgICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgICAgIHZhbHVlOiA6MjExMgogICAgICAgIGltYWdlOiBnaGNyLmlvL2t1YmUtdmlwL2t1YmUtdmlwOnYwLjUuNwogICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgbmFtZToga3ViZS12aXAKICAgICAgICByZXNvdXJjZXM6IHt9CiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgIC0gTkVUX1JBVwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICAgIG5hbWU6IGt1YmVjb25maWcKICAgICAgaG9zdEFsaWFzZXM6CiAgICAgIC0gaG9zdG5hbWVzOgogICAgICAgIC0ga3ViZXJuZXRlcwogICAgICAgIGlwOiAxMjcuMC4wLjEKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgIC0gZWZmZWN0OiBOb1NjaGVkdWxlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAtIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICBuYW1lOiBrdWJlY29uZmlnCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBuYW1lOiBrdWJlLXZpcAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMgogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "content": "---\nvariant: flatcar\nversion: 1.0.0\nstorage:\n  files:\n    - path: \"/etc/hostname\"\n      mode: 0644\n      overwrite: true\n      contents:\n        source: \"data:,node03.cho.rtrox.com\"\n    - path: /opt/k3s-install.sh\n      mode: 0777\n      contents:\n        source: https://get.k3s.io\n    - path: /etc/rancher/k3s/config.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,\"\n    - path: /var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\n      mode: 0644\n      contents:\n        source: \"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgYXBwLmt1YmVybmV0ZXMuaW8vdmVyc2lvbjogdjAuNS43CiAgbmFtZToga3ViZS12aXAtZHMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogICAgICBsYWJlbHM6CiAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICAgIHNwZWM6CiAgICAgIGFmZmluaXR5OgogICAgICAgIG5vZGVBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAgIG5vZGVTZWxlY3RvclRlcm1zOgogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL21hc3RlcgogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL2NvbnRyb2wtcGxhbmUKICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgY29udGFpbmVyczoKICAgICAgLSBhcmdzOgogICAgICAgIC0gbWFuYWdlcgogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IHZpcF9hcnAKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IHBvcnQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICAtIG5hbWU6IHZpcF9pbnRlcmZhY2UKICAgICAgICAgIHZhbHVlOiBlbm8xCiAgICAgICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICAgICAgdmFsdWU6ICIzMiIKICAgICAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogY3BfbmFtZXNwYWNlCiAgICAgICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgICAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYWRlcmVsZWN0aW9uCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiB2aXBfbGVhc2VkdXJhdGlvbgogICAgICAgICAgdmFsdWU6ICI1IgogICAgICAgIC0gbmFtZTogdmlwX3JlbmV3ZGVhZGxpbmUKICAgICAgICAgIHZhbHVlOiAiMyIKICAgICAgICAtIG5hbWU6IHZpcF9yZXRyeXBlcmlvZAogICAgICAgICAgdmFsdWU6ICIxIgogICAgICAgIC0gbmFtZTogYWRkcmVzcwogICAgICAgICAgdmFsdWU6IDE3Mi4xOC4yLjI1MgogICAgICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgICAgIHZhbHVlOiA6MjExMgogICAgICAgIGltYWdlOiBnaGNyLmlvL2t1YmUtdmlwL2t1YmUtdmlwOnYwLjUuNwogICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgbmFtZToga3ViZS12aXAKICAgICAgICByZXNvdXJjZXM6IHt9CiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgIC0gTkVUX1JBVwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICAgIG5hbWU6IGt1YmVjb25maWcKICAgICAgaG9zdEFsaWFzZXM6CiAgICAgIC0gaG9zdG5hbWVzOgogICAgICAgIC0ga3ViZXJuZXRlcwogICAgICAgIGlwOiAxMjcuMC4wLjEKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgIC0gZWZmZWN0OiBOb1NjaGVkdWxlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAtIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICBuYW1lOiBrdWJlY29uZmlnCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBuYW1lOiBrdWJlLXZpcAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMwogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\"\nsystemd:\n  units:\n    - name: k3s-install.service\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Install k3s\n        Wants = network-online.target\n        After = network.target network-online.target\n        ConditionPathExists=/opt/k3s-install.sh\n        ConditionPathExists=!/opt/bin/k3s\n        [Service]\n        Type=forking\n        TimeoutStartSec=180\n        RemainAfterExit=yes\n        KillMode=process\n        Environment=\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\"\n        Environment=\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\"\n        ExecStart=/usr/bin/sh -c \"/opt/k3s-install.sh\"\n        [Install]\n        WantedBy=multi-user.target\n    - name: remove-runonce-manifests.service\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        ConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        KillMode=process\n        ExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\n    - name: remove-runonce-manifests.timer\n      enabled: true\n      contents: |\n        [Unit]\n        Description=Remove runonce manifests\n        [Timer]\n        OnBootSec=10min\n        [Install]\n        WantedBy=timers.target\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]\n",
            "id": "1045526988",
            "platform": null,
            "pretty_print": false,
            "rendered": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node03.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgYXBwLmt1YmVybmV0ZXMuaW8vdmVyc2lvbjogdjAuNS43CiAgbmFtZToga3ViZS12aXAtZHMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogICAgICBsYWJlbHM6CiAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICAgIHNwZWM6CiAgICAgIGFmZmluaXR5OgogICAgICAgIG5vZGVBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAgIG5vZGVTZWxlY3RvclRlcm1zOgogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL21hc3RlcgogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL2NvbnRyb2wtcGxhbmUKICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgY29udGFpbmVyczoKICAgICAgLSBhcmdzOgogICAgICAgIC0gbWFuYWdlcgogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IHZpcF9hcnAKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IHBvcnQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICAtIG5hbWU6IHZpcF9pbnRlcmZhY2UKICAgICAgICAgIHZhbHVlOiBlbm8xCiAgICAgICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICAgICAgdmFsdWU6ICIzMiIKICAgICAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogY3BfbmFtZXNwYWNlCiAgICAgICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgICAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYWRlcmVsZWN0aW9uCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiB2aXBfbGVhc2VkdXJhdGlvbgogICAgICAgICAgdmFsdWU6ICI1IgogICAgICAgIC0gbmFtZTogdmlwX3JlbmV3ZGVhZGxpbmUKICAgICAgICAgIHZhbHVlOiAiMyIKICAgICAgICAtIG5hbWU6IHZpcF9yZXRyeXBlcmlvZAogICAgICAgICAgdmFsdWU6ICIxIgogICAgICAgIC0gbmFtZTogYWRkcmVzcwogICAgICAgICAgdmFsdWU6IDE3Mi4xOC4yLjI1MgogICAgICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgICAgIHZhbHVlOiA6MjExMgogICAgICAgIGltYWdlOiBnaGNyLmlvL2t1YmUtdmlwL2t1YmUtdmlwOnYwLjUuNwogICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgbmFtZToga3ViZS12aXAKICAgICAgICByZXNvdXJjZXM6IHt9CiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgIC0gTkVUX1JBVwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICAgIG5hbWU6IGt1YmVjb25maWcKICAgICAgaG9zdEFsaWFzZXM6CiAgICAgIC0gaG9zdG5hbWVzOgogICAgICAgIC0ga3ViZXJuZXRlcwogICAgICAgIGlwOiAxMjcuMC4wLjEKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgIC0gZWZmZWN0OiBOb1NjaGVkdWxlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAtIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICBuYW1lOiBrdWJlY29uZmlnCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBuYW1lOiBrdWJlLXZpcAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMwogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}",
            "snippets": null,
            "strict": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "cilium-install",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "a78fad5093798a8965f0fb3560099bbf41453d0cdd93e2d839174ab54f1bc11a",
            "rendered": "---\n# Source: cilium/templates/cilium-agent/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-operator/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium-operator\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-ca-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cilium-ca\n  namespace: kube-system\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTjZOTVhwUXNtaTc3Q2F1SFZLNW1xakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qRXlOak0wV2hjTk1qVXhNakExTWpFeQpOak0wV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzU0eDFkcUtBa3NJSXQwdG14LytJZzRCS3EwQ1BSWVBiMjdXbkF3RkFEay91WnFhQzMKL1NHL0tsNlRMaFk2WHR1NU1KWmJTY2J2ZW5IUXlmSGt4aW9lVlVXSk9MSUJNLzNWVlp4SEt6L0xudGp6L0E1cQo2WE0wSEZNcUpaQzRoRUFwY3FCcXJwa0c5Nnk3bCtyM3JWMkExbnJQVForV05ObU5GU0R0YnBmQzVvUzNQRXhBCms5dFVSTE5FVVZnQ3NmeWlYZmYydVRuZ2c0Y2xJK3dtYVF0U29LdFhwTnlwbFYzc3EyUW8wQnBjV3ZkMTV1S1cKaDcyTjh6VU9tL2NUenJXZXM1Ni9OWmhLV3lFZzhZNWp3U2N2UGtkRjNLaGkzQ25xZi9FeGh2b3dnZXFqY3BJZQp4WWp4Z01vUisyTkNSQWtWT0x4KzRzclB3VFdVMEV3Ykp3S3BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVqaVA5cm5Ga0pEc0QrZ3pRL3E2NGFxK1A1aWd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGbnlnTUd5cE00ZVRPZE1UcG9WZ09aRHRPOWVKS2RFYnpHVmlqUWFHbXJkUWtDVkNlSDdQSEdzCmJBaHljM2E1YnkvdWpCMUpQR0ZuN2FGZm92SC9hWjZXMjVuSlU5NmphUzQrUXNMQ3hNRmRtK3JXeFlncnljY00KTjVNNXRLOFNRbkZzVjlpT2tSY3RJWlBmeWNjN00xMG9aelNzbnhnekd4cXQyYjZwQlBkOTZSS0l4eFhnQWcwWQptUFpJQ3ZGb1NhYW1xS0xrWVpqbFAybTlRNUdHdjViN1kxb2FydGt5ZE53YW1jdU1NekcxYWx2Z3FqcnlrTkVBCndmL0txN2FCUEtObENySjErek1zbHd2ZWV6dE8zWThjc1ZNZUVIMHplZHd1MGpRcm05R0JDMjF0QnpucG14OVgKSEtpUmttR3JzN1pOTGlJd29XSFF6WUQyN2hISnJZOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdWVNZFhhaWdKTENDTGRMWnNmL2lJT0FTcXRBajBXRDI5dTFwd01CUUE1UDdtYW1nCnQvMGh2eXBla3k0V09sN2J1VENXVzBuRzczcHgwTW54NU1ZcUhsVkZpVGl5QVRQOTFWV2NSeXMveTU3WTgvd08KYXVsek5CeFRLaVdRdUlSQUtYS2dhcTZaQnZlc3U1ZnE5NjFkZ05aNnowMmZsalRaalJVZzdXNlh3dWFFdHp4TQpRSlBiVkVTelJGRllBckg4b2wzMzlyazU0SU9ISlNQc0pta0xVcUNyVjZUY3FaVmQ3S3RrS05BYVhGcjNkZWJpCmxvZTlqZk0xRHB2M0U4NjFuck9ldnpXWVNsc2hJUEdPWThFbkx6NUhSZHlvWXR3cDZuL3hNWWI2TUlIcW8zS1MKSHNXSThZREtFZnRqUWtRSkZUaThmdUxLejhFMWxOQk1HeWNDcVFJREFRQUJBb0lCQUFHbEpPbGpTS2VLZUZ4MwpkVDNDQ2ZwSWdXSEpuY2VJbUNidlN2Uk52MmVJczcxVVp2dTUzY2FYVldid0RYcE94SnNLOXdtdnlYYnRHbnpDCmpNVjlpM25oUDFCTGxDZTJraFNGUVhEUHpTeThKeWRobjY4S2lkNTRNYlE1eU9JWktZZzBYMzhTTklCL1NLUVEKWUIvNUJNN1RGeHNta0xiL21MMUs1cE96V3R4NnNlZEFiM2dGVzRIMjRUQUJ4NTFkODZlTWdyNUcxZDVKNndodgpWWlVJamg3TU5wQnpiNW1zemhseEtJcW5CUXNad0pGaTAxRmVqeWJzNDdjNUdIR2tkOGQ3bURxcXllcmJpaWg2Cm9kOEF6UkR5WTJiNk8vVGZXM3ZRQ1YzOU0xMEIwbHE0KzVIK1g3bFJuUFhLVFdvQkUvWTJ3VFU3T1Y2dENDODAKdnBaYTJGRUNnWUVBOUNMZmFVZ3UrRmcwTmdZNWxRWkljaHdVTGRueHorcUxtNTQ0cGVUbGJ5dHlJTGxtckxveApNZFYzNVdpWDhFKzRGaWNBQkRpb0RKd1A3LzVZbjVFT2dpNmcvcmNzS1BzZm5PS2tPQkNPWit5U2tVMVgzNTZaCjRIdUMxVlhxMzVBTEd3UWwrNmRkQ1BxVjFtR0xnWXhIc0tBZlloTkU5UEEyTG50eUlaWEhFczhDZ1lFQXd1dWIKUHBObEdEL2RxZDgxOFVRYmFGRS84MEVvZEE3SHF1NEtLZGhudkRmT21qYjF4MGQ4L1RJQzgxdkhUakI2YTJZZgpEZk1kUVEvaUdxUTFYVjFGd0xOd1V4Mm9Fc2FrLzlKQnRQRHFWSTdVS2VSZ0xjdWZzN3NlSWdhZFJjcFFRR0FJCmZHOTg3WS90ZWlIQmNsa1VNZTI0Z1VTVm9CR3UxMU00VEhhZVVRY0NnWUJNcnJ0dnpVMTdrZkRzV3k0eEFlVTEKZWw1WVBKRzRsZG8rQ2dlUERBT0kxS09uWmJTN1lreGJjOHFTRXpWT05Td0VRVUcvRWJDdkxVSFFSeHE5SEFucgptQXZYbGQ5WUMvRFZEVmM1aVBIQjhNdmt1ZDkxRE5NV2NKVWF2ejdqODlHWkxjZGtjU0JHMXJiRHZLWGVEaHJpCmZwajg3RUtIa1AvanY4Q01qZ2dXZndLQmdCN1NXS01GZFpmbkNXc0NFNnFKNVhlU1dYVmltVDM0MUZQUC9pVnQKeGNGNlpaMzNFTmdwRXJlS3YvS3hVWXVvbU1NQXkrcE54aE55cW9NaDhocElWRzVMTVhqREdMK1hUNkh3SWxtMQpPcWlTU1RReW00N0NRd2VOa0E4N1VvVWxuNWorVm5rdXUrZG91ZGwxR3Z5MDN6K2g0bW4yYVY1OVRWTlpJbTdjCjF0M2pBb0dBRUhsY05LLzZKdmVrVkpYbi9VblNPeVNSdyt1M0hjWmZPekVJcjJlM2RJVHRRM0xWWDNRRnlkMysKNXd0SjZBRGVCV1VmM0NCT21ldDBkdURsb2RLVTlpRmd1WnRoMDRDb1c0ZE1odTdJVUxCVTVObnR2aENYTTRYRAptMmtGbGQzczY3OTFlZFhVUldSZ2tRWXdFbEY5MzVjTEpxSEJIT2t6Q2dHbWZXVTdjQUE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n---\n# Source: cilium/templates/hubble/tls-helm/ca-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: hubble-ca-secret\n  namespace: kube-system\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTjZOTVhwUXNtaTc3Q2F1SFZLNW1xakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qRXlOak0wV2hjTk1qVXhNakExTWpFeQpOak0wV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzU0eDFkcUtBa3NJSXQwdG14LytJZzRCS3EwQ1BSWVBiMjdXbkF3RkFEay91WnFhQzMKL1NHL0tsNlRMaFk2WHR1NU1KWmJTY2J2ZW5IUXlmSGt4aW9lVlVXSk9MSUJNLzNWVlp4SEt6L0xudGp6L0E1cQo2WE0wSEZNcUpaQzRoRUFwY3FCcXJwa0c5Nnk3bCtyM3JWMkExbnJQVForV05ObU5GU0R0YnBmQzVvUzNQRXhBCms5dFVSTE5FVVZnQ3NmeWlYZmYydVRuZ2c0Y2xJK3dtYVF0U29LdFhwTnlwbFYzc3EyUW8wQnBjV3ZkMTV1S1cKaDcyTjh6VU9tL2NUenJXZXM1Ni9OWmhLV3lFZzhZNWp3U2N2UGtkRjNLaGkzQ25xZi9FeGh2b3dnZXFqY3BJZQp4WWp4Z01vUisyTkNSQWtWT0x4KzRzclB3VFdVMEV3Ykp3S3BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVqaVA5cm5Ga0pEc0QrZ3pRL3E2NGFxK1A1aWd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGbnlnTUd5cE00ZVRPZE1UcG9WZ09aRHRPOWVKS2RFYnpHVmlqUWFHbXJkUWtDVkNlSDdQSEdzCmJBaHljM2E1YnkvdWpCMUpQR0ZuN2FGZm92SC9hWjZXMjVuSlU5NmphUzQrUXNMQ3hNRmRtK3JXeFlncnljY00KTjVNNXRLOFNRbkZzVjlpT2tSY3RJWlBmeWNjN00xMG9aelNzbnhnekd4cXQyYjZwQlBkOTZSS0l4eFhnQWcwWQptUFpJQ3ZGb1NhYW1xS0xrWVpqbFAybTlRNUdHdjViN1kxb2FydGt5ZE53YW1jdU1NekcxYWx2Z3FqcnlrTkVBCndmL0txN2FCUEtObENySjErek1zbHd2ZWV6dE8zWThjc1ZNZUVIMHplZHd1MGpRcm05R0JDMjF0QnpucG14OVgKSEtpUmttR3JzN1pOTGlJd29XSFF6WUQyN2hISnJZOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdWVNZFhhaWdKTENDTGRMWnNmL2lJT0FTcXRBajBXRDI5dTFwd01CUUE1UDdtYW1nCnQvMGh2eXBla3k0V09sN2J1VENXVzBuRzczcHgwTW54NU1ZcUhsVkZpVGl5QVRQOTFWV2NSeXMveTU3WTgvd08KYXVsek5CeFRLaVdRdUlSQUtYS2dhcTZaQnZlc3U1ZnE5NjFkZ05aNnowMmZsalRaalJVZzdXNlh3dWFFdHp4TQpRSlBiVkVTelJGRllBckg4b2wzMzlyazU0SU9ISlNQc0pta0xVcUNyVjZUY3FaVmQ3S3RrS05BYVhGcjNkZWJpCmxvZTlqZk0xRHB2M0U4NjFuck9ldnpXWVNsc2hJUEdPWThFbkx6NUhSZHlvWXR3cDZuL3hNWWI2TUlIcW8zS1MKSHNXSThZREtFZnRqUWtRSkZUaThmdUxLejhFMWxOQk1HeWNDcVFJREFRQUJBb0lCQUFHbEpPbGpTS2VLZUZ4MwpkVDNDQ2ZwSWdXSEpuY2VJbUNidlN2Uk52MmVJczcxVVp2dTUzY2FYVldid0RYcE94SnNLOXdtdnlYYnRHbnpDCmpNVjlpM25oUDFCTGxDZTJraFNGUVhEUHpTeThKeWRobjY4S2lkNTRNYlE1eU9JWktZZzBYMzhTTklCL1NLUVEKWUIvNUJNN1RGeHNta0xiL21MMUs1cE96V3R4NnNlZEFiM2dGVzRIMjRUQUJ4NTFkODZlTWdyNUcxZDVKNndodgpWWlVJamg3TU5wQnpiNW1zemhseEtJcW5CUXNad0pGaTAxRmVqeWJzNDdjNUdIR2tkOGQ3bURxcXllcmJpaWg2Cm9kOEF6UkR5WTJiNk8vVGZXM3ZRQ1YzOU0xMEIwbHE0KzVIK1g3bFJuUFhLVFdvQkUvWTJ3VFU3T1Y2dENDODAKdnBaYTJGRUNnWUVBOUNMZmFVZ3UrRmcwTmdZNWxRWkljaHdVTGRueHorcUxtNTQ0cGVUbGJ5dHlJTGxtckxveApNZFYzNVdpWDhFKzRGaWNBQkRpb0RKd1A3LzVZbjVFT2dpNmcvcmNzS1BzZm5PS2tPQkNPWit5U2tVMVgzNTZaCjRIdUMxVlhxMzVBTEd3UWwrNmRkQ1BxVjFtR0xnWXhIc0tBZlloTkU5UEEyTG50eUlaWEhFczhDZ1lFQXd1dWIKUHBObEdEL2RxZDgxOFVRYmFGRS84MEVvZEE3SHF1NEtLZGhudkRmT21qYjF4MGQ4L1RJQzgxdkhUakI2YTJZZgpEZk1kUVEvaUdxUTFYVjFGd0xOd1V4Mm9Fc2FrLzlKQnRQRHFWSTdVS2VSZ0xjdWZzN3NlSWdhZFJjcFFRR0FJCmZHOTg3WS90ZWlIQmNsa1VNZTI0Z1VTVm9CR3UxMU00VEhhZVVRY0NnWUJNcnJ0dnpVMTdrZkRzV3k0eEFlVTEKZWw1WVBKRzRsZG8rQ2dlUERBT0kxS09uWmJTN1lreGJjOHFTRXpWT05Td0VRVUcvRWJDdkxVSFFSeHE5SEFucgptQXZYbGQ5WUMvRFZEVmM1aVBIQjhNdmt1ZDkxRE5NV2NKVWF2ejdqODlHWkxjZGtjU0JHMXJiRHZLWGVEaHJpCmZwajg3RUtIa1AvanY4Q01qZ2dXZndLQmdCN1NXS01GZFpmbkNXc0NFNnFKNVhlU1dYVmltVDM0MUZQUC9pVnQKeGNGNlpaMzNFTmdwRXJlS3YvS3hVWXVvbU1NQXkrcE54aE55cW9NaDhocElWRzVMTVhqREdMK1hUNkh3SWxtMQpPcWlTU1RReW00N0NRd2VOa0E4N1VvVWxuNWorVm5rdXUrZG91ZGwxR3Z5MDN6K2g0bW4yYVY1OVRWTlpJbTdjCjF0M2pBb0dBRUhsY05LLzZKdmVrVkpYbi9VblNPeVNSdyt1M0hjWmZPekVJcjJlM2RJVHRRM0xWWDNRRnlkMysKNXd0SjZBRGVCV1VmM0NCT21ldDBkdURsb2RLVTlpRmd1WnRoMDRDb1c0ZE1odTdJVUxCVTVObnR2aENYTTRYRAptMmtGbGQzczY3OTFlZFhVUldSZ2tRWXdFbEY5MzVjTEpxSEJIT2t6Q2dHbWZXVTdjQUE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n---\n# Source: cilium/templates/hubble/tls-helm/server-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: hubble-server-certs\n  namespace: kube-system\ntype: kubernetes.io/tls\ndata:\n  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTjZOTVhwUXNtaTc3Q2F1SFZLNW1xakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qRXlOak0wV2hjTk1qVXhNakExTWpFeQpOak0wV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzU0eDFkcUtBa3NJSXQwdG14LytJZzRCS3EwQ1BSWVBiMjdXbkF3RkFEay91WnFhQzMKL1NHL0tsNlRMaFk2WHR1NU1KWmJTY2J2ZW5IUXlmSGt4aW9lVlVXSk9MSUJNLzNWVlp4SEt6L0xudGp6L0E1cQo2WE0wSEZNcUpaQzRoRUFwY3FCcXJwa0c5Nnk3bCtyM3JWMkExbnJQVForV05ObU5GU0R0YnBmQzVvUzNQRXhBCms5dFVSTE5FVVZnQ3NmeWlYZmYydVRuZ2c0Y2xJK3dtYVF0U29LdFhwTnlwbFYzc3EyUW8wQnBjV3ZkMTV1S1cKaDcyTjh6VU9tL2NUenJXZXM1Ni9OWmhLV3lFZzhZNWp3U2N2UGtkRjNLaGkzQ25xZi9FeGh2b3dnZXFqY3BJZQp4WWp4Z01vUisyTkNSQWtWT0x4KzRzclB3VFdVMEV3Ykp3S3BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVqaVA5cm5Ga0pEc0QrZ3pRL3E2NGFxK1A1aWd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGbnlnTUd5cE00ZVRPZE1UcG9WZ09aRHRPOWVKS2RFYnpHVmlqUWFHbXJkUWtDVkNlSDdQSEdzCmJBaHljM2E1YnkvdWpCMUpQR0ZuN2FGZm92SC9hWjZXMjVuSlU5NmphUzQrUXNMQ3hNRmRtK3JXeFlncnljY00KTjVNNXRLOFNRbkZzVjlpT2tSY3RJWlBmeWNjN00xMG9aelNzbnhnekd4cXQyYjZwQlBkOTZSS0l4eFhnQWcwWQptUFpJQ3ZGb1NhYW1xS0xrWVpqbFAybTlRNUdHdjViN1kxb2FydGt5ZE53YW1jdU1NekcxYWx2Z3FqcnlrTkVBCndmL0txN2FCUEtObENySjErek1zbHd2ZWV6dE8zWThjc1ZNZUVIMHplZHd1MGpRcm05R0JDMjF0QnpucG14OVgKSEtpUmttR3JzN1pOTGlJd29XSFF6WUQyN2hISnJZOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURWakNDQWo2Z0F3SUJBZ0lRUXhObnJUMTQ1QXlMNXBZeXFyYjZOekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qRXlOak0xV2hjTk1qVXhNakExTWpFeQpOak0xV2pBcU1TZ3dKZ1lEVlFRRERCOHFMbVJsWm1GMWJIUXVhSFZpWW14bExXZHljR011WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBenB2WjVVaWJqOXFGd0l4Rzd0YXMKNThSZjlKWHhEK1pSNjFKZmZmWGQ5cTJmUWJuMmV2QVVJYTQxZW5QbzJLSk5NTnZNZGNMRzA1NGcyZmF4YmVxQgpsRWN6VVdFRWRWK2lsWURraFBWQzM4b3lnZExhUVZuNSt0YUxLMzBMVFhzNlI5NzVHZTNONGFiTThEVkZDVkFZCmp4NDJZUU9VUUFGYXY1M2tmcjJRYTg4MGg4VFFHYk04NTBmbys5Mnl2WG9pU1Zta0xJRGM0NE5YbjN1cW9lZk8KazNsOThWYktmVWQ0VTVtYTlHWXFnN1hyNDRmRGN1b2ZtbTBQNnBIdGtVMnhrWGh0RDI4UmdEU0Jnb1FvNmpuOAp0akhYN0JxZWliODMza3ZkdVVZbzRWbGZOcXdvQS9EcDU3SU9XQkZRa1ZQZGRCYWdCUFdSV2JPd0REZFdvZjlaClhRSURBUUFCbzRHTk1JR0tNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTT0kvMnVjV1FrT3dQNgpETkQrcnJocXI0L21LREFxQmdOVkhSRUVJekFoZ2g4cUxtUmxabUYxYkhRdWFIVmlZbXhsTFdkeWNHTXVZMmxzCmFYVnRMbWx2TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCNlQ0NFhqM3M3OHROVWxSRVlDK2xTTkl4eXJrcUYKSXVsSCs4d3BLY0svc05WMWxqZVlveXFqQUUyNGJOMDJxRnVNWXZWM09QZjNhYmxSQ3lzSDdqamlzTHY3OWU1SgpKdHNldlgwakY5amt2bm5TWnJoYnptUG9QMTFJYXhvellMQ054SlBCVjFRTmtWTkZQRlJ2NFdZT1R6WFNrWmJlCmx0SGV3TUtJT2xyRGlWWlc2b04wNEw3T0RkNTRaeDNZRXpzTWkzeVdlRFpDcmNZOFUvMnVtSldKbFB5WXJ5c1AKd1RNcnNCbVY0T2tiNlVvYzBiUVIwdzhqRnlLRGRMNS9LVVJaRzlERDN0Q0kxVUp1bmJub3JpSUdyV2Q0clFMRQpwMG0yS240cUNEZkg4NW1sSEZaYnMxU1dVZFQ5WkFnemNsNkx3RDR2STZLM1p4OHZMcTNDU05TZwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBenB2WjVVaWJqOXFGd0l4Rzd0YXM1OFJmOUpYeEQrWlI2MUpmZmZYZDlxMmZRYm4yCmV2QVVJYTQxZW5QbzJLSk5NTnZNZGNMRzA1NGcyZmF4YmVxQmxFY3pVV0VFZFYraWxZRGtoUFZDMzhveWdkTGEKUVZuNSt0YUxLMzBMVFhzNlI5NzVHZTNONGFiTThEVkZDVkFZang0MllRT1VRQUZhdjUza2ZyMlFhODgwaDhUUQpHYk04NTBmbys5Mnl2WG9pU1Zta0xJRGM0NE5YbjN1cW9lZk9rM2w5OFZiS2ZVZDRVNW1hOUdZcWc3WHI0NGZECmN1b2ZtbTBQNnBIdGtVMnhrWGh0RDI4UmdEU0Jnb1FvNmpuOHRqSFg3QnFlaWI4MzNrdmR1VVlvNFZsZk5xd28KQS9EcDU3SU9XQkZRa1ZQZGRCYWdCUFdSV2JPd0REZFdvZjlaWFFJREFRQUJBb0lCQUh2RnVCSjRuZURlKzNPdgpWYXN0WmlYdWFjR2Z0ZXRkZ2tQa2RCcUVtWFYyNjhvM09xYkpmblh5NUV5NGRZeWFKbjRYbnZRSlBJMTMxSnhmCkFrb2p5MzdsN0tOYTZJM2NQZzBzU3pvdnArRmpRMENzN1YxckpxdVRyWW5lL2s5cmZDMmtNVHpNVHFOWkJycjgKWHFCR29IL1VqS1V2dkxkZldGc2tuc2Npand0VjRFU0pOM0hUKzJxR2xDVE1YS1NXdFdMRVpSVXdnOGRYOGNVbwpqaHluWmhLWVJFcHBEeTZRRUF2bTEzaGtWbTZIWG55RW8yU1N6U2RsNnFocTRyV2ZucXFmNC9VdWNSM2o3ZU9WCnJoa1IwM0Y3MUJoM1ZPbkg3T2Q3NFhiVHVRWWpmWTFZdkZpVzliclA2bjRmd1pPbVBCVmIwbURIRnpzb212RjMKQlhJTG1PRUNnWUVBengzbThsTWRuRERQdU1ya1lET0l5QVljaUs4R3NHNVpPdXJEZ1JRMkdSTzc3Skt2NFhlKwpma2poMG5rN1FtV1IxVUZ0T1IwclFSYzRlQ2t1Z2FqTlJ3cW9tMVozVi9lWVBBVTcydGxwOHVkMDR6cTF1dVRGCmppVENnbERRMEVuTlhDTld3d0c5YkRLWThiZm9yeHRzdFkzQXRPR2hJTTBJUk4wemhJV2dJTmtDZ1lFQS8xOUIKTktyS25qWk5vWjV0L3lzaUJ5ei9zdGlORy9zN3pTbC9zWDJrMitLUC9aUTNJRVAxM1ZISFZxbzFIbkRMc21hLwpQM2N3RXFFWjc4L242UGVvMlA2bmdZT0pUODhDK0dBQWVKWlcySGpCNmdSYmsxWnY4ai9OQlRDWXFYQ3MwWWk1CjVZRmEwRnNWMnlxWmdIMk5mUGZvclNUZlJFNTNKbVJzbmtYUEtpVUNnWUVBcm5sYUc3aTRzT0xObWJZUlBKa3QKR0pOTlpqZExRMFV5RmRlK2FmWkV2RXRMZTdiMlF0RkV2ODFWcnFCQnMyVXN2S0VwQ1h2dy9CdzdqYjNqVjRhRApwdHpydkMvU3lWL2g5bTNTUmtId1pwZGtlQ2IxQUVQSHlENWZQTGducjg3OEdDb001S21La0tMdkJIRVFxckpICm1ZbVlWTWZkbkd3Y0V5YmtSemJwOWNFQ2dZQTFwQWFJVDQrNzUrQXFvS0t1Ukpzak1ycUxFSjJqVVFSZ3RlVFMKblhleGtFZDZsbFYxKzVCN2FxQWFmaW9tT0w4d3ZCQlQvbThrbXA1ZUZ5ZTVjYndQeUgzYTRJeEpMVXlNYTIzdAo1blpiaGhJRlcrRDRjK0dUMnY3dnBpT0xBOVhwTlhVRzFrTURIUDdjU0hoeDJ1MkxZRytKWHdOZXo3U0xaZkRDCjFoc0wyUUtCZ0J2amo5Z2pRNkFRbDZjeXNseVpvSEhrMU9LdVRoQW5kNjNaUU1ONkpIZnNnUVFobmRUOXBmTEUKTlJXRXdMTjNHVXo2VjVpMXZPZjZiRHVnNmhnU3FVblJuTjBFaXNuVk4vOFY3MVZhK3c1Y3oraUQxandGTHpUNApUUVhFZ0x5aVJMMWl4U0p2NlJSaUl3aWtjbGllaFhRNlhaMFRWdTdhYzc5bUlBaDdORVJNCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n---\n# Source: cilium/templates/cilium-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cilium-config\n  namespace: kube-system\ndata:\n\n  # Identity allocation mode selects how identities are shared between cilium\n  # nodes by setting how they are stored. The options are \"crd\" or \"kvstore\".\n  # - \"crd\" stores identities in kubernetes as CRDs (custom resource definition).\n  #   These can be queried with:\n  #     kubectl get ciliumid\n  # - \"kvstore\" stores identities in an etcd kvstore, that is\n  #   configured below. Cilium versions before 1.6 supported only the kvstore\n  #   backend. Upgrades from these older cilium versions should continue using\n  #   the kvstore by commenting out the identity-allocation-mode below, or\n  #   setting it to \"kvstore\".\n  identity-allocation-mode: crd\n  cilium-endpoint-gc-interval: \"5m0s\"\n  nodes-gc-interval: \"5m0s\"\n  # Disable the usage of CiliumEndpoint CRD\n  disable-endpoint-crd: \"false\"\n\n  # If you want to run cilium in debug mode change this value to true\n  debug: \"false\"\n  # The agent can be put into the following three policy enforcement modes\n  # default, always and never.\n  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes\n  enable-policy: \"default\"\n\n  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4\n  # address.\n  enable-ipv4: \"true\"\n\n  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6\n  # address.\n  enable-ipv6: \"false\"\n  # Users who wish to specify their own custom CNI configuration file must set\n  # custom-cni-conf to \"true\", otherwise Cilium may overwrite the configuration.\n  custom-cni-conf: \"false\"\n  enable-bpf-clock-probe: \"true\"\n  # If you want cilium monitor to aggregate tracing for packets, set this level\n  # to \"low\", \"medium\", or \"maximum\". The higher the level, the less packets\n  # that will be seen in monitor output.\n  monitor-aggregation: medium\n\n  # The monitor aggregation interval governs the typical time between monitor\n  # notification events for each allowed connection.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-interval: 5s\n\n  # The monitor aggregation flags determine which TCP flags which, upon the\n  # first observation, cause monitor notifications to be generated.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-flags: all\n  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic\n  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.\n  bpf-map-dynamic-size-ratio: \"0.0025\"\n  # bpf-policy-map-max specifies the maximum number of entries in endpoint\n  # policy map (per endpoint)\n  bpf-policy-map-max: \"16384\"\n  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,\n  # backend and affinity maps.\n  bpf-lb-map-max: \"65536\"\n  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass\n  # optimization for nodeport reverse NAT handling.\n  bpf-lb-external-clusterip: \"false\"\n\n  # Pre-allocation of map entries allows per-packet latency to be reduced, at\n  # the expense of up-front memory allocation for the entries in the maps. The\n  # default value below will minimize memory usage in the default installation;\n  # users who are sensitive to latency may consider setting this to \"true\".\n  #\n  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore\n  # this option and behave as though it is set to \"true\".\n  #\n  # If this value is modified, then during the next Cilium startup the restore\n  # of existing endpoints and tracking of ongoing connections may be disrupted.\n  # As a result, reply packets may be dropped and the load-balancing decisions\n  # for established connections may change.\n  #\n  # If this option is set to \"false\" during an upgrade from 1.3 or earlier to\n  # 1.4 or later, then it may cause one-time disruptions during the upgrade.\n  preallocate-bpf-maps: \"false\"\n\n  # Regular expression matching compatible Istio sidecar istio-proxy\n  # container image names\n  sidecar-istio-proxy-image: \"cilium/istio_proxy\"\n\n  # Name of the cluster. Only relevant when building a mesh of clusters.\n  cluster-name: default\n  # Unique ID of the cluster. Must be unique across all conneted clusters and\n  # in the range of 1 and 255. Only relevant when building a mesh of clusters.\n  cluster-id: \"0\"\n\n  # Encapsulation mode for communication between nodes\n  # Possible values:\n  #   - disabled\n  #   - vxlan (default)\n  #   - geneve\n  tunnel: \"vxlan\"\n  # Enables L7 proxy for L7 policy enforcement and visibility\n  enable-l7-proxy: \"true\"\n\n  enable-ipv4-masquerade: \"true\"\n  enable-ipv6-masquerade: \"true\"\n\n  enable-xt-socket-fallback: \"true\"\n  install-iptables-rules: \"true\"\n  install-no-conntrack-iptables-rules: \"false\"\n\n  auto-direct-node-routes: \"false\"\n  enable-local-redirect-policy: \"false\"\n\n  kube-proxy-replacement: \"disabled\"\n  bpf-lb-sock: \"false\"\n  enable-health-check-nodeport: \"true\"\n  node-port-bind-protection: \"true\"\n  enable-auto-protect-node-port-range: \"true\"\n  enable-svc-source-range-check: \"true\"\n  enable-l2-neigh-discovery: \"true\"\n  arping-refresh-period: \"30s\"\n  enable-endpoint-health-checking: \"true\"\n  enable-health-checking: \"true\"\n  enable-well-known-identities: \"false\"\n  enable-remote-node-identity: \"true\"\n  synchronize-k8s-nodes: \"true\"\n  operator-api-serve-addr: \"127.0.0.1:9234\"\n  # Enable Hubble gRPC service.\n  enable-hubble: \"true\"\n  # UNIX domain socket for Hubble server to listen to.\n  hubble-socket-path: \"/var/run/cilium/hubble.sock\"\n  # An additional address for Hubble server to listen to (e.g. \":4244\").\n  hubble-listen-address: \":4244\"\n  hubble-disable-tls: \"false\"\n  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt\n  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key\n  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt\n  ipam: \"cluster-pool\"\n  cluster-pool-ipv4-cidr: \"10.0.0.0/8\"\n  cluster-pool-ipv4-mask-size: \"24\"\n  disable-cnp-status-updates: \"true\"\n  enable-vtep: \"false\"\n  vtep-endpoint: \"\"\n  vtep-cidr: \"\"\n  vtep-mask: \"\"\n  vtep-mac: \"\"\n  enable-bgp-control-plane: \"false\"\n  procfs: \"/host/proc\"\n  bpf-root: \"/sys/fs/bpf\"\n  cgroup-root: \"/run/cilium/cgroupv2\"\n  enable-k8s-terminating-endpoint: \"true\"\n  remove-cilium-node-taints: \"true\"\n  set-cilium-is-up-condition: \"true\"\n  unmanaged-pod-watcher-interval: \"15\"\n  tofqdns-dns-reject-response-code: \"refused\"\n  tofqdns-enable-dns-compression: \"true\"\n  tofqdns-endpoint-max-ip-per-hostname: \"50\"\n  tofqdns-idle-connection-grace-period: \"0s\"\n  tofqdns-max-deferred-connection-deletes: \"10000\"\n  tofqdns-min-ttl: \"3600\"\n  tofqdns-proxy-response-max-delay: \"100ms\"\n  agent-not-ready-taint-key: \"node.cilium.io/agent-not-ready\"\n---\n# Source: cilium/templates/cilium-agent/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium\nrules:\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  - services\n  - pods\n  - endpoints\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - list\n  - watch\n  # This is used when validating policies in preflight. This will need to stay\n  # until we figure out how to avoid \"get\" inside the preflight, and then\n  # should be removed ideally.\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumbgploadbalancerippools\n  - ciliumbgppeeringpolicies\n  - ciliumclusterwideenvoyconfigs\n  - ciliumclusterwidenetworkpolicies\n  - ciliumegressgatewaypolicies\n  - ciliumegressnatpolicies\n  - ciliumendpoints\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  - ciliumidentities\n  - ciliumlocalredirectpolicies\n  - ciliumnetworkpolicies\n  - ciliumnodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  - ciliumendpoints\n  - ciliumnodes\n  verbs:\n  - create\n- apiGroups:\n  - cilium.io\n  # To synchronize garbage collection of such resources\n  resources:\n  - ciliumidentities\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  verbs:\n  - delete\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  - ciliumnodes/status\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  - ciliumendpoints/status\n  - ciliumendpoints\n  verbs:\n  - patch\n---\n# Source: cilium/templates/cilium-operator/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium-operator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n  - list\n  - watch\n  # to automatically delete [core|kube]dns pods so that are starting to being\n  # managed by Cilium\n  - delete\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # To remove node taints\n  - nodes\n  # To set NetworkUnavailable false on startup\n  - nodes/status\n  verbs:\n  - patch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform LB IP allocation for BGP\n  - services/status\n  verbs:\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  # to check apiserver connectivity\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform the translation of a CNP that contains `ToGroup` to its endpoints\n  - services\n  - endpoints\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies\n  - ciliumclusterwidenetworkpolicies\n  verbs:\n  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'\n  - create\n  - update\n  - deletecollection\n  # To update the status of the CNPs and CCNPs\n  - patch\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  verbs:\n  # Update the auto-generated CNPs and CCNPs status.\n  - patch\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  - ciliumidentities\n  verbs:\n  # To perform garbage collection of such resources\n  - delete\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  verbs:\n  # To synchronize garbage collection of such resources\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n    # To perform CiliumNode garbage collector\n  - delete\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes/status\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n  - delete\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - create\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - update\n  resourceNames:\n  - ciliumbgploadbalancerippools.cilium.io\n  - ciliumbgppeeringpolicies.cilium.io\n  - ciliumclusterwideenvoyconfigs.cilium.io\n  - ciliumclusterwidenetworkpolicies.cilium.io\n  - ciliumegressgatewaypolicies.cilium.io\n  - ciliumegressnatpolicies.cilium.io\n  - ciliumendpoints.cilium.io\n  - ciliumendpointslices.cilium.io\n  - ciliumenvoyconfigs.cilium.io\n  - ciliumexternalworkloads.cilium.io\n  - ciliumidentities.cilium.io\n  - ciliumlocalredirectpolicies.cilium.io\n  - ciliumnetworkpolicies.cilium.io\n  - ciliumnodes.cilium.io\n# For cilium-operator running in HA mode.\n#\n# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election\n# between multiple running instances.\n# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less\n# common and fewer objects in the cluster watch \"all Leases\".\n- apiGroups:\n  - coordination.k8s.io\n  resources:\n  - leases\n  verbs:\n  - create\n  - get\n  - update\n---\n# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium-operator\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium-operator\"\n  namespace: kube-system\n---\n# Source: cilium/templates/hubble/peer-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: hubble-peer\n  namespace: kube-system\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    k8s-app: cilium\n  ports:\n  - name: peer-service\n    port: 443\n    protocol: TCP\n    targetPort: 4244\n  internalTrafficPolicy: Local\n---\n# Source: cilium/templates/cilium-agent/daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cilium\n  namespace: kube-system\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    matchLabels:\n      k8s-app: cilium\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 2\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # Set app AppArmor's profile to \"unconfined\". The value of this annotation\n        # can be modified as long users know which profiles they have available\n        # in AppArmor.\n        container.apparmor.security.beta.kubernetes.io/cilium-agent: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/mount-cgroup: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: \"unconfined\"\n      labels:\n        k8s-app: cilium\n    spec:\n      containers:\n      - name: cilium-agent\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-agent\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        startupProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          failureThreshold: 105\n          periodSeconds: 2\n          successThreshold: 1\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 3\n          timeoutSeconds: 5\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_CLUSTERMESH_CONFIG\n          value: /var/lib/cilium/clustermesh/\n        - name: CILIUM_CNI_CHAINING_MODE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: cni-chaining-mode\n              optional: true\n        - name: CILIUM_CUSTOM_CNI_CONF\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: custom-cni-conf\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        lifecycle:\n          postStart:\n            exec:\n              command:\n              - \"/cni-install.sh\"\n              - \"--enable-debug=false\"\n              - \"--cni-exclusive=true\"\n              - \"--log-file=/var/run/cilium/cilium-cni.log\"\n          preStop:\n            exec:\n              command:\n              - /cni-uninstall.sh\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            add:\n              # Use to set socket permission\n              - CHOWN\n              # Used to terminate envoy child process\n              - KILL\n              # Used since cilium modifies routing tables, etc...\n              - NET_ADMIN\n              # Used since cilium creates raw sockets, etc...\n              - NET_RAW\n              # Used since cilium monitor uses mmap\n              - IPC_LOCK\n              # Used in iptables. Consider removing once we are iptables-free\n              - SYS_MODULE\n              # We need it for now but might not need it for \u003e= 5.11 specially\n              # for the 'SYS_RESOURCE'.\n              # In \u003e= 5.8 there's already BPF and PERMON capabilities\n              - SYS_ADMIN\n              # Could be an alternative for the SYS_ADMIN for the RLIMIT_NPROC\n              - SYS_RESOURCE\n              # Both PERFMON and BPF requires kernel 5.8, container runtime\n              # cri-o \u003e= v1.22.0 or containerd \u003e= v1.5.0.\n              # If available, SYS_ADMIN can be removed.\n              #- PERFMON\n              #- BPF\n              - DAC_OVERRIDE\n              - FOWNER\n              - SETGID\n              - SETUID\n            drop:\n              - ALL\n        terminationMessagePolicy: FallbackToLogsOnError\n        volumeMounts:\n        # Unprivileged containers need to mount /proc/sys/net from the host\n        # to have write access\n        - mountPath: /host/proc/sys/net\n          name: host-proc-sys-net\n        # Unprivileged containers need to mount /proc/sys/kernel from the host\n        # to have write access\n        - mountPath: /host/proc/sys/kernel\n          name: host-proc-sys-kernel\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Unprivileged containers can't set mount propagation to bidirectional\n          # in this case we will mount the bpf fs from an init container that\n          # is privileged and set the mount propagation from host to container\n          # in Cilium.\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        - name: cni-path\n          mountPath: /host/opt/cni/bin\n        - name: etc-cni-netd\n          mountPath: /host/etc/cni/net.d\n        - name: clustermesh-secrets\n          mountPath: /var/lib/cilium/clustermesh\n          readOnly: true\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n          # Needed to be able to load kernel modules\n        - name: lib-modules\n          mountPath: /lib/modules\n          readOnly: true\n        - name: xtables-lock\n          mountPath: /run/xtables.lock\n        - name: hubble-tls\n          mountPath: /var/lib/cilium/tls/hubble\n          readOnly: true\n      initContainers:\n      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.\n      # We use nsenter command with host's cgroup and mount namespaces enabled.\n      - name: mount-cgroup\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: CGROUP_ROOT\n          value: /run/cilium/cgroupv2\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh and mount that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-mount /hostbin/cilium-mount;\n          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt \"${BIN_PATH}/cilium-mount\" $CGROUP_ROOT;\n          rm /hostbin/cilium-mount\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            drop:\n              - ALL\n            add:\n              # Only used for 'mount' cgroup\n              - SYS_ADMIN\n              # Used for nsenter\n              - SYS_CHROOT\n              - SYS_PTRACE\n      - name: apply-sysctl-overwrites\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;\n          nsenter --mount=/hostproc/1/ns/mnt \"${BIN_PATH}/cilium-sysctlfix\";\n          rm /hostbin/cilium-sysctlfix\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            drop:\n              - ALL\n            add:\n              # Required in order to access host's /etc/sysctl.d dir\n              - SYS_ADMIN\n              # Used for nsenter\n              - SYS_CHROOT\n              - SYS_PTRACE\n      # Mount the bpf fs if it is not mounted. We will perform this task\n      # from a privileged container because the mount propagation bidirectional\n      # only works from privileged containers.\n      - name: mount-bpf-fs\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        args:\n        - 'mount | grep \"/sys/fs/bpf type bpf\" || mount -t bpf bpf /sys/fs/bpf'\n        command:\n        - /bin/bash\n        - -c\n        - --\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          mountPropagation: Bidirectional\n      - name: clean-cilium-state\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - /init-container.sh\n        env:\n          - name: CILIUM_ALL_STATE\n            valueFrom:\n              configMapKeyRef:\n                name: cilium-config\n                key: clean-cilium-state\n                optional: true\n          - name: CILIUM_BPF_STATE\n            valueFrom:\n              configMapKeyRef:\n                name: cilium-config\n                key: clean-cilium-bpf-state\n                optional: true\n          - name: KUBERNETES_SERVICE_HOST\n            value: \"172.18.2.252\"\n          - name: KUBERNETES_SERVICE_PORT\n            value: \"6443\"\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            # Most of the capabilities here are the same ones used in the\n            # cilium-agent's container because this container can be used to\n            # uninstall all Cilium resources, and therefore it is likely that\n            # will need the same capabilities.\n            add:\n              # Used since cilium modifies routing tables, etc...\n              - NET_ADMIN\n              # Used in iptables. Consider removing once we are iptables-free\n              - SYS_MODULE\n              # We need it for now but might not need it for \u003e= 5.11 specially\n              # for the 'SYS_RESOURCE'.\n              # In \u003e= 5.8 there's already BPF and PERMON capabilities\n              - SYS_ADMIN\n              # Could be an alternative for the SYS_ADMIN for the RLIMIT_NPROC\n              - SYS_RESOURCE\n              # Both PERFMON and BPF requires kernel 5.8, container runtime\n              # cri-o \u003e= v1.22.0 or containerd \u003e= v1.5.0.\n              # If available, SYS_ADMIN can be removed.\n              #- PERFMON\n              #- BPF\n            drop:\n              - ALL\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Required to mount cgroup filesystem from the host to cilium agent pod\n        - name: cilium-cgroup\n          mountPath: /run/cilium/cgroupv2\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi # wait-for-kube-proxy\n      restartPolicy: Always\n      priorityClassName: system-node-critical\n      serviceAccount: \"cilium\"\n      serviceAccountName: \"cilium\"\n      terminationGracePeriodSeconds: 1\n      hostNetwork: true\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                k8s-app: cilium\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To keep state between restarts / upgrades\n      - name: cilium-run\n        hostPath:\n          path: /var/run/cilium\n          type: DirectoryOrCreate\n        # To keep state between restarts / upgrades for bpf maps\n      - name: bpf-maps\n        hostPath:\n          path: /sys/fs/bpf\n          type: DirectoryOrCreate\n      # To mount cgroup2 filesystem on the host\n      - name: hostproc\n        hostPath:\n          path: /proc\n          type: Directory\n      # To keep state between restarts / upgrades for cgroup2 filesystem\n      - name: cilium-cgroup\n        hostPath:\n          path: /run/cilium/cgroupv2\n          type: DirectoryOrCreate\n      # To install cilium cni plugin in the host\n      - name: cni-path\n        hostPath:\n          path:  /opt/cni/bin\n          type: DirectoryOrCreate\n        # To install cilium cni configuration in the host\n      - name: etc-cni-netd\n        hostPath:\n          path: /etc/cni/net.d\n          type: DirectoryOrCreate\n        # To be able to load kernel modules\n      - name: lib-modules\n        hostPath:\n          path: /lib/modules\n        # To access iptables concurrently with other processes (e.g. kube-proxy)\n      - name: xtables-lock\n        hostPath:\n          path: /run/xtables.lock\n          type: FileOrCreate\n        # To read the clustermesh configuration\n      - name: clustermesh-secrets\n        secret:\n          secretName: cilium-clustermesh\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          optional: true\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n      - name: host-proc-sys-net\n        hostPath:\n          path: /proc/sys/net\n          type: Directory\n      - name: host-proc-sys-kernel\n        hostPath:\n          path: /proc/sys/kernel\n          type: Directory\n      - name: hubble-tls\n        projected:\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          sources:\n          - secret:\n              name: hubble-server-certs\n              optional: true\n              items:\n              - key: ca.crt\n                path: client-ca.crt\n              - key: tls.crt\n                path: server.crt\n              - key: tls.key\n                path: server.key\n---\n# Source: cilium/templates/cilium-operator/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cilium-operator\n  namespace: kube-system\n  labels:\n    io.cilium/app: operator\n    name: cilium-operator\nspec:\n  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go\n  # for more details.\n  replicas: 2\n  selector:\n    matchLabels:\n      io.cilium/app: operator\n      name: cilium-operator\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n      labels:\n        io.cilium/app: operator\n        name: cilium-operator\n    spec:\n      containers:\n      - name: cilium-operator\n        image: \"quay.io/cilium/operator-generic:v1.12.4@sha256:071089ec5bca1f556afb8e541d9972a0dfb09d1e25504ae642ced021ecbedbd1\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-operator-generic\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        - --debug=$(CILIUM_DEBUG)\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              key: debug\n              name: cilium-config\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"172.18.2.252\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9234\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          timeoutSeconds: 3\n        volumeMounts:\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n        terminationMessagePolicy: FallbackToLogsOnError\n      hostNetwork: true\n      restartPolicy: Always\n      priorityClassName: system-cluster-critical\n      serviceAccount: \"cilium-operator\"\n      serviceAccountName: \"cilium-operator\"\n      # In HA mode, cilium-operator pods must not be scheduled on the same\n      # node as they will clash with each other.\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                io.cilium/app: operator\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n",
            "template": "---\n# Source: cilium/templates/cilium-agent/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-operator/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: \"cilium-operator\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-ca-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cilium-ca\n  namespace: kube-system\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTjZOTVhwUXNtaTc3Q2F1SFZLNW1xakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qRXlOak0wV2hjTk1qVXhNakExTWpFeQpOak0wV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzU0eDFkcUtBa3NJSXQwdG14LytJZzRCS3EwQ1BSWVBiMjdXbkF3RkFEay91WnFhQzMKL1NHL0tsNlRMaFk2WHR1NU1KWmJTY2J2ZW5IUXlmSGt4aW9lVlVXSk9MSUJNLzNWVlp4SEt6L0xudGp6L0E1cQo2WE0wSEZNcUpaQzRoRUFwY3FCcXJwa0c5Nnk3bCtyM3JWMkExbnJQVForV05ObU5GU0R0YnBmQzVvUzNQRXhBCms5dFVSTE5FVVZnQ3NmeWlYZmYydVRuZ2c0Y2xJK3dtYVF0U29LdFhwTnlwbFYzc3EyUW8wQnBjV3ZkMTV1S1cKaDcyTjh6VU9tL2NUenJXZXM1Ni9OWmhLV3lFZzhZNWp3U2N2UGtkRjNLaGkzQ25xZi9FeGh2b3dnZXFqY3BJZQp4WWp4Z01vUisyTkNSQWtWT0x4KzRzclB3VFdVMEV3Ykp3S3BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVqaVA5cm5Ga0pEc0QrZ3pRL3E2NGFxK1A1aWd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGbnlnTUd5cE00ZVRPZE1UcG9WZ09aRHRPOWVKS2RFYnpHVmlqUWFHbXJkUWtDVkNlSDdQSEdzCmJBaHljM2E1YnkvdWpCMUpQR0ZuN2FGZm92SC9hWjZXMjVuSlU5NmphUzQrUXNMQ3hNRmRtK3JXeFlncnljY00KTjVNNXRLOFNRbkZzVjlpT2tSY3RJWlBmeWNjN00xMG9aelNzbnhnekd4cXQyYjZwQlBkOTZSS0l4eFhnQWcwWQptUFpJQ3ZGb1NhYW1xS0xrWVpqbFAybTlRNUdHdjViN1kxb2FydGt5ZE53YW1jdU1NekcxYWx2Z3FqcnlrTkVBCndmL0txN2FCUEtObENySjErek1zbHd2ZWV6dE8zWThjc1ZNZUVIMHplZHd1MGpRcm05R0JDMjF0QnpucG14OVgKSEtpUmttR3JzN1pOTGlJd29XSFF6WUQyN2hISnJZOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdWVNZFhhaWdKTENDTGRMWnNmL2lJT0FTcXRBajBXRDI5dTFwd01CUUE1UDdtYW1nCnQvMGh2eXBla3k0V09sN2J1VENXVzBuRzczcHgwTW54NU1ZcUhsVkZpVGl5QVRQOTFWV2NSeXMveTU3WTgvd08KYXVsek5CeFRLaVdRdUlSQUtYS2dhcTZaQnZlc3U1ZnE5NjFkZ05aNnowMmZsalRaalJVZzdXNlh3dWFFdHp4TQpRSlBiVkVTelJGRllBckg4b2wzMzlyazU0SU9ISlNQc0pta0xVcUNyVjZUY3FaVmQ3S3RrS05BYVhGcjNkZWJpCmxvZTlqZk0xRHB2M0U4NjFuck9ldnpXWVNsc2hJUEdPWThFbkx6NUhSZHlvWXR3cDZuL3hNWWI2TUlIcW8zS1MKSHNXSThZREtFZnRqUWtRSkZUaThmdUxLejhFMWxOQk1HeWNDcVFJREFRQUJBb0lCQUFHbEpPbGpTS2VLZUZ4MwpkVDNDQ2ZwSWdXSEpuY2VJbUNidlN2Uk52MmVJczcxVVp2dTUzY2FYVldid0RYcE94SnNLOXdtdnlYYnRHbnpDCmpNVjlpM25oUDFCTGxDZTJraFNGUVhEUHpTeThKeWRobjY4S2lkNTRNYlE1eU9JWktZZzBYMzhTTklCL1NLUVEKWUIvNUJNN1RGeHNta0xiL21MMUs1cE96V3R4NnNlZEFiM2dGVzRIMjRUQUJ4NTFkODZlTWdyNUcxZDVKNndodgpWWlVJamg3TU5wQnpiNW1zemhseEtJcW5CUXNad0pGaTAxRmVqeWJzNDdjNUdIR2tkOGQ3bURxcXllcmJpaWg2Cm9kOEF6UkR5WTJiNk8vVGZXM3ZRQ1YzOU0xMEIwbHE0KzVIK1g3bFJuUFhLVFdvQkUvWTJ3VFU3T1Y2dENDODAKdnBaYTJGRUNnWUVBOUNMZmFVZ3UrRmcwTmdZNWxRWkljaHdVTGRueHorcUxtNTQ0cGVUbGJ5dHlJTGxtckxveApNZFYzNVdpWDhFKzRGaWNBQkRpb0RKd1A3LzVZbjVFT2dpNmcvcmNzS1BzZm5PS2tPQkNPWit5U2tVMVgzNTZaCjRIdUMxVlhxMzVBTEd3UWwrNmRkQ1BxVjFtR0xnWXhIc0tBZlloTkU5UEEyTG50eUlaWEhFczhDZ1lFQXd1dWIKUHBObEdEL2RxZDgxOFVRYmFGRS84MEVvZEE3SHF1NEtLZGhudkRmT21qYjF4MGQ4L1RJQzgxdkhUakI2YTJZZgpEZk1kUVEvaUdxUTFYVjFGd0xOd1V4Mm9Fc2FrLzlKQnRQRHFWSTdVS2VSZ0xjdWZzN3NlSWdhZFJjcFFRR0FJCmZHOTg3WS90ZWlIQmNsa1VNZTI0Z1VTVm9CR3UxMU00VEhhZVVRY0NnWUJNcnJ0dnpVMTdrZkRzV3k0eEFlVTEKZWw1WVBKRzRsZG8rQ2dlUERBT0kxS09uWmJTN1lreGJjOHFTRXpWT05Td0VRVUcvRWJDdkxVSFFSeHE5SEFucgptQXZYbGQ5WUMvRFZEVmM1aVBIQjhNdmt1ZDkxRE5NV2NKVWF2ejdqODlHWkxjZGtjU0JHMXJiRHZLWGVEaHJpCmZwajg3RUtIa1AvanY4Q01qZ2dXZndLQmdCN1NXS01GZFpmbkNXc0NFNnFKNVhlU1dYVmltVDM0MUZQUC9pVnQKeGNGNlpaMzNFTmdwRXJlS3YvS3hVWXVvbU1NQXkrcE54aE55cW9NaDhocElWRzVMTVhqREdMK1hUNkh3SWxtMQpPcWlTU1RReW00N0NRd2VOa0E4N1VvVWxuNWorVm5rdXUrZG91ZGwxR3Z5MDN6K2g0bW4yYVY1OVRWTlpJbTdjCjF0M2pBb0dBRUhsY05LLzZKdmVrVkpYbi9VblNPeVNSdyt1M0hjWmZPekVJcjJlM2RJVHRRM0xWWDNRRnlkMysKNXd0SjZBRGVCV1VmM0NCT21ldDBkdURsb2RLVTlpRmd1WnRoMDRDb1c0ZE1odTdJVUxCVTVObnR2aENYTTRYRAptMmtGbGQzczY3OTFlZFhVUldSZ2tRWXdFbEY5MzVjTEpxSEJIT2t6Q2dHbWZXVTdjQUE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n---\n# Source: cilium/templates/hubble/tls-helm/ca-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: hubble-ca-secret\n  namespace: kube-system\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTjZOTVhwUXNtaTc3Q2F1SFZLNW1xakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qRXlOak0wV2hjTk1qVXhNakExTWpFeQpOak0wV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzU0eDFkcUtBa3NJSXQwdG14LytJZzRCS3EwQ1BSWVBiMjdXbkF3RkFEay91WnFhQzMKL1NHL0tsNlRMaFk2WHR1NU1KWmJTY2J2ZW5IUXlmSGt4aW9lVlVXSk9MSUJNLzNWVlp4SEt6L0xudGp6L0E1cQo2WE0wSEZNcUpaQzRoRUFwY3FCcXJwa0c5Nnk3bCtyM3JWMkExbnJQVForV05ObU5GU0R0YnBmQzVvUzNQRXhBCms5dFVSTE5FVVZnQ3NmeWlYZmYydVRuZ2c0Y2xJK3dtYVF0U29LdFhwTnlwbFYzc3EyUW8wQnBjV3ZkMTV1S1cKaDcyTjh6VU9tL2NUenJXZXM1Ni9OWmhLV3lFZzhZNWp3U2N2UGtkRjNLaGkzQ25xZi9FeGh2b3dnZXFqY3BJZQp4WWp4Z01vUisyTkNSQWtWT0x4KzRzclB3VFdVMEV3Ykp3S3BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVqaVA5cm5Ga0pEc0QrZ3pRL3E2NGFxK1A1aWd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGbnlnTUd5cE00ZVRPZE1UcG9WZ09aRHRPOWVKS2RFYnpHVmlqUWFHbXJkUWtDVkNlSDdQSEdzCmJBaHljM2E1YnkvdWpCMUpQR0ZuN2FGZm92SC9hWjZXMjVuSlU5NmphUzQrUXNMQ3hNRmRtK3JXeFlncnljY00KTjVNNXRLOFNRbkZzVjlpT2tSY3RJWlBmeWNjN00xMG9aelNzbnhnekd4cXQyYjZwQlBkOTZSS0l4eFhnQWcwWQptUFpJQ3ZGb1NhYW1xS0xrWVpqbFAybTlRNUdHdjViN1kxb2FydGt5ZE53YW1jdU1NekcxYWx2Z3FqcnlrTkVBCndmL0txN2FCUEtObENySjErek1zbHd2ZWV6dE8zWThjc1ZNZUVIMHplZHd1MGpRcm05R0JDMjF0QnpucG14OVgKSEtpUmttR3JzN1pOTGlJd29XSFF6WUQyN2hISnJZOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdWVNZFhhaWdKTENDTGRMWnNmL2lJT0FTcXRBajBXRDI5dTFwd01CUUE1UDdtYW1nCnQvMGh2eXBla3k0V09sN2J1VENXVzBuRzczcHgwTW54NU1ZcUhsVkZpVGl5QVRQOTFWV2NSeXMveTU3WTgvd08KYXVsek5CeFRLaVdRdUlSQUtYS2dhcTZaQnZlc3U1ZnE5NjFkZ05aNnowMmZsalRaalJVZzdXNlh3dWFFdHp4TQpRSlBiVkVTelJGRllBckg4b2wzMzlyazU0SU9ISlNQc0pta0xVcUNyVjZUY3FaVmQ3S3RrS05BYVhGcjNkZWJpCmxvZTlqZk0xRHB2M0U4NjFuck9ldnpXWVNsc2hJUEdPWThFbkx6NUhSZHlvWXR3cDZuL3hNWWI2TUlIcW8zS1MKSHNXSThZREtFZnRqUWtRSkZUaThmdUxLejhFMWxOQk1HeWNDcVFJREFRQUJBb0lCQUFHbEpPbGpTS2VLZUZ4MwpkVDNDQ2ZwSWdXSEpuY2VJbUNidlN2Uk52MmVJczcxVVp2dTUzY2FYVldid0RYcE94SnNLOXdtdnlYYnRHbnpDCmpNVjlpM25oUDFCTGxDZTJraFNGUVhEUHpTeThKeWRobjY4S2lkNTRNYlE1eU9JWktZZzBYMzhTTklCL1NLUVEKWUIvNUJNN1RGeHNta0xiL21MMUs1cE96V3R4NnNlZEFiM2dGVzRIMjRUQUJ4NTFkODZlTWdyNUcxZDVKNndodgpWWlVJamg3TU5wQnpiNW1zemhseEtJcW5CUXNad0pGaTAxRmVqeWJzNDdjNUdIR2tkOGQ3bURxcXllcmJpaWg2Cm9kOEF6UkR5WTJiNk8vVGZXM3ZRQ1YzOU0xMEIwbHE0KzVIK1g3bFJuUFhLVFdvQkUvWTJ3VFU3T1Y2dENDODAKdnBaYTJGRUNnWUVBOUNMZmFVZ3UrRmcwTmdZNWxRWkljaHdVTGRueHorcUxtNTQ0cGVUbGJ5dHlJTGxtckxveApNZFYzNVdpWDhFKzRGaWNBQkRpb0RKd1A3LzVZbjVFT2dpNmcvcmNzS1BzZm5PS2tPQkNPWit5U2tVMVgzNTZaCjRIdUMxVlhxMzVBTEd3UWwrNmRkQ1BxVjFtR0xnWXhIc0tBZlloTkU5UEEyTG50eUlaWEhFczhDZ1lFQXd1dWIKUHBObEdEL2RxZDgxOFVRYmFGRS84MEVvZEE3SHF1NEtLZGhudkRmT21qYjF4MGQ4L1RJQzgxdkhUakI2YTJZZgpEZk1kUVEvaUdxUTFYVjFGd0xOd1V4Mm9Fc2FrLzlKQnRQRHFWSTdVS2VSZ0xjdWZzN3NlSWdhZFJjcFFRR0FJCmZHOTg3WS90ZWlIQmNsa1VNZTI0Z1VTVm9CR3UxMU00VEhhZVVRY0NnWUJNcnJ0dnpVMTdrZkRzV3k0eEFlVTEKZWw1WVBKRzRsZG8rQ2dlUERBT0kxS09uWmJTN1lreGJjOHFTRXpWT05Td0VRVUcvRWJDdkxVSFFSeHE5SEFucgptQXZYbGQ5WUMvRFZEVmM1aVBIQjhNdmt1ZDkxRE5NV2NKVWF2ejdqODlHWkxjZGtjU0JHMXJiRHZLWGVEaHJpCmZwajg3RUtIa1AvanY4Q01qZ2dXZndLQmdCN1NXS01GZFpmbkNXc0NFNnFKNVhlU1dYVmltVDM0MUZQUC9pVnQKeGNGNlpaMzNFTmdwRXJlS3YvS3hVWXVvbU1NQXkrcE54aE55cW9NaDhocElWRzVMTVhqREdMK1hUNkh3SWxtMQpPcWlTU1RReW00N0NRd2VOa0E4N1VvVWxuNWorVm5rdXUrZG91ZGwxR3Z5MDN6K2g0bW4yYVY1OVRWTlpJbTdjCjF0M2pBb0dBRUhsY05LLzZKdmVrVkpYbi9VblNPeVNSdyt1M0hjWmZPekVJcjJlM2RJVHRRM0xWWDNRRnlkMysKNXd0SjZBRGVCV1VmM0NCT21ldDBkdURsb2RLVTlpRmd1WnRoMDRDb1c0ZE1odTdJVUxCVTVObnR2aENYTTRYRAptMmtGbGQzczY3OTFlZFhVUldSZ2tRWXdFbEY5MzVjTEpxSEJIT2t6Q2dHbWZXVTdjQUE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n---\n# Source: cilium/templates/hubble/tls-helm/server-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: hubble-server-certs\n  namespace: kube-system\ntype: kubernetes.io/tls\ndata:\n  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTjZOTVhwUXNtaTc3Q2F1SFZLNW1xakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qRXlOak0wV2hjTk1qVXhNakExTWpFeQpOak0wV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzU0eDFkcUtBa3NJSXQwdG14LytJZzRCS3EwQ1BSWVBiMjdXbkF3RkFEay91WnFhQzMKL1NHL0tsNlRMaFk2WHR1NU1KWmJTY2J2ZW5IUXlmSGt4aW9lVlVXSk9MSUJNLzNWVlp4SEt6L0xudGp6L0E1cQo2WE0wSEZNcUpaQzRoRUFwY3FCcXJwa0c5Nnk3bCtyM3JWMkExbnJQVForV05ObU5GU0R0YnBmQzVvUzNQRXhBCms5dFVSTE5FVVZnQ3NmeWlYZmYydVRuZ2c0Y2xJK3dtYVF0U29LdFhwTnlwbFYzc3EyUW8wQnBjV3ZkMTV1S1cKaDcyTjh6VU9tL2NUenJXZXM1Ni9OWmhLV3lFZzhZNWp3U2N2UGtkRjNLaGkzQ25xZi9FeGh2b3dnZXFqY3BJZQp4WWp4Z01vUisyTkNSQWtWT0x4KzRzclB3VFdVMEV3Ykp3S3BBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVqaVA5cm5Ga0pEc0QrZ3pRL3E2NGFxK1A1aWd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGbnlnTUd5cE00ZVRPZE1UcG9WZ09aRHRPOWVKS2RFYnpHVmlqUWFHbXJkUWtDVkNlSDdQSEdzCmJBaHljM2E1YnkvdWpCMUpQR0ZuN2FGZm92SC9hWjZXMjVuSlU5NmphUzQrUXNMQ3hNRmRtK3JXeFlncnljY00KTjVNNXRLOFNRbkZzVjlpT2tSY3RJWlBmeWNjN00xMG9aelNzbnhnekd4cXQyYjZwQlBkOTZSS0l4eFhnQWcwWQptUFpJQ3ZGb1NhYW1xS0xrWVpqbFAybTlRNUdHdjViN1kxb2FydGt5ZE53YW1jdU1NekcxYWx2Z3FqcnlrTkVBCndmL0txN2FCUEtObENySjErek1zbHd2ZWV6dE8zWThjc1ZNZUVIMHplZHd1MGpRcm05R0JDMjF0QnpucG14OVgKSEtpUmttR3JzN1pOTGlJd29XSFF6WUQyN2hISnJZOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURWakNDQWo2Z0F3SUJBZ0lRUXhObnJUMTQ1QXlMNXBZeXFyYjZOekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nakl4TWpBMk1qRXlOak0xV2hjTk1qVXhNakExTWpFeQpOak0xV2pBcU1TZ3dKZ1lEVlFRRERCOHFMbVJsWm1GMWJIUXVhSFZpWW14bExXZHljR011WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBenB2WjVVaWJqOXFGd0l4Rzd0YXMKNThSZjlKWHhEK1pSNjFKZmZmWGQ5cTJmUWJuMmV2QVVJYTQxZW5QbzJLSk5NTnZNZGNMRzA1NGcyZmF4YmVxQgpsRWN6VVdFRWRWK2lsWURraFBWQzM4b3lnZExhUVZuNSt0YUxLMzBMVFhzNlI5NzVHZTNONGFiTThEVkZDVkFZCmp4NDJZUU9VUUFGYXY1M2tmcjJRYTg4MGg4VFFHYk04NTBmbys5Mnl2WG9pU1Zta0xJRGM0NE5YbjN1cW9lZk8KazNsOThWYktmVWQ0VTVtYTlHWXFnN1hyNDRmRGN1b2ZtbTBQNnBIdGtVMnhrWGh0RDI4UmdEU0Jnb1FvNmpuOAp0akhYN0JxZWliODMza3ZkdVVZbzRWbGZOcXdvQS9EcDU3SU9XQkZRa1ZQZGRCYWdCUFdSV2JPd0REZFdvZjlaClhRSURBUUFCbzRHTk1JR0tNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTT0kvMnVjV1FrT3dQNgpETkQrcnJocXI0L21LREFxQmdOVkhSRUVJekFoZ2g4cUxtUmxabUYxYkhRdWFIVmlZbXhsTFdkeWNHTXVZMmxzCmFYVnRMbWx2TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCNlQ0NFhqM3M3OHROVWxSRVlDK2xTTkl4eXJrcUYKSXVsSCs4d3BLY0svc05WMWxqZVlveXFqQUUyNGJOMDJxRnVNWXZWM09QZjNhYmxSQ3lzSDdqamlzTHY3OWU1SgpKdHNldlgwakY5amt2bm5TWnJoYnptUG9QMTFJYXhvellMQ054SlBCVjFRTmtWTkZQRlJ2NFdZT1R6WFNrWmJlCmx0SGV3TUtJT2xyRGlWWlc2b04wNEw3T0RkNTRaeDNZRXpzTWkzeVdlRFpDcmNZOFUvMnVtSldKbFB5WXJ5c1AKd1RNcnNCbVY0T2tiNlVvYzBiUVIwdzhqRnlLRGRMNS9LVVJaRzlERDN0Q0kxVUp1bmJub3JpSUdyV2Q0clFMRQpwMG0yS240cUNEZkg4NW1sSEZaYnMxU1dVZFQ5WkFnemNsNkx3RDR2STZLM1p4OHZMcTNDU05TZwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBenB2WjVVaWJqOXFGd0l4Rzd0YXM1OFJmOUpYeEQrWlI2MUpmZmZYZDlxMmZRYm4yCmV2QVVJYTQxZW5QbzJLSk5NTnZNZGNMRzA1NGcyZmF4YmVxQmxFY3pVV0VFZFYraWxZRGtoUFZDMzhveWdkTGEKUVZuNSt0YUxLMzBMVFhzNlI5NzVHZTNONGFiTThEVkZDVkFZang0MllRT1VRQUZhdjUza2ZyMlFhODgwaDhUUQpHYk04NTBmbys5Mnl2WG9pU1Zta0xJRGM0NE5YbjN1cW9lZk9rM2w5OFZiS2ZVZDRVNW1hOUdZcWc3WHI0NGZECmN1b2ZtbTBQNnBIdGtVMnhrWGh0RDI4UmdEU0Jnb1FvNmpuOHRqSFg3QnFlaWI4MzNrdmR1VVlvNFZsZk5xd28KQS9EcDU3SU9XQkZRa1ZQZGRCYWdCUFdSV2JPd0REZFdvZjlaWFFJREFRQUJBb0lCQUh2RnVCSjRuZURlKzNPdgpWYXN0WmlYdWFjR2Z0ZXRkZ2tQa2RCcUVtWFYyNjhvM09xYkpmblh5NUV5NGRZeWFKbjRYbnZRSlBJMTMxSnhmCkFrb2p5MzdsN0tOYTZJM2NQZzBzU3pvdnArRmpRMENzN1YxckpxdVRyWW5lL2s5cmZDMmtNVHpNVHFOWkJycjgKWHFCR29IL1VqS1V2dkxkZldGc2tuc2Npand0VjRFU0pOM0hUKzJxR2xDVE1YS1NXdFdMRVpSVXdnOGRYOGNVbwpqaHluWmhLWVJFcHBEeTZRRUF2bTEzaGtWbTZIWG55RW8yU1N6U2RsNnFocTRyV2ZucXFmNC9VdWNSM2o3ZU9WCnJoa1IwM0Y3MUJoM1ZPbkg3T2Q3NFhiVHVRWWpmWTFZdkZpVzliclA2bjRmd1pPbVBCVmIwbURIRnpzb212RjMKQlhJTG1PRUNnWUVBengzbThsTWRuRERQdU1ya1lET0l5QVljaUs4R3NHNVpPdXJEZ1JRMkdSTzc3Skt2NFhlKwpma2poMG5rN1FtV1IxVUZ0T1IwclFSYzRlQ2t1Z2FqTlJ3cW9tMVozVi9lWVBBVTcydGxwOHVkMDR6cTF1dVRGCmppVENnbERRMEVuTlhDTld3d0c5YkRLWThiZm9yeHRzdFkzQXRPR2hJTTBJUk4wemhJV2dJTmtDZ1lFQS8xOUIKTktyS25qWk5vWjV0L3lzaUJ5ei9zdGlORy9zN3pTbC9zWDJrMitLUC9aUTNJRVAxM1ZISFZxbzFIbkRMc21hLwpQM2N3RXFFWjc4L242UGVvMlA2bmdZT0pUODhDK0dBQWVKWlcySGpCNmdSYmsxWnY4ai9OQlRDWXFYQ3MwWWk1CjVZRmEwRnNWMnlxWmdIMk5mUGZvclNUZlJFNTNKbVJzbmtYUEtpVUNnWUVBcm5sYUc3aTRzT0xObWJZUlBKa3QKR0pOTlpqZExRMFV5RmRlK2FmWkV2RXRMZTdiMlF0RkV2ODFWcnFCQnMyVXN2S0VwQ1h2dy9CdzdqYjNqVjRhRApwdHpydkMvU3lWL2g5bTNTUmtId1pwZGtlQ2IxQUVQSHlENWZQTGducjg3OEdDb001S21La0tMdkJIRVFxckpICm1ZbVlWTWZkbkd3Y0V5YmtSemJwOWNFQ2dZQTFwQWFJVDQrNzUrQXFvS0t1Ukpzak1ycUxFSjJqVVFSZ3RlVFMKblhleGtFZDZsbFYxKzVCN2FxQWFmaW9tT0w4d3ZCQlQvbThrbXA1ZUZ5ZTVjYndQeUgzYTRJeEpMVXlNYTIzdAo1blpiaGhJRlcrRDRjK0dUMnY3dnBpT0xBOVhwTlhVRzFrTURIUDdjU0hoeDJ1MkxZRytKWHdOZXo3U0xaZkRDCjFoc0wyUUtCZ0J2amo5Z2pRNkFRbDZjeXNseVpvSEhrMU9LdVRoQW5kNjNaUU1ONkpIZnNnUVFobmRUOXBmTEUKTlJXRXdMTjNHVXo2VjVpMXZPZjZiRHVnNmhnU3FVblJuTjBFaXNuVk4vOFY3MVZhK3c1Y3oraUQxandGTHpUNApUUVhFZ0x5aVJMMWl4U0p2NlJSaUl3aWtjbGllaFhRNlhaMFRWdTdhYzc5bUlBaDdORVJNCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n---\n# Source: cilium/templates/cilium-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cilium-config\n  namespace: kube-system\ndata:\n\n  # Identity allocation mode selects how identities are shared between cilium\n  # nodes by setting how they are stored. The options are \"crd\" or \"kvstore\".\n  # - \"crd\" stores identities in kubernetes as CRDs (custom resource definition).\n  #   These can be queried with:\n  #     kubectl get ciliumid\n  # - \"kvstore\" stores identities in an etcd kvstore, that is\n  #   configured below. Cilium versions before 1.6 supported only the kvstore\n  #   backend. Upgrades from these older cilium versions should continue using\n  #   the kvstore by commenting out the identity-allocation-mode below, or\n  #   setting it to \"kvstore\".\n  identity-allocation-mode: crd\n  cilium-endpoint-gc-interval: \"5m0s\"\n  nodes-gc-interval: \"5m0s\"\n  # Disable the usage of CiliumEndpoint CRD\n  disable-endpoint-crd: \"false\"\n\n  # If you want to run cilium in debug mode change this value to true\n  debug: \"false\"\n  # The agent can be put into the following three policy enforcement modes\n  # default, always and never.\n  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes\n  enable-policy: \"default\"\n\n  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4\n  # address.\n  enable-ipv4: \"true\"\n\n  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6\n  # address.\n  enable-ipv6: \"false\"\n  # Users who wish to specify their own custom CNI configuration file must set\n  # custom-cni-conf to \"true\", otherwise Cilium may overwrite the configuration.\n  custom-cni-conf: \"false\"\n  enable-bpf-clock-probe: \"true\"\n  # If you want cilium monitor to aggregate tracing for packets, set this level\n  # to \"low\", \"medium\", or \"maximum\". The higher the level, the less packets\n  # that will be seen in monitor output.\n  monitor-aggregation: medium\n\n  # The monitor aggregation interval governs the typical time between monitor\n  # notification events for each allowed connection.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-interval: 5s\n\n  # The monitor aggregation flags determine which TCP flags which, upon the\n  # first observation, cause monitor notifications to be generated.\n  #\n  # Only effective when monitor aggregation is set to \"medium\" or higher.\n  monitor-aggregation-flags: all\n  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic\n  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.\n  bpf-map-dynamic-size-ratio: \"0.0025\"\n  # bpf-policy-map-max specifies the maximum number of entries in endpoint\n  # policy map (per endpoint)\n  bpf-policy-map-max: \"16384\"\n  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,\n  # backend and affinity maps.\n  bpf-lb-map-max: \"65536\"\n  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass\n  # optimization for nodeport reverse NAT handling.\n  bpf-lb-external-clusterip: \"false\"\n\n  # Pre-allocation of map entries allows per-packet latency to be reduced, at\n  # the expense of up-front memory allocation for the entries in the maps. The\n  # default value below will minimize memory usage in the default installation;\n  # users who are sensitive to latency may consider setting this to \"true\".\n  #\n  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore\n  # this option and behave as though it is set to \"true\".\n  #\n  # If this value is modified, then during the next Cilium startup the restore\n  # of existing endpoints and tracking of ongoing connections may be disrupted.\n  # As a result, reply packets may be dropped and the load-balancing decisions\n  # for established connections may change.\n  #\n  # If this option is set to \"false\" during an upgrade from 1.3 or earlier to\n  # 1.4 or later, then it may cause one-time disruptions during the upgrade.\n  preallocate-bpf-maps: \"false\"\n\n  # Regular expression matching compatible Istio sidecar istio-proxy\n  # container image names\n  sidecar-istio-proxy-image: \"cilium/istio_proxy\"\n\n  # Name of the cluster. Only relevant when building a mesh of clusters.\n  cluster-name: default\n  # Unique ID of the cluster. Must be unique across all conneted clusters and\n  # in the range of 1 and 255. Only relevant when building a mesh of clusters.\n  cluster-id: \"0\"\n\n  # Encapsulation mode for communication between nodes\n  # Possible values:\n  #   - disabled\n  #   - vxlan (default)\n  #   - geneve\n  tunnel: \"vxlan\"\n  # Enables L7 proxy for L7 policy enforcement and visibility\n  enable-l7-proxy: \"true\"\n\n  enable-ipv4-masquerade: \"true\"\n  enable-ipv6-masquerade: \"true\"\n\n  enable-xt-socket-fallback: \"true\"\n  install-iptables-rules: \"true\"\n  install-no-conntrack-iptables-rules: \"false\"\n\n  auto-direct-node-routes: \"false\"\n  enable-local-redirect-policy: \"false\"\n\n  kube-proxy-replacement: \"disabled\"\n  bpf-lb-sock: \"false\"\n  enable-health-check-nodeport: \"true\"\n  node-port-bind-protection: \"true\"\n  enable-auto-protect-node-port-range: \"true\"\n  enable-svc-source-range-check: \"true\"\n  enable-l2-neigh-discovery: \"true\"\n  arping-refresh-period: \"30s\"\n  enable-endpoint-health-checking: \"true\"\n  enable-health-checking: \"true\"\n  enable-well-known-identities: \"false\"\n  enable-remote-node-identity: \"true\"\n  synchronize-k8s-nodes: \"true\"\n  operator-api-serve-addr: \"127.0.0.1:9234\"\n  # Enable Hubble gRPC service.\n  enable-hubble: \"true\"\n  # UNIX domain socket for Hubble server to listen to.\n  hubble-socket-path: \"/var/run/cilium/hubble.sock\"\n  # An additional address for Hubble server to listen to (e.g. \":4244\").\n  hubble-listen-address: \":4244\"\n  hubble-disable-tls: \"false\"\n  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt\n  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key\n  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt\n  ipam: \"cluster-pool\"\n  cluster-pool-ipv4-cidr: \"10.0.0.0/8\"\n  cluster-pool-ipv4-mask-size: \"24\"\n  disable-cnp-status-updates: \"true\"\n  enable-vtep: \"false\"\n  vtep-endpoint: \"\"\n  vtep-cidr: \"\"\n  vtep-mask: \"\"\n  vtep-mac: \"\"\n  enable-bgp-control-plane: \"false\"\n  procfs: \"/host/proc\"\n  bpf-root: \"/sys/fs/bpf\"\n  cgroup-root: \"/run/cilium/cgroupv2\"\n  enable-k8s-terminating-endpoint: \"true\"\n  remove-cilium-node-taints: \"true\"\n  set-cilium-is-up-condition: \"true\"\n  unmanaged-pod-watcher-interval: \"15\"\n  tofqdns-dns-reject-response-code: \"refused\"\n  tofqdns-enable-dns-compression: \"true\"\n  tofqdns-endpoint-max-ip-per-hostname: \"50\"\n  tofqdns-idle-connection-grace-period: \"0s\"\n  tofqdns-max-deferred-connection-deletes: \"10000\"\n  tofqdns-min-ttl: \"3600\"\n  tofqdns-proxy-response-max-delay: \"100ms\"\n  agent-not-ready-taint-key: \"node.cilium.io/agent-not-ready\"\n---\n# Source: cilium/templates/cilium-agent/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium\nrules:\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  - services\n  - pods\n  - endpoints\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - list\n  - watch\n  # This is used when validating policies in preflight. This will need to stay\n  # until we figure out how to avoid \"get\" inside the preflight, and then\n  # should be removed ideally.\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumbgploadbalancerippools\n  - ciliumbgppeeringpolicies\n  - ciliumclusterwideenvoyconfigs\n  - ciliumclusterwidenetworkpolicies\n  - ciliumegressgatewaypolicies\n  - ciliumegressnatpolicies\n  - ciliumendpoints\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  - ciliumidentities\n  - ciliumlocalredirectpolicies\n  - ciliumnetworkpolicies\n  - ciliumnodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  - ciliumendpoints\n  - ciliumnodes\n  verbs:\n  - create\n- apiGroups:\n  - cilium.io\n  # To synchronize garbage collection of such resources\n  resources:\n  - ciliumidentities\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  verbs:\n  - delete\n  - get\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  - ciliumnodes/status\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  - ciliumendpoints/status\n  - ciliumendpoints\n  verbs:\n  - patch\n---\n# Source: cilium/templates/cilium-operator/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cilium-operator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n  - list\n  - watch\n  # to automatically delete [core|kube]dns pods so that are starting to being\n  # managed by Cilium\n  - delete\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # To remove node taints\n  - nodes\n  # To set NetworkUnavailable false on startup\n  - nodes/status\n  verbs:\n  - patch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform LB IP allocation for BGP\n  - services/status\n  verbs:\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  # to check apiserver connectivity\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  # to perform the translation of a CNP that contains `ToGroup` to its endpoints\n  - services\n  - endpoints\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies\n  - ciliumclusterwidenetworkpolicies\n  verbs:\n  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'\n  - create\n  - update\n  - deletecollection\n  # To update the status of the CNPs and CCNPs\n  - patch\n  - get\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnetworkpolicies/status\n  - ciliumclusterwidenetworkpolicies/status\n  verbs:\n  # Update the auto-generated CNPs and CCNPs status.\n  - patch\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpoints\n  - ciliumidentities\n  verbs:\n  # To perform garbage collection of such resources\n  - delete\n  - list\n  - watch\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumidentities\n  verbs:\n  # To synchronize garbage collection of such resources\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n    # To perform CiliumNode garbage collector\n  - delete\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumnodes/status\n  verbs:\n  - update\n- apiGroups:\n  - cilium.io\n  resources:\n  - ciliumendpointslices\n  - ciliumenvoyconfigs\n  verbs:\n  - create\n  - update\n  - get\n  - list\n  - watch\n  - delete\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - create\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - update\n  resourceNames:\n  - ciliumbgploadbalancerippools.cilium.io\n  - ciliumbgppeeringpolicies.cilium.io\n  - ciliumclusterwideenvoyconfigs.cilium.io\n  - ciliumclusterwidenetworkpolicies.cilium.io\n  - ciliumegressgatewaypolicies.cilium.io\n  - ciliumegressnatpolicies.cilium.io\n  - ciliumendpoints.cilium.io\n  - ciliumendpointslices.cilium.io\n  - ciliumenvoyconfigs.cilium.io\n  - ciliumexternalworkloads.cilium.io\n  - ciliumidentities.cilium.io\n  - ciliumlocalredirectpolicies.cilium.io\n  - ciliumnetworkpolicies.cilium.io\n  - ciliumnodes.cilium.io\n# For cilium-operator running in HA mode.\n#\n# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election\n# between multiple running instances.\n# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less\n# common and fewer objects in the cluster watch \"all Leases\".\n- apiGroups:\n  - coordination.k8s.io\n  resources:\n  - leases\n  verbs:\n  - create\n  - get\n  - update\n---\n# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium\"\n  namespace: kube-system\n---\n# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cilium-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cilium-operator\nsubjects:\n- kind: ServiceAccount\n  name: \"cilium-operator\"\n  namespace: kube-system\n---\n# Source: cilium/templates/hubble/peer-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: hubble-peer\n  namespace: kube-system\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    k8s-app: cilium\n  ports:\n  - name: peer-service\n    port: 443\n    protocol: TCP\n    targetPort: 4244\n  internalTrafficPolicy: Local\n---\n# Source: cilium/templates/cilium-agent/daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cilium\n  namespace: kube-system\n  labels:\n    k8s-app: cilium\nspec:\n  selector:\n    matchLabels:\n      k8s-app: cilium\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 2\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        # Set app AppArmor's profile to \"unconfined\". The value of this annotation\n        # can be modified as long users know which profiles they have available\n        # in AppArmor.\n        container.apparmor.security.beta.kubernetes.io/cilium-agent: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/mount-cgroup: \"unconfined\"\n        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: \"unconfined\"\n      labels:\n        k8s-app: cilium\n    spec:\n      containers:\n      - name: cilium-agent\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-agent\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        startupProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          failureThreshold: 105\n          periodSeconds: 2\n          successThreshold: 1\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9879\n            scheme: HTTP\n            httpHeaders:\n            - name: \"brief\"\n              value: \"true\"\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 3\n          timeoutSeconds: 5\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_CLUSTERMESH_CONFIG\n          value: /var/lib/cilium/clustermesh/\n        - name: CILIUM_CNI_CHAINING_MODE\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: cni-chaining-mode\n              optional: true\n        - name: CILIUM_CUSTOM_CNI_CONF\n          valueFrom:\n            configMapKeyRef:\n              name: cilium-config\n              key: custom-cni-conf\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        lifecycle:\n          postStart:\n            exec:\n              command:\n              - \"/cni-install.sh\"\n              - \"--enable-debug=false\"\n              - \"--cni-exclusive=true\"\n              - \"--log-file=/var/run/cilium/cilium-cni.log\"\n          preStop:\n            exec:\n              command:\n              - /cni-uninstall.sh\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            add:\n              # Use to set socket permission\n              - CHOWN\n              # Used to terminate envoy child process\n              - KILL\n              # Used since cilium modifies routing tables, etc...\n              - NET_ADMIN\n              # Used since cilium creates raw sockets, etc...\n              - NET_RAW\n              # Used since cilium monitor uses mmap\n              - IPC_LOCK\n              # Used in iptables. Consider removing once we are iptables-free\n              - SYS_MODULE\n              # We need it for now but might not need it for \u003e= 5.11 specially\n              # for the 'SYS_RESOURCE'.\n              # In \u003e= 5.8 there's already BPF and PERMON capabilities\n              - SYS_ADMIN\n              # Could be an alternative for the SYS_ADMIN for the RLIMIT_NPROC\n              - SYS_RESOURCE\n              # Both PERFMON and BPF requires kernel 5.8, container runtime\n              # cri-o \u003e= v1.22.0 or containerd \u003e= v1.5.0.\n              # If available, SYS_ADMIN can be removed.\n              #- PERFMON\n              #- BPF\n              - DAC_OVERRIDE\n              - FOWNER\n              - SETGID\n              - SETUID\n            drop:\n              - ALL\n        terminationMessagePolicy: FallbackToLogsOnError\n        volumeMounts:\n        # Unprivileged containers need to mount /proc/sys/net from the host\n        # to have write access\n        - mountPath: /host/proc/sys/net\n          name: host-proc-sys-net\n        # Unprivileged containers need to mount /proc/sys/kernel from the host\n        # to have write access\n        - mountPath: /host/proc/sys/kernel\n          name: host-proc-sys-kernel\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Unprivileged containers can't set mount propagation to bidirectional\n          # in this case we will mount the bpf fs from an init container that\n          # is privileged and set the mount propagation from host to container\n          # in Cilium.\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        - name: cni-path\n          mountPath: /host/opt/cni/bin\n        - name: etc-cni-netd\n          mountPath: /host/etc/cni/net.d\n        - name: clustermesh-secrets\n          mountPath: /var/lib/cilium/clustermesh\n          readOnly: true\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n          # Needed to be able to load kernel modules\n        - name: lib-modules\n          mountPath: /lib/modules\n          readOnly: true\n        - name: xtables-lock\n          mountPath: /run/xtables.lock\n        - name: hubble-tls\n          mountPath: /var/lib/cilium/tls/hubble\n          readOnly: true\n      initContainers:\n      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.\n      # We use nsenter command with host's cgroup and mount namespaces enabled.\n      - name: mount-cgroup\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: CGROUP_ROOT\n          value: /run/cilium/cgroupv2\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh and mount that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-mount /hostbin/cilium-mount;\n          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt \"$${BIN_PATH}/cilium-mount\" $CGROUP_ROOT;\n          rm /hostbin/cilium-mount\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            drop:\n              - ALL\n            add:\n              # Only used for 'mount' cgroup\n              - SYS_ADMIN\n              # Used for nsenter\n              - SYS_CHROOT\n              - SYS_PTRACE\n      - name: apply-sysctl-overwrites\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: BIN_PATH\n          value: /opt/cni/bin\n        command:\n        - sh\n        - -ec\n        # The statically linked Go program binary is invoked to avoid any\n        # dependency on utilities like sh that can be missing on certain\n        # distros installed on the underlying host. Copy the binary to the\n        # same directory where we install cilium cni plugin so that exec permissions\n        # are available.\n        - |\n          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;\n          nsenter --mount=/hostproc/1/ns/mnt \"$${BIN_PATH}/cilium-sysctlfix\";\n          rm /hostbin/cilium-sysctlfix\n        volumeMounts:\n        - name: hostproc\n          mountPath: /hostproc\n        - name: cni-path\n          mountPath: /hostbin\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            drop:\n              - ALL\n            add:\n              # Required in order to access host's /etc/sysctl.d dir\n              - SYS_ADMIN\n              # Used for nsenter\n              - SYS_CHROOT\n              - SYS_PTRACE\n      # Mount the bpf fs if it is not mounted. We will perform this task\n      # from a privileged container because the mount propagation bidirectional\n      # only works from privileged containers.\n      - name: mount-bpf-fs\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        args:\n        - 'mount | grep \"/sys/fs/bpf type bpf\" || mount -t bpf bpf /sys/fs/bpf'\n        command:\n        - /bin/bash\n        - -c\n        - --\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          mountPropagation: Bidirectional\n      - name: clean-cilium-state\n        image: \"quay.io/cilium/cilium:v1.12.4@sha256:4b074fcfba9325c18e97569ed1988464309a5ebf64bbc79bec6f3d58cafcb8cf\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - /init-container.sh\n        env:\n          - name: CILIUM_ALL_STATE\n            valueFrom:\n              configMapKeyRef:\n                name: cilium-config\n                key: clean-cilium-state\n                optional: true\n          - name: CILIUM_BPF_STATE\n            valueFrom:\n              configMapKeyRef:\n                name: cilium-config\n                key: clean-cilium-bpf-state\n                optional: true\n          - name: KUBERNETES_SERVICE_HOST\n            value: \"${api_vip}\"\n          - name: KUBERNETES_SERVICE_PORT\n            value: \"6443\"\n        terminationMessagePolicy: FallbackToLogsOnError\n        securityContext:\n          seLinuxOptions:\n            level: 's0'\n            # Running with spc_t since we have removed the privileged mode.\n            # Users can change it to a different type as long as they have the\n            # type available on the system.\n            type: 'spc_t'\n          capabilities:\n            # Most of the capabilities here are the same ones used in the\n            # cilium-agent's container because this container can be used to\n            # uninstall all Cilium resources, and therefore it is likely that\n            # will need the same capabilities.\n            add:\n              # Used since cilium modifies routing tables, etc...\n              - NET_ADMIN\n              # Used in iptables. Consider removing once we are iptables-free\n              - SYS_MODULE\n              # We need it for now but might not need it for \u003e= 5.11 specially\n              # for the 'SYS_RESOURCE'.\n              # In \u003e= 5.8 there's already BPF and PERMON capabilities\n              - SYS_ADMIN\n              # Could be an alternative for the SYS_ADMIN for the RLIMIT_NPROC\n              - SYS_RESOURCE\n              # Both PERFMON and BPF requires kernel 5.8, container runtime\n              # cri-o \u003e= v1.22.0 or containerd \u003e= v1.5.0.\n              # If available, SYS_ADMIN can be removed.\n              #- PERFMON\n              #- BPF\n            drop:\n              - ALL\n        volumeMounts:\n        - name: bpf-maps\n          mountPath: /sys/fs/bpf\n          # Required to mount cgroup filesystem from the host to cilium agent pod\n        - name: cilium-cgroup\n          mountPath: /run/cilium/cgroupv2\n          mountPropagation: HostToContainer\n        - name: cilium-run\n          mountPath: /var/run/cilium\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi # wait-for-kube-proxy\n      restartPolicy: Always\n      priorityClassName: system-node-critical\n      serviceAccount: \"cilium\"\n      serviceAccountName: \"cilium\"\n      terminationGracePeriodSeconds: 1\n      hostNetwork: true\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                k8s-app: cilium\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To keep state between restarts / upgrades\n      - name: cilium-run\n        hostPath:\n          path: /var/run/cilium\n          type: DirectoryOrCreate\n        # To keep state between restarts / upgrades for bpf maps\n      - name: bpf-maps\n        hostPath:\n          path: /sys/fs/bpf\n          type: DirectoryOrCreate\n      # To mount cgroup2 filesystem on the host\n      - name: hostproc\n        hostPath:\n          path: /proc\n          type: Directory\n      # To keep state between restarts / upgrades for cgroup2 filesystem\n      - name: cilium-cgroup\n        hostPath:\n          path: /run/cilium/cgroupv2\n          type: DirectoryOrCreate\n      # To install cilium cni plugin in the host\n      - name: cni-path\n        hostPath:\n          path:  /opt/cni/bin\n          type: DirectoryOrCreate\n        # To install cilium cni configuration in the host\n      - name: etc-cni-netd\n        hostPath:\n          path: /etc/cni/net.d\n          type: DirectoryOrCreate\n        # To be able to load kernel modules\n      - name: lib-modules\n        hostPath:\n          path: /lib/modules\n        # To access iptables concurrently with other processes (e.g. kube-proxy)\n      - name: xtables-lock\n        hostPath:\n          path: /run/xtables.lock\n          type: FileOrCreate\n        # To read the clustermesh configuration\n      - name: clustermesh-secrets\n        secret:\n          secretName: cilium-clustermesh\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          optional: true\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n      - name: host-proc-sys-net\n        hostPath:\n          path: /proc/sys/net\n          type: Directory\n      - name: host-proc-sys-kernel\n        hostPath:\n          path: /proc/sys/kernel\n          type: Directory\n      - name: hubble-tls\n        projected:\n          # note: the leading zero means this number is in octal representation: do not remove it\n          defaultMode: 0400\n          sources:\n          - secret:\n              name: hubble-server-certs\n              optional: true\n              items:\n              - key: ca.crt\n                path: client-ca.crt\n              - key: tls.crt\n                path: server.crt\n              - key: tls.key\n                path: server.key\n---\n# Source: cilium/templates/cilium-operator/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cilium-operator\n  namespace: kube-system\n  labels:\n    io.cilium/app: operator\n    name: cilium-operator\nspec:\n  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go\n  # for more details.\n  replicas: 2\n  selector:\n    matchLabels:\n      io.cilium/app: operator\n      name: cilium-operator\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n      labels:\n        io.cilium/app: operator\n        name: cilium-operator\n    spec:\n      containers:\n      - name: cilium-operator\n        image: \"quay.io/cilium/operator-generic:v1.12.4@sha256:071089ec5bca1f556afb8e541d9972a0dfb09d1e25504ae642ced021ecbedbd1\"\n        imagePullPolicy: IfNotPresent\n        command:\n        - cilium-operator-generic\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        - --debug=$(CILIUM_DEBUG)\n        env:\n        - name: K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: CILIUM_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CILIUM_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              key: debug\n              name: cilium-config\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: \"${api_vip}\"\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n        livenessProbe:\n          httpGet:\n            host: \"127.0.0.1\"\n            path: /healthz\n            port: 9234\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          timeoutSeconds: 3\n        volumeMounts:\n        - name: cilium-config-path\n          mountPath: /tmp/cilium/config-map\n          readOnly: true\n        terminationMessagePolicy: FallbackToLogsOnError\n      hostNetwork: true\n      restartPolicy: Always\n      priorityClassName: system-cluster-critical\n      serviceAccount: \"cilium-operator\"\n      serviceAccountName: \"cilium-operator\"\n      # In HA mode, cilium-operator pods must not be scheduled on the same\n      # node as they will clash with each other.\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                io.cilium/app: operator\n            topologyKey: kubernetes.io/hostname\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n        - operator: Exists\n      volumes:\n        # To read the configuration from the config map\n      - name: cilium-config-path\n        configMap:\n          name: cilium-config\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "cluster_name": "chongus"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "k3s-config",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "2eb4f53e577f70797239eb77e30fd08b667a9a4a3fdfa50b321d8e1a283b1a62",
            "rendered": "---\ntls-san:\n  - api.cho.rtrox.com\n  - 172.18.2.252\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
            "template": "---\ntls-san:\n  - ${api_fqdn}\n  - ${api_vip}\n# Disable KubeProxy in favor of Cilium\ndisable-kube-proxy: true\n# Disable Default CNI \u0026 Network Policy Enforcer\nflannel-backend: none\ndisable-network-policy: true\ndisable:\n  - servicelb\n  - traefik\n  - local-storage\n# Prepare k3s for prometheus metrics\nkube-controller-manager-arg:\n  - \"bind-address=0.0.0.0\"\nkube-proxy-arg:\n  - \"metrics-bind-address=0.0.0.0\"\nkube-scheduler-arg:\n  - \"bind-address=0.0.0.0\"\n# Controller Manager exposes etcd sqllite metrics\netcd-expose-metrics: true\n",
            "vars": {
              "api_fqdn": "api.cho.rtrox.com",
              "api_vip": "172.18.2.252"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "data",
      "type": "template_file",
      "name": "kube-vip",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "0b3bf76336d04106c460c0a476011e916c873167475576004050448bfcca91b2",
            "rendered": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/name: kube-vip-ds\n    app.kubernetes.io/version: v0.5.7\n  name: kube-vip-ds\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: kube-vip-ds\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app.kubernetes.io/name: kube-vip-ds\n        app.kubernetes.io/version: v0.5.7\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: node-role.kubernetes.io/master\n                operator: Exists\n            - matchExpressions:\n              - key: node-role.kubernetes.io/control-plane\n                operator: Exists\n      containers:\n      - args:\n        - manager\n        env:\n        - name: vip_arp\n          value: \"true\"\n        - name: port\n          value: \"6443\"\n        - name: vip_interface\n          value: eno1\n        - name: vip_cidr\n          value: \"32\"\n        - name: cp_enable\n          value: \"true\"\n        - name: cp_namespace\n          value: kube-system\n        - name: vip_ddns\n          value: \"false\"\n        - name: vip_leaderelection\n          value: \"true\"\n        - name: vip_leaseduration\n          value: \"5\"\n        - name: vip_renewdeadline\n          value: \"3\"\n        - name: vip_retryperiod\n          value: \"1\"\n        - name: address\n          value: 172.18.2.252\n        - name: prometheus_server\n          value: :2112\n        image: ghcr.io/kube-vip/kube-vip:v0.5.7\n        imagePullPolicy: Always\n        name: kube-vip\n        resources: {}\n        securityContext:\n          capabilities:\n            add:\n            - NET_ADMIN\n            - NET_RAW\n        volumeMounts:\n        - mountPath: /etc/kubernetes/admin.conf\n          name: kubeconfig\n      hostAliases:\n      - hostnames:\n        - kubernetes\n        ip: 127.0.0.1\n      hostNetwork: true\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n      volumes:\n      - hostPath:\n          path: /etc/kubernetes/admin.conf\n        name: kubeconfig\n  updateStrategy: {}\nstatus:\n  currentNumberScheduled: 0\n  desiredNumberScheduled: 0\n  numberMisscheduled: 0\n  numberReady: 0\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: eno1\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: 172.18.2.1\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: 172.18.2.252\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "template": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/name: kube-vip-ds\n    app.kubernetes.io/version: v0.5.7\n  name: kube-vip-ds\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: kube-vip-ds\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app.kubernetes.io/name: kube-vip-ds\n        app.kubernetes.io/version: v0.5.7\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: node-role.kubernetes.io/master\n                operator: Exists\n            - matchExpressions:\n              - key: node-role.kubernetes.io/control-plane\n                operator: Exists\n      containers:\n      - args:\n        - manager\n        env:\n        - name: vip_arp\n          value: \"true\"\n        - name: port\n          value: \"6443\"\n        - name: vip_interface\n          value: eno1\n        - name: vip_cidr\n          value: \"32\"\n        - name: cp_enable\n          value: \"true\"\n        - name: cp_namespace\n          value: kube-system\n        - name: vip_ddns\n          value: \"false\"\n        - name: vip_leaderelection\n          value: \"true\"\n        - name: vip_leaseduration\n          value: \"5\"\n        - name: vip_renewdeadline\n          value: \"3\"\n        - name: vip_retryperiod\n          value: \"1\"\n        - name: address\n          value: 172.18.2.252\n        - name: prometheus_server\n          value: :2112\n        image: ghcr.io/kube-vip/kube-vip:v0.5.7\n        imagePullPolicy: Always\n        name: kube-vip\n        resources: {}\n        securityContext:\n          capabilities:\n            add:\n            - NET_ADMIN\n            - NET_RAW\n        volumeMounts:\n        - mountPath: /etc/kubernetes/admin.conf\n          name: kubeconfig\n      hostAliases:\n      - hostnames:\n        - kubernetes\n        ip: 127.0.0.1\n      hostNetwork: true\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n      volumes:\n      - hostPath:\n          path: /etc/kubernetes/admin.conf\n        name: kubeconfig\n  updateStrategy: {}\nstatus:\n  currentNumberScheduled: 0\n  desiredNumberScheduled: 0\n  numberMisscheduled: 0\n  numberReady: 0\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: ${api_vip_iface}\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: ${router_id}\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: ${api_vip}\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "api_vip_iface": "eno1",
              "cluster_domain": "cho.rtrox.com",
              "router_id": "172.18.2.1"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "e90417cd731b88aade79294ca97e09f591c76c6249f11048da234fcd3904c104",
            "rendered": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/name: kube-vip-ds\n    app.kubernetes.io/version: v0.5.7\n  name: kube-vip-ds\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: kube-vip-ds\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app.kubernetes.io/name: kube-vip-ds\n        app.kubernetes.io/version: v0.5.7\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: node-role.kubernetes.io/master\n                operator: Exists\n            - matchExpressions:\n              - key: node-role.kubernetes.io/control-plane\n                operator: Exists\n      containers:\n      - args:\n        - manager\n        env:\n        - name: vip_arp\n          value: \"true\"\n        - name: port\n          value: \"6443\"\n        - name: vip_interface\n          value: eno1\n        - name: vip_cidr\n          value: \"32\"\n        - name: cp_enable\n          value: \"true\"\n        - name: cp_namespace\n          value: kube-system\n        - name: vip_ddns\n          value: \"false\"\n        - name: vip_leaderelection\n          value: \"true\"\n        - name: vip_leaseduration\n          value: \"5\"\n        - name: vip_renewdeadline\n          value: \"3\"\n        - name: vip_retryperiod\n          value: \"1\"\n        - name: address\n          value: 172.18.2.252\n        - name: prometheus_server\n          value: :2112\n        image: ghcr.io/kube-vip/kube-vip:v0.5.7\n        imagePullPolicy: Always\n        name: kube-vip\n        resources: {}\n        securityContext:\n          capabilities:\n            add:\n            - NET_ADMIN\n            - NET_RAW\n        volumeMounts:\n        - mountPath: /etc/kubernetes/admin.conf\n          name: kubeconfig\n      hostAliases:\n      - hostnames:\n        - kubernetes\n        ip: 127.0.0.1\n      hostNetwork: true\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n      volumes:\n      - hostPath:\n          path: /etc/kubernetes/admin.conf\n        name: kubeconfig\n  updateStrategy: {}\nstatus:\n  currentNumberScheduled: 0\n  desiredNumberScheduled: 0\n  numberMisscheduled: 0\n  numberReady: 0\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: eno1\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: 172.18.2.2\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: 172.18.2.252\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "template": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/name: kube-vip-ds\n    app.kubernetes.io/version: v0.5.7\n  name: kube-vip-ds\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: kube-vip-ds\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app.kubernetes.io/name: kube-vip-ds\n        app.kubernetes.io/version: v0.5.7\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: node-role.kubernetes.io/master\n                operator: Exists\n            - matchExpressions:\n              - key: node-role.kubernetes.io/control-plane\n                operator: Exists\n      containers:\n      - args:\n        - manager\n        env:\n        - name: vip_arp\n          value: \"true\"\n        - name: port\n          value: \"6443\"\n        - name: vip_interface\n          value: eno1\n        - name: vip_cidr\n          value: \"32\"\n        - name: cp_enable\n          value: \"true\"\n        - name: cp_namespace\n          value: kube-system\n        - name: vip_ddns\n          value: \"false\"\n        - name: vip_leaderelection\n          value: \"true\"\n        - name: vip_leaseduration\n          value: \"5\"\n        - name: vip_renewdeadline\n          value: \"3\"\n        - name: vip_retryperiod\n          value: \"1\"\n        - name: address\n          value: 172.18.2.252\n        - name: prometheus_server\n          value: :2112\n        image: ghcr.io/kube-vip/kube-vip:v0.5.7\n        imagePullPolicy: Always\n        name: kube-vip\n        resources: {}\n        securityContext:\n          capabilities:\n            add:\n            - NET_ADMIN\n            - NET_RAW\n        volumeMounts:\n        - mountPath: /etc/kubernetes/admin.conf\n          name: kubeconfig\n      hostAliases:\n      - hostnames:\n        - kubernetes\n        ip: 127.0.0.1\n      hostNetwork: true\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n      volumes:\n      - hostPath:\n          path: /etc/kubernetes/admin.conf\n        name: kubeconfig\n  updateStrategy: {}\nstatus:\n  currentNumberScheduled: 0\n  desiredNumberScheduled: 0\n  numberMisscheduled: 0\n  numberReady: 0\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: ${api_vip_iface}\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: ${router_id}\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: ${api_vip}\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "api_vip_iface": "eno1",
              "cluster_domain": "cho.rtrox.com",
              "router_id": "172.18.2.2"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "d905af600f6138378b55f57a69a76b939fdffda7a1d1cff6f090f46fc446e307",
            "rendered": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/name: kube-vip-ds\n    app.kubernetes.io/version: v0.5.7\n  name: kube-vip-ds\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: kube-vip-ds\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app.kubernetes.io/name: kube-vip-ds\n        app.kubernetes.io/version: v0.5.7\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: node-role.kubernetes.io/master\n                operator: Exists\n            - matchExpressions:\n              - key: node-role.kubernetes.io/control-plane\n                operator: Exists\n      containers:\n      - args:\n        - manager\n        env:\n        - name: vip_arp\n          value: \"true\"\n        - name: port\n          value: \"6443\"\n        - name: vip_interface\n          value: eno1\n        - name: vip_cidr\n          value: \"32\"\n        - name: cp_enable\n          value: \"true\"\n        - name: cp_namespace\n          value: kube-system\n        - name: vip_ddns\n          value: \"false\"\n        - name: vip_leaderelection\n          value: \"true\"\n        - name: vip_leaseduration\n          value: \"5\"\n        - name: vip_renewdeadline\n          value: \"3\"\n        - name: vip_retryperiod\n          value: \"1\"\n        - name: address\n          value: 172.18.2.252\n        - name: prometheus_server\n          value: :2112\n        image: ghcr.io/kube-vip/kube-vip:v0.5.7\n        imagePullPolicy: Always\n        name: kube-vip\n        resources: {}\n        securityContext:\n          capabilities:\n            add:\n            - NET_ADMIN\n            - NET_RAW\n        volumeMounts:\n        - mountPath: /etc/kubernetes/admin.conf\n          name: kubeconfig\n      hostAliases:\n      - hostnames:\n        - kubernetes\n        ip: 127.0.0.1\n      hostNetwork: true\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n      volumes:\n      - hostPath:\n          path: /etc/kubernetes/admin.conf\n        name: kubeconfig\n  updateStrategy: {}\nstatus:\n  currentNumberScheduled: 0\n  desiredNumberScheduled: 0\n  numberMisscheduled: 0\n  numberReady: 0\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: eno1\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: 172.18.2.3\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: 172.18.2.252\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "template": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  name: system:kube-vip-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"services\", \"services/status\", \"nodes\", \"endpoints\"]\n    verbs: [\"list\",\"get\",\"watch\", \"update\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"list\", \"get\", \"watch\", \"update\", \"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:kube-vip-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-vip-role\nsubjects:\n- kind: ServiceAccount\n  name: kube-vip\n  namespace: kube-system\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/name: kube-vip-ds\n    app.kubernetes.io/version: v0.5.7\n  name: kube-vip-ds\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: kube-vip-ds\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app.kubernetes.io/name: kube-vip-ds\n        app.kubernetes.io/version: v0.5.7\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: node-role.kubernetes.io/master\n                operator: Exists\n            - matchExpressions:\n              - key: node-role.kubernetes.io/control-plane\n                operator: Exists\n      containers:\n      - args:\n        - manager\n        env:\n        - name: vip_arp\n          value: \"true\"\n        - name: port\n          value: \"6443\"\n        - name: vip_interface\n          value: eno1\n        - name: vip_cidr\n          value: \"32\"\n        - name: cp_enable\n          value: \"true\"\n        - name: cp_namespace\n          value: kube-system\n        - name: vip_ddns\n          value: \"false\"\n        - name: vip_leaderelection\n          value: \"true\"\n        - name: vip_leaseduration\n          value: \"5\"\n        - name: vip_renewdeadline\n          value: \"3\"\n        - name: vip_retryperiod\n          value: \"1\"\n        - name: address\n          value: 172.18.2.252\n        - name: prometheus_server\n          value: :2112\n        image: ghcr.io/kube-vip/kube-vip:v0.5.7\n        imagePullPolicy: Always\n        name: kube-vip\n        resources: {}\n        securityContext:\n          capabilities:\n            add:\n            - NET_ADMIN\n            - NET_RAW\n        volumeMounts:\n        - mountPath: /etc/kubernetes/admin.conf\n          name: kubeconfig\n      hostAliases:\n      - hostnames:\n        - kubernetes\n        ip: 127.0.0.1\n      hostNetwork: true\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n      volumes:\n      - hostPath:\n          path: /etc/kubernetes/admin.conf\n        name: kubeconfig\n  updateStrategy: {}\nstatus:\n  currentNumberScheduled: 0\n  desiredNumberScheduled: 0\n  numberMisscheduled: 0\n  numberReady: 0\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  name: kube-vip\n  namespace: kube-system\nspec:\n  containers:\n  - args:\n    - manager\n    env:\n    - name: vip_arp\n      value: \"false\"\n    - name: port\n      value: \"6443\"\n    - name: vip_interface\n      value: ${api_vip_iface}\n    - name: vip_cidr\n      value: \"32\"\n    - name: cp_enable\n      value: \"true\"\n    - name: cp_namespace\n      value: kube-system\n    - name: vip_ddns\n      value: \"false\"\n    - name: bgp_enable\n      value: \"true\"\n    - name: bgp_routerid\n      value: ${router_id}\n    - name: bgp_as\n      value: \"64512\"\n    - name: bgp_peeraddress\n    - name: bgp_peerpass\n    - name: bgp_peeras\n      value: \"64512\"\n    - name: bgp_peers\n      value: 172.16.254.1:64512::false\n    - name: address\n      value: ${api_vip}\n    - name: prometheus_server\n      value: :2112\n    image: ghcr.io/kube-vip/kube-vip:v0.5.7\n    imagePullPolicy: Always\n    name: kube-vip\n    resources: {}\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n        - NET_RAW\n    volumeMounts:\n    - mountPath: /etc/kubernetes/admin.conf\n      name: kubeconfig\n  hostAliases:\n  - hostnames:\n    - kubernetes\n    ip: 127.0.0.1\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/admin.conf\n    name: kubeconfig\nstatus: {}\n",
            "vars": {
              "api_vip": "172.18.2.252",
              "api_vip_iface": "eno1",
              "cluster_domain": "cho.rtrox.com",
              "router_id": "172.18.2.3"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_group",
      "name": "flatcar-install",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node01",
            "metadata": {},
            "name": "flatcar-install-node01",
            "profile": "flatcar-install-node01",
            "selector": {
              "mac": "44:a8:42:3e:b9:27"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node02",
            "metadata": {},
            "name": "flatcar-install-node02",
            "profile": "flatcar-install-node02",
            "selector": {
              "mac": "b0:83:fe:cf:91:f7"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "flatcar-install-node03",
            "metadata": {},
            "name": "flatcar-install-node03",
            "profile": "flatcar-install-node03",
            "selector": {
              "mac": "b0:83:fe:cf:d7:ee"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install",
            "module.chongus.matchbox_profile.flatcar-install"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_group",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node01",
            "metadata": {},
            "name": "worker-node01",
            "profile": "worker-node01",
            "selector": {
              "node": "node01",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node02",
            "metadata": {},
            "name": "worker-node02",
            "profile": "worker-node02",
            "selector": {
              "node": "node02",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "worker-node03",
            "metadata": {},
            "name": "worker-node03",
            "profile": "worker-node03",
            "selector": {
              "node": "node03",
              "os": "installed"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker",
            "module.chongus.data.template_file.cilium-install",
            "module.chongus.data.template_file.k3s-config",
            "module.chongus.data.template_file.kube-vip",
            "module.chongus.matchbox_profile.worker"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_profile",
      "name": "flatcar-install",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node01",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node01",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLMYrDMBCF4V6nmPXCdpLsdsHkImkkzSRWkDRBMzb27UNI0qR58OD7f398zM3HIAtY2k1aewFrO2k/YBphWFTv/97XoGmJvDvJ6Lp23l3i6vO1Zc3cTixzbqKhFMK/xkjzc8ZpAMvwUe4m3MylBE2h27eHswGwCB5p84Lh9fNXtCJtASsIqRYycohSTVqgU2RW8wgAAP//FWpKkcgAAAA=\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node01-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node02",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node02",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vS9SgUX8RLkhltJMlIZlratxdRL14++OD3//3xMTcfg8xgaTNp6QWs7aR9h/8Rhln1fvS+Bk1z5M1JRte18+YSV5+vLWvmdmKZchMNpRD+NUaanjMeBrAMH+Vuws1cStAUun17OBsAi+CRVi8YXj9/RQvSGrCCkGohI7so1aQFOkVmNY8AAAD//1sM4inIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node02-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "args": [
              "initrd=flatcar_production_pxe_image.cpio.gz",
              "flatcar.config.url=http://matchbox.sid.rtrox.com/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
              "flatcar.first_boot=yes"
            ],
            "container_linux_config": null,
            "generic_config": null,
            "id": "flatcar-install-node03",
            "initrd": [
              "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe_image.cpio.gz"
            ],
            "kernel": "http://stable.release.flatcar-linux.net/amd64-usr/3374.2.0/flatcar_production_pxe.vmlinuz",
            "name": "flatcar-install-node03",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"path\":\"/opt/installer\",\"user\":{},\"contents\":{\"compression\":\"gzip\",\"source\":\"data:;base64,H4sIAAAAAAAC/1zLwYrCMBDG8XueYrYLe0vSxZtQfBEvSWa0kSQjmWlp315EvXj54IPf//fHx9x8DDKDpc2kpRewtpP2Hf5HGGbV+9H7GjTNkTcnGV3XzptLXH2+tqyZ24llyk00lEL41xhpes54GMAyfJS7CTdzKUFT6Pbt4WwALIJHWr1geP38FS1Ia8AKQqqFjOyiVJMW6BSZ1TwCAAD//14sVffIAAAA\",\"verification\":{}},\"mode\":320},{\"group\":{},\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"compression\":\"\",\"source\":\"data:,node03-installer\",\"verification\":{}}}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nRequires=network-online.target\\nAfter=network-online.target\\n[Service]\\nType=simple\\nExecStart=/opt/installer\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"installer.service\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.install"
          ]
        }
      ]
    },
    {
      "module": "module.chongus",
      "mode": "managed",
      "type": "matchbox_profile",
      "name": "worker",
      "provider": "provider[\"registry.terraform.io/poseidon/matchbox\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node01",
            "initrd": null,
            "kernel": null,
            "name": "worker-node01",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node01.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgYXBwLmt1YmVybmV0ZXMuaW8vdmVyc2lvbjogdjAuNS43CiAgbmFtZToga3ViZS12aXAtZHMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogICAgICBsYWJlbHM6CiAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICAgIHNwZWM6CiAgICAgIGFmZmluaXR5OgogICAgICAgIG5vZGVBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAgIG5vZGVTZWxlY3RvclRlcm1zOgogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL21hc3RlcgogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL2NvbnRyb2wtcGxhbmUKICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgY29udGFpbmVyczoKICAgICAgLSBhcmdzOgogICAgICAgIC0gbWFuYWdlcgogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IHZpcF9hcnAKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IHBvcnQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICAtIG5hbWU6IHZpcF9pbnRlcmZhY2UKICAgICAgICAgIHZhbHVlOiBlbm8xCiAgICAgICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICAgICAgdmFsdWU6ICIzMiIKICAgICAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogY3BfbmFtZXNwYWNlCiAgICAgICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgICAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYWRlcmVsZWN0aW9uCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiB2aXBfbGVhc2VkdXJhdGlvbgogICAgICAgICAgdmFsdWU6ICI1IgogICAgICAgIC0gbmFtZTogdmlwX3JlbmV3ZGVhZGxpbmUKICAgICAgICAgIHZhbHVlOiAiMyIKICAgICAgICAtIG5hbWU6IHZpcF9yZXRyeXBlcmlvZAogICAgICAgICAgdmFsdWU6ICIxIgogICAgICAgIC0gbmFtZTogYWRkcmVzcwogICAgICAgICAgdmFsdWU6IDE3Mi4xOC4yLjI1MgogICAgICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgICAgIHZhbHVlOiA6MjExMgogICAgICAgIGltYWdlOiBnaGNyLmlvL2t1YmUtdmlwL2t1YmUtdmlwOnYwLjUuNwogICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgbmFtZToga3ViZS12aXAKICAgICAgICByZXNvdXJjZXM6IHt9CiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgIC0gTkVUX1JBVwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICAgIG5hbWU6IGt1YmVjb25maWcKICAgICAgaG9zdEFsaWFzZXM6CiAgICAgIC0gaG9zdG5hbWVzOgogICAgICAgIC0ga3ViZXJuZXRlcwogICAgICAgIGlwOiAxMjcuMC4wLjEKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgIC0gZWZmZWN0OiBOb1NjaGVkdWxlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAtIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICBuYW1lOiBrdWJlY29uZmlnCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBuYW1lOiBrdWJlLXZpcAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMQogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC=--cluster-init\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node02",
            "initrd": null,
            "kernel": null,
            "name": "worker-node02",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node02.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgYXBwLmt1YmVybmV0ZXMuaW8vdmVyc2lvbjogdjAuNS43CiAgbmFtZToga3ViZS12aXAtZHMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogICAgICBsYWJlbHM6CiAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICAgIHNwZWM6CiAgICAgIGFmZmluaXR5OgogICAgICAgIG5vZGVBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAgIG5vZGVTZWxlY3RvclRlcm1zOgogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL21hc3RlcgogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL2NvbnRyb2wtcGxhbmUKICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgY29udGFpbmVyczoKICAgICAgLSBhcmdzOgogICAgICAgIC0gbWFuYWdlcgogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IHZpcF9hcnAKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IHBvcnQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICAtIG5hbWU6IHZpcF9pbnRlcmZhY2UKICAgICAgICAgIHZhbHVlOiBlbm8xCiAgICAgICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICAgICAgdmFsdWU6ICIzMiIKICAgICAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogY3BfbmFtZXNwYWNlCiAgICAgICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgICAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYWRlcmVsZWN0aW9uCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiB2aXBfbGVhc2VkdXJhdGlvbgogICAgICAgICAgdmFsdWU6ICI1IgogICAgICAgIC0gbmFtZTogdmlwX3JlbmV3ZGVhZGxpbmUKICAgICAgICAgIHZhbHVlOiAiMyIKICAgICAgICAtIG5hbWU6IHZpcF9yZXRyeXBlcmlvZAogICAgICAgICAgdmFsdWU6ICIxIgogICAgICAgIC0gbmFtZTogYWRkcmVzcwogICAgICAgICAgdmFsdWU6IDE3Mi4xOC4yLjI1MgogICAgICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgICAgIHZhbHVlOiA6MjExMgogICAgICAgIGltYWdlOiBnaGNyLmlvL2t1YmUtdmlwL2t1YmUtdmlwOnYwLjUuNwogICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgbmFtZToga3ViZS12aXAKICAgICAgICByZXNvdXJjZXM6IHt9CiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgIC0gTkVUX1JBVwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICAgIG5hbWU6IGt1YmVjb25maWcKICAgICAgaG9zdEFsaWFzZXM6CiAgICAgIC0gaG9zdG5hbWVzOgogICAgICAgIC0ga3ViZXJuZXRlcwogICAgICAgIGlwOiAxMjcuMC4wLjEKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgIC0gZWZmZWN0OiBOb1NjaGVkdWxlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAtIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICBuYW1lOiBrdWJlY29uZmlnCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBuYW1lOiBrdWJlLXZpcAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMgogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "args": null,
            "container_linux_config": null,
            "generic_config": null,
            "id": "worker-node03",
            "initrd": null,
            "kernel": null,
            "name": "worker-node03",
            "raw_ignition": "{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.3.0\"},\"kernelArguments\":{},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/PGRFPtotZqTnOcErult8kOch36EHPD/I5pPztI5g5KXgHz7DQ8aM3y/zWA1mckaFTH5YzlVieDV+c13UpPioCZN2uSDdXhN4L/CAv+Ox/n3z9PGTVATMecWpuPCwfrpHI3edBAPBt2+BLDDPQvSlXfhnL7VQbAj64txYklkUsRaOphz4qC21GpiDzmSjnCrdJsVd7lXrH53l97xT56FKq/bXV54HHK3yEwTIm+ZpzGJ8UMms7U0G6ErugX81TKAtO+qKbwRsatLGxFrWvuE5pPFgOlVBbhTaDalxW609jssBVxge2MbwGK27B0CYauUw7e9PCmxYgWbNKSnKsjoFGZQlUvrysR52x3QV1JH3qMQkJwKE9thFG8/b+vgraQyG+XT4lSg3RVhjOPiozYhUl37BTUn7uLSa8faEbBSzstAZsrc/8J8n/oBWVPmt+4uMMDMCx8pfexCDMrLz+0CsFSpsYwlvEpWkINky+i0jOivor1ZtwdNQBK4+t/oiXpzgmX18ucKaTfNtXOi8sdFQve72SwCsBgyZf+58jH1w043T0NhsjlhIl2frOF2Y3/86cBu0uoR7jrxbRNEA3sBn5pRC+VYu5gCTCHL2OHSmKxkiGbXQtyKR3eDJ+wqzWwMMolKOtWZWrhyy7DlIVaKZwV1GqYybmDizDJM0aJuatw==\"]}]},\"storage\":{\"files\":[{\"group\":{},\"overwrite\":true,\"path\":\"/etc/hostname\",\"user\":{},\"contents\":{\"source\":\"data:,node03.cho.rtrox.com\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/opt/k3s-install.sh\",\"user\":{},\"contents\":{\"source\":\"https://get.k3s.io\",\"verification\":{}},\"mode\":511},{\"group\":{},\"path\":\"/etc/rancher/k3s/config.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCnRscy1zYW46CiAgLSBhcGkuY2hvLnJ0cm94LmNvbQogIC0gMTcyLjE4LjIuMjUyCiMgRGlzYWJsZSBLdWJlUHJveHkgaW4gZmF2b3Igb2YgQ2lsaXVtCmRpc2FibGUta3ViZS1wcm94eTogdHJ1ZQojIERpc2FibGUgRGVmYXVsdCBDTkkgJiBOZXR3b3JrIFBvbGljeSBFbmZvcmNlcgpmbGFubmVsLWJhY2tlbmQ6IG5vbmUKZGlzYWJsZS1uZXR3b3JrLXBvbGljeTogdHJ1ZQpkaXNhYmxlOgogIC0gc2VydmljZWxiCiAgLSB0cmFlZmlrCiAgLSBsb2NhbC1zdG9yYWdlCiMgUHJlcGFyZSBrM3MgZm9yIHByb21ldGhldXMgbWV0cmljcwprdWJlLWNvbnRyb2xsZXItbWFuYWdlci1hcmc6CiAgLSAiYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtcHJveHktYXJnOgogIC0gIm1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAiCmt1YmUtc2NoZWR1bGVyLWFyZzoKICAtICJiaW5kLWFkZHJlc3M9MC4wLjAuMCIKIyBDb250cm9sbGVyIE1hbmFnZXIgZXhwb3NlcyBldGNkIHNxbGxpdGUgbWV0cmljcwpldGNkLWV4cG9zZS1tZXRyaWNzOiB0cnVlCg==\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/cilium-install.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/var/lib/rancher/k3s/server/manifests/runonce/kube-vip.yaml\",\"user\":{},\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBhbm5vdGF0aW9uczoKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rdWJlcm5ldGVzLmlvL2F1dG91cGRhdGU6ICJ0cnVlIgogIG5hbWU6IHN5c3RlbTprdWJlLXZpcC1yb2xlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6IFsic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIiwgIm5vZGVzIiwgImVuZHBvaW50cyJdCiAgICB2ZXJiczogWyJsaXN0IiwiZ2V0Iiwid2F0Y2giLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyJjb29yZGluYXRpb24uazhzLmlvIl0KICAgIHJlc291cmNlczogWyJsZWFzZXMiXQogICAgdmVyYnM6IFsibGlzdCIsICJnZXQiLCAid2F0Y2giLCAidXBkYXRlIiwgImNyZWF0ZSJdCi0tLQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBzeXN0ZW06a3ViZS12aXAtcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGt1YmUtdmlwCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXZpcC1kcwogICAgYXBwLmt1YmVybmV0ZXMuaW8vdmVyc2lvbjogdjAuNS43CiAgbmFtZToga3ViZS12aXAtZHMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogICAgICBsYWJlbHM6CiAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS12aXAtZHMKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby92ZXJzaW9uOiB2MC41LjcKICAgIHNwZWM6CiAgICAgIGFmZmluaXR5OgogICAgICAgIG5vZGVBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAgIG5vZGVTZWxlY3RvclRlcm1zOgogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL21hc3RlcgogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAgICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgLSBrZXk6IG5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL2NvbnRyb2wtcGxhbmUKICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgY29udGFpbmVyczoKICAgICAgLSBhcmdzOgogICAgICAgIC0gbWFuYWdlcgogICAgICAgIGVudjoKICAgICAgICAtIG5hbWU6IHZpcF9hcnAKICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAtIG5hbWU6IHBvcnQKICAgICAgICAgIHZhbHVlOiAiNjQ0MyIKICAgICAgICAtIG5hbWU6IHZpcF9pbnRlcmZhY2UKICAgICAgICAgIHZhbHVlOiBlbm8xCiAgICAgICAgLSBuYW1lOiB2aXBfY2lkcgogICAgICAgICAgdmFsdWU6ICIzMiIKICAgICAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgIC0gbmFtZTogY3BfbmFtZXNwYWNlCiAgICAgICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgICAgICAtIG5hbWU6IHZpcF9kZG5zCiAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgIC0gbmFtZTogdmlwX2xlYWRlcmVsZWN0aW9uCiAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgLSBuYW1lOiB2aXBfbGVhc2VkdXJhdGlvbgogICAgICAgICAgdmFsdWU6ICI1IgogICAgICAgIC0gbmFtZTogdmlwX3JlbmV3ZGVhZGxpbmUKICAgICAgICAgIHZhbHVlOiAiMyIKICAgICAgICAtIG5hbWU6IHZpcF9yZXRyeXBlcmlvZAogICAgICAgICAgdmFsdWU6ICIxIgogICAgICAgIC0gbmFtZTogYWRkcmVzcwogICAgICAgICAgdmFsdWU6IDE3Mi4xOC4yLjI1MgogICAgICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgICAgIHZhbHVlOiA6MjExMgogICAgICAgIGltYWdlOiBnaGNyLmlvL2t1YmUtdmlwL2t1YmUtdmlwOnYwLjUuNwogICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgbmFtZToga3ViZS12aXAKICAgICAgICByZXNvdXJjZXM6IHt9CiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgIC0gTkVUX1JBVwogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICAgIG5hbWU6IGt1YmVjb25maWcKICAgICAgaG9zdEFsaWFzZXM6CiAgICAgIC0gaG9zdG5hbWVzOgogICAgICAgIC0ga3ViZXJuZXRlcwogICAgICAgIGlwOiAxMjcuMC4wLjEKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgIC0gZWZmZWN0OiBOb1NjaGVkdWxlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICB2b2x1bWVzOgogICAgICAtIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgICBuYW1lOiBrdWJlY29uZmlnCiAgdXBkYXRlU3RyYXRlZ3k6IHt9CnN0YXR1czoKICBjdXJyZW50TnVtYmVyU2NoZWR1bGVkOiAwCiAgZGVzaXJlZE51bWJlclNjaGVkdWxlZDogMAogIG51bWJlck1pc3NjaGVkdWxlZDogMAogIG51bWJlclJlYWR5OiAwCgphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBuYW1lOiBrdWJlLXZpcAogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0Kc3BlYzoKICBjb250YWluZXJzOgogIC0gYXJnczoKICAgIC0gbWFuYWdlcgogICAgZW52OgogICAgLSBuYW1lOiB2aXBfYXJwCiAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAtIG5hbWU6IHBvcnQKICAgICAgdmFsdWU6ICI2NDQzIgogICAgLSBuYW1lOiB2aXBfaW50ZXJmYWNlCiAgICAgIHZhbHVlOiBlbm8xCiAgICAtIG5hbWU6IHZpcF9jaWRyCiAgICAgIHZhbHVlOiAiMzIiCiAgICAtIG5hbWU6IGNwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGNwX25hbWVzcGFjZQogICAgICB2YWx1ZToga3ViZS1zeXN0ZW0KICAgIC0gbmFtZTogdmlwX2RkbnMKICAgICAgdmFsdWU6ICJmYWxzZSIKICAgIC0gbmFtZTogYmdwX2VuYWJsZQogICAgICB2YWx1ZTogInRydWUiCiAgICAtIG5hbWU6IGJncF9yb3V0ZXJpZAogICAgICB2YWx1ZTogMTcyLjE4LjIuMwogICAgLSBuYW1lOiBiZ3BfYXMKICAgICAgdmFsdWU6ICI2NDUxMiIKICAgIC0gbmFtZTogYmdwX3BlZXJhZGRyZXNzCiAgICAtIG5hbWU6IGJncF9wZWVycGFzcwogICAgLSBuYW1lOiBiZ3BfcGVlcmFzCiAgICAgIHZhbHVlOiAiNjQ1MTIiCiAgICAtIG5hbWU6IGJncF9wZWVycwogICAgICB2YWx1ZTogMTcyLjE2LjI1NC4xOjY0NTEyOjpmYWxzZQogICAgLSBuYW1lOiBhZGRyZXNzCiAgICAgIHZhbHVlOiAxNzIuMTguMi4yNTIKICAgIC0gbmFtZTogcHJvbWV0aGV1c19zZXJ2ZXIKICAgICAgdmFsdWU6IDoyMTEyCiAgICBpbWFnZTogZ2hjci5pby9rdWJlLXZpcC9rdWJlLXZpcDp2MC41LjcKICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICBuYW1lOiBrdWJlLXZpcAogICAgcmVzb3VyY2VzOiB7fQogICAgc2VjdXJpdHlDb250ZXh0OgogICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgYWRkOgogICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgLSBORVRfUkFXCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG1vdW50UGF0aDogL2V0Yy9rdWJlcm5ldGVzL2FkbWluLmNvbmYKICAgICAgbmFtZToga3ViZWNvbmZpZwogIGhvc3RBbGlhc2VzOgogIC0gaG9zdG5hbWVzOgogICAgLSBrdWJlcm5ldGVzCiAgICBpcDogMTI3LjAuMC4xCiAgaG9zdE5ldHdvcms6IHRydWUKICB2b2x1bWVzOgogIC0gaG9zdFBhdGg6CiAgICAgIHBhdGg6IC9ldGMva3ViZXJuZXRlcy9hZG1pbi5jb25mCiAgICBuYW1lOiBrdWJlY29uZmlnCnN0YXR1czoge30K\",\"verification\":{}},\"mode\":420}]},\"systemd\":{\"units\":[{\"contents\":\"[Unit]\\nDescription=Install k3s\\nWants = network-online.target\\nAfter = network.target network-online.target\\nConditionPathExists=/opt/k3s-install.sh\\nConditionPathExists=!/opt/bin/k3s\\n[Service]\\nType=forking\\nTimeoutStartSec=180\\nRemainAfterExit=yes\\nKillMode=process\\nEnvironment=\\\"K3S_TOKEN=SUgK6pki1yzcdO40JmSGnzacN3KUrrmOm80Np2rgLyPXgVyG9ho8UtnhXNVKHKJl\\\"\\nEnvironment=\\\"INSTALL_K3S_EXEC='--server' 'https://172.18.2.252:6443'\\\"\\nExecStart=/usr/bin/sh -c \\\"/opt/k3s-install.sh\\\"\\n[Install]\\nWantedBy=multi-user.target\\n\",\"enabled\":true,\"name\":\"k3s-install.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\nConditionPathExists=/var/lib/rancher/k3s/server/manifests/runonce\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nKillMode=process\\nExecStart=/usr/bin/rm -rf /var/lib/rancher/k3s/server/manifests/runonce\\n\",\"name\":\"remove-runonce-manifests.service\"},{\"contents\":\"[Unit]\\nDescription=Remove runonce manifests\\n[Timer]\\nOnBootSec=10min\\n[Install]\\nWantedBy=timers.target\\n\",\"enabled\":true,\"name\":\"remove-runonce-manifests.timer\"}]}}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.chongus.data.ct_config.worker"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
